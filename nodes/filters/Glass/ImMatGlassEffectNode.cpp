#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Glass_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct GlassEffectNode final : Node
{
    BP_NODE_WITH_NAME(GlassEffectNode, "Glass Blur", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Blur")
    GlassEffectNode(BP* blueprint): Node(blueprint) { m_Name = "Glass Blur"; m_HasCustomLayout = true; m_Skippable = true; }

    ~GlassEffectNode()
    {
        if (m_effect) { delete m_effect; m_effect = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ScaleIn.IsLinked()) m_scale = context.GetPinValue<float>(m_ScaleIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_effect || gpu != m_device)
            {
                if (m_effect) { delete m_effect; m_effect = nullptr; }
                m_effect = new ImGui::Glass_vulkan(gpu);
            }
            if (!m_effect)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_effect->effect(mat_in, im_RGB, m_scale);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ScaleIn.m_ID)
        {
            m_ScaleIn.SetValue(m_scale);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _scale = m_scale;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ScaleIn.IsLinked());
        ImGui::SliderFloat("Scale##Glass", &_scale, 0.0, 30.f, "%.0f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_scale##Glass")) { _scale = 20.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_scale##Glass", key, ImGui::ImCurveEdit::DIM_X, m_ScaleIn.IsLinked(), "scale##Glass@" + std::to_string(m_ID), 0.0f, 30.f, 20.f, m_ScaleIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["scale"] = imgui_json::number(m_scale);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ueaac"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ScaleIn  = { this, "Scale" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ScaleIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_scale           {20.f};
    ImGui::Glass_vulkan * m_effect   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 7183;
    const unsigned int logo_data[7184/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x894bd628, 0xb82fe517, 0xf400c191, 0x9ff27acf, 
    0x3336f78e, 0xad9e0dcd, 0xa142dda8, 0xc759d837, 0x7266c81e, 0xb96231a4, 0x7c148224, 0xb0bd71c1, 0xff3a4e4e, 0xd1781700, 0xbdf328bc, 0xbb5727ac, 
    0x4587a011, 0xd89d0484, 0x8d932b3b, 0x98df46cc, 0x5f88a77c, 0x3eaf09a6, 0x6eaea4fd, 0xecd3bb27, 0x8ee199e3, 0xcbaf790b, 0x2bc14ace, 0xaee50b21, 
    0xf0bcfc3e, 0xee7b400f, 0x2d9af1e3, 0xa1b758fb, 0xeca67bfb, 0x122d38db, 0x97b54b47, 0xbf11aa24, 0xfa190307, 0x16e895fe, 0x055c05d2, 0xdac31fc0, 
    0xb7c3e7bc, 0xca3d9e01, 0x7b4e9031, 0x7d10641c, 0x667557ba, 0x8e252fdc, 0xd73ada48, 0x59f33ba5, 0x974bd19a, 0xc7cf6743, 0x176a7d3c, 0x40a707b9, 
    0xfcc71f7a, 0x583e4d2a, 0x1662649a, 0x04e60344, 0x1c8cb803, 0x3f509f73, 0xe18b5e03, 0x7e680c5f, 0xc286b424, 0x6864dde6, 0x6cf11dca, 0x7ce47556, 
    0xf81baace, 0x45f53cc0, 0x18ae07f7, 0xd38dd539, 0x614efc3c, 0x6fba0d4f, 0x9c69f3d0, 0x7164e432, 0x58ebf6d0, 0x6466acda, 0x84b98d12, 0xb31b1917, 
    0x081ec48e, 0xbdd2873e, 0x085fc7ef, 0x5bd2deac, 0xfade2efd, 0xe5edc86b, 0x8beded95, 0x4e2164ca, 0xb1b7dbc2, 0x9ec72b73, 0x0072a880, 0x359e9f23, 
    0x256ceec9, 0x17fad29e, 0x4889bbb4, 0x5281dd96, 0xc0ba8fad, 0x1c4182e0, 0x287ebf63, 0x199e85a9, 0x1b16f6a6, 0x0b1d431d, 0xeb99fbd3, 0x4b9a06fe, 
    0xddd406ed, 0x61ccb2bc, 0x41487749, 0x39c0483b, 0x4bdb9d1c, 0xc9cdcf73, 0x362bba26, 0xb750cf8a, 0xe2925896, 0xc83c48dc, 0x840e38a4, 0x122097e1, 
    0x03e62738, 0x0ae4a823, 0xde029ff3, 0x49a669c3, 0xdf228f32, 0x55646986, 0xe40d4340, 0x4f32e803, 0x718e335e, 0xb0fdbf93, 0x45ee51d7, 0x233fc974, 
    0x91db118c, 0x5ee5cff5, 0x27257865, 0x572a7424, 0xc6e7468b, 0x7b3c2d1d, 0x139f9be1, 0xa8b4fb69, 0xeff35774, 0x916566ed, 0x5b90c818, 0xf93609a3, 
    0x20e5ef8c, 0x45a49220, 0x19542a96, 0x665d1a3c, 0xfed34fdb, 0x34c92add, 0x8ee24866, 0x2cdf4038, 0xd0483892, 0x76160067, 0x06900455, 0x351948ee, 
    0xfc0dbfef, 0x7bf8a049, 0x7a3d965c, 0x1bdacaee, 0x2e2d77cb, 0x163412a3, 0x8b1b8fca, 0x9f484b99, 0x19c28dba, 0xe4690339, 0x777e8c8c, 0xa4f17d7c, 
    0x95f128fe, 0xfeb2b6e8, 0xa56ed3c6, 0xdca04332, 0xa67d49bb, 0x1f92e518, 0xe5865cb3, 0x1b494767, 0x2ce3fd71, 0x2ae471c3, 0x3c1c78fa, 0xeded5eb1, 
    0xe22be763, 0x52295dd6, 0xebaffab5, 0xaf35e9d4, 0x2ef55ada, 0xf5ae3892, 0x8d05324d, 0xbb62185e, 0x6f798cbd, 0x60f9c4fb, 0x0a0189bd, 0x5b8273e1, 
    0x6d41e26e, 0x1afe43ab, 0x00ff505f, 0xffb3e6a0, 0xaffa8100, 0xeb2c00ff, 0xf28165c4, 0x8649d1ac, 0xe29f5450, 0x9ed3331d, 0x7f921f95, 0x9f7f9be7, 
    0x61b9bec2, 0xf9584569, 0x49ab63c9, 0x78641fb9, 0xd4be5213, 0xb8b577f5, 0xd69ebab8, 0xaf0c23e6, 0x00c8a2e7, 0xee80623e, 0x1cf23ee8, 0xb1e0e52e, 
    0xd407c919, 0xadc868bf, 0x9e4f936d, 0xa4196d48, 0xbe717186, 0x40d51558, 0xd055bb40, 0xfb060cbb, 0x1e004f85, 0xf886e376, 0xfc2e6039, 0xe9aa3553, 
    0xcb506af3, 0x1634eb6c, 0x40382af2, 0xdd0541ca, 0xdf0bde47, 0xfd46afa1, 0xf4acada2, 0xdd7b12dd, 0x54f2c242, 0xd90fb179, 0xce233fde, 0xee96b710, 
    0xf9c8070b, 0xe3f2cbc7, 0xd7e00439, 0x587154c0, 0xd28fa488, 0x594d7e63, 0xc134fae2, 0x61c38d27, 0xe918ee7a, 0xff60f883, 0x5b579c00, 0x18867879, 
    0x3b32339a, 0x8e2af19d, 0x6e0bf24a, 0x872163e0, 0x68c8d54e, 0x717d4f70, 0x186f676b, 0x5876e692, 0x05388fa3, 0x9f648c9b, 0x8fbdde53, 0x708feee2, 
    0x05f1b627, 0x9ece95ad, 0x9cb56d87, 0xce443217, 0x6fcb6190, 0x1937cc0a, 0xc730c23c, 0xbade2be5, 0xaecc2565, 0x68e1644c, 0x856ea6ae, 0x24e1b664, 
    0xa03d8e76, 0x5e84931c, 0xf783f33b, 0x477bcdb1, 0x663a3dc3, 0x867496bb, 0x2a411e64, 0xcaca78e1, 0x00b750aa, 0x96b10196, 0x743c6d04, 0x0fdff16a, 
    0x2ff99324, 0xc3253269, 0xcc4c2247, 0x7d1fc90f, 0x1b7163bc, 0x8d3d47bd, 0x6ba1097d, 0x6e0d445e, 0xaaa82a23, 0xc0016c04, 0x7a908c03, 0xafe7d067, 
    0x6b387bb5, 0x33f05c5d, 0x585e7e2e, 0xdda4cd1e, 0x22b64885, 0x21edaa22, 0xdbf15c38, 0xe435f5f2, 0xc177b4bf, 0x691e2f2b, 0x9f9e3af6, 0x702d6aa6, 
    0xa136a997, 0x3804890e, 0x6e3e0291, 0x9a058c66, 0x0800a0e4, 0xde7993e3, 0x4dce30c1, 0x88775a74, 0xd446fbe3, 0xa0c6d26d, 0x60e4941f, 0xe0dcdefc, 
    0x1fb1557e, 0x7cdbde8b, 0x11430584, 0x92e4c265, 0xfa3ce7a4, 0x19535f93, 0x5979acc2, 0x6c9d0ef0, 0x7ce2f93c, 0x69b3648b, 0x6bb50d3f, 0x6d734e5d, 
    0xadd2162c, 0x089076cc, 0xd6e5b524, 0xa8cc1144, 0xe82a6523, 0x29204c1e, 0x2786b3b9, 0x5f673fcd, 0xc68f7815, 0xd1b82abe, 0x7bd6ac6c, 0xd4a2ed69, 
    0xc83e6d6d, 0x1afb642d, 0x072d6289, 0x7605e93f, 0xea891940, 0xda6e2ab2, 0xd702fb99, 0x358b6ee0, 0xa475daac, 0x1769a64d, 0xad58524a, 0x32926627, 
    0x4cd9c1e8, 0x8c6efabb, 0x6ec0930c, 0x081f740d, 0x37f80efe, 0xa4b1bee0, 0xc95b516a, 0x9296b616, 0xcfb25a5a, 0x89dab12c, 0x1c710fa5, 0xb847f540, 
    0xbbcce591, 0x14cc3498, 0x7ca22aaa, 0x4db50cf5, 0x156d8dd4, 0xe2d667f4, 0x674fce73, 0xdaae3e2c, 0xa1f597af, 0x8fed3ff0, 0xf0563ff1, 0xf8278b37, 
    0xf36d6a69, 0xa9cfa21d, 0xe636b24e, 0x16301017, 0xae141eef, 0x12399423, 0xe08ac18d, 0x777ece2e, 0xd2f055f8, 0x8b77e2f7, 0xe9f4d063, 0x7e4cd512, 
    0xb40dd774, 0xc82a0cc7, 0x1324881d, 0xdc0b80f7, 0x2c17ce95, 0x6afb87be, 0x163f557c, 0x182f693f, 0x495ca54f, 0xe32f8e3e, 0xb0bc3dfb, 0x22976cac, 
    0xe4d2d6d2, 0xb4dfaf67, 0x61241955, 0x93781f01, 0x47b2dfee, 0x5fe1f3c2, 0x75a33e04, 0xadcbdce4, 0x9ae105c7, 0x289f1c19, 0x41c631a1, 0xc45d010a, 
    0xdfac0e9c, 0xd4630c33, 0x2960a954, 0x95f24835, 0x559dd96a, 0xfca6c73a, 0x677ff839, 0xe101ede1, 0x7741b3bb, 0xcb3ced34, 0xbba24a6e, 0x85029001, 
    0xcf40eaf4, 0x1adb4565, 0x8ff03f75, 0xe6f37f69, 0xf1f700ff, 0xadc600ff, 0x69276596, 0x641ecdc0, 0x951fde9f, 0xe7a81378, 0x50d72327, 0x7cac558c, 
    0x54bff0dd, 0xef6b0c4f, 0xcd5bb07a, 0xb39f907c, 0x1852a91b, 0x25869bd1, 0x970fd4dd, 0xfac9ef70, 0x48fb7dd7, 0x7ddaaf45, 0x20caf29e, 0xedc50696, 
    0xe19abce6, 0x2dd97c18, 0xd4cd440a, 0xcb480c85, 0x150f009c, 0xbc1e3ae5, 0xb7ba06fa, 0x046b73c2, 0x88c8506a, 0x1f5826ad, 0x031c59b8, 0xc11927c7, 
    0x77bda63e, 0x5db299f6, 0xa3d2434b, 0xf624df13, 0xb166c8d0, 0xbcf3b2b1, 0xd8e165d5, 0xab50a1f0, 0xbe907129, 0x85f9c868, 0xeb4f1278, 0x3fd86731, 
    0xe7782481, 0xe2b3bc83, 0x54cc287d, 0x6f10da2f, 0x31f66877, 0x12ee2b3f, 0x0ca782c3, 0x20009509, 0x7dcd8065, 0xb449f105, 0x681e00ff, 0xd220deb6, 
    0xd834c874, 0x43b10db5, 0xca8cc815, 0x31c31955, 0x53c68b78, 0x96366c74, 0x03cfc866, 0xd1767e01, 0x2160566c, 0xa0242412, 0x27c8c955, 0x7d3d0780, 
    0x5aaff479, 0x5b4b35d3, 0x56ba854f, 0x25786991, 0x1ed422d4, 0xdb5cb16f, 0xac8c74b1, 0x4e4c3083, 0x31393904, 0xc8309f13, 0xb706c1d8, 0xc7793e95, 
    0x709b31ba, 0xa0ef696a, 0xd8afdab6, 0x544ac4f0, 0x8c75b9c8, 0x42882586, 0x3b19c178, 0xf59c9c7e, 0xf378c035, 0x075d81f6, 0xecd0b850, 0xe4e28240, 
    0x2a2c49b4, 0x22192af2, 0x029983db, 0x01475297, 0xbbebc048, 0xc42f7920, 0x8b5a8bcf, 0xc2321d5e, 0x0acd1124, 0x63ef2743, 0xf95c229a, 0x8f82d19b, 
    0x0744ab9c, 0xc9e51ba6, 0x0c1f390c, 0xf8505378, 0xe9a67f91, 0xdd335b9a, 0xb019324d, 0x0e86455a, 0x4c559a00, 0xe53b8c95, 0x3be376a4, 0xfd2924b9, 
    0x85810107, 0xa75afb08, 0x9719e6c5, 0xa3b297b4, 0xe9489ff7, 0x533c1abf, 0xdb763de3, 0x2059b245, 0xed7f55b4, 0xe1f5221f, 0x62ea4a90, 0x64ecce4c, 
    0x472b2186, 0x17bb1283, 0x34121829, 0x9feca7aa, 0xb664ba86, 0xa1d2169e, 0xee4963d5, 0x992cd61a, 0xf9313325, 0x8d77c140, 0xee04cf5d, 0x64b71960, 
    0x82573ca8, 0x9efd1c7c, 0x5784ef74, 0xada9463a, 0x5a9716ea, 0x7b49b2e4, 0xc790346b, 0x89795a1b, 0x90a3f210, 0x624c328f, 0x8ced3244, 0x22a49ab7, 
    0x6ffac130, 0xa8c976c2, 0x335eb3a4, 0x8cf74134, 0xa08e20b9, 0x0f9e8c03, 0xcfa89f24, 0x94aa7835, 0xaca4d25c, 0x89a73079, 0xb1e75c9c, 0x95f85f57, 
    0x784278a4, 0x9747752d, 0x499ab74d, 0x60673762, 0x8dc2a231, 0x191645e7, 0x8de501a5, 0xb1aa1032, 0x6fc0b13b, 0x7c3f3e99, 0x6b0f6f52, 0xafb6bab7, 
    0xd6e85cae, 0x2c9bfe1a, 0x6ee9d1d6, 0xb09c1d8b, 0x0a246e4d, 0x335c83c1, 0x28a2c6aa, 0x4b1267c8, 0x2623adb9, 0x5afba764, 0x0f9fe95f, 0xba682ffe, 
    0xcde5da6c, 0x57c4ddad, 0x3e37b717, 0xde86f944, 0xbfdab846, 0xc205376a, 0x48639116, 0x556e8f22, 0xfb637480, 0x2a7e88bf, 0xc5ab7ddd, 0x6543dc32, 
    0x96c2a56d, 0x056f45d1, 0x55d997bd, 0x360a0aa1, 0x5bcc4319, 0x1ba48924, 0x093104e4, 0x4e322fc2, 0x89962ca7, 0x47d92b74, 0x6e779c0e, 0xfb939eda, 
    0x5f6a7839, 0xf5177f8c, 0xd45877cd, 0x787b966e, 0x2e1f9624, 0x44b47ffa, 0x0222a5cc, 0xa3997646, 0x7ec0308e, 0x636423f3, 0x4df7ef71, 0x4d9a94ae, 
    0x9fd0769c, 0xc2c0a0dd, 0x30e0cf85, 0x16aff639, 0x107c97fd, 0xa1e0313c, 0xdbd7c52d, 0x932359e7, 0xb6652466, 0x4494102f, 0x5b3e7623, 0xe0369828, 
    0x3577c7a8, 0x92ba17ee, 0xb9710842, 0x739063ba, 0x5eeff4f8, 0xa9ab2a56, 0x47f4543e, 0xa58a86a7, 0xceaacc4f, 0xff26cd73, 0xd4f97300, 0x10845a37, 
    0x85e6554c, 0xb91dae5b, 0xadb5bfa8, 0xdbe2e77f, 0x1eaefafe, 0x7375265f, 0x2c7c3c9f, 0x1a6f96bf, 0x93aca535, 0xb25bd340, 0xc56873cd, 0xb8738564, 
    0x72f7e136, 0xef9f17c8, 0xeaf19c63, 0x85d7b43f, 0x7489352e, 0xfd97f67b, 0x415ec91a, 0x97793104, 0x8b05887b, 0x708b82e5, 0x96327711, 0x9e4337c3, 
    0x2ff0573e, 0x0bbc89c4, 0x5cada1e3, 0x5ba94f5b, 0x4d8a1143, 0x4d0c093a, 0x32c69575, 0x5749f733, 0xeb430fc6, 0xe333fb9a, 0x1efec0ba, 0x5a93579f, 
    0x93b94587, 0x1bd2924f, 0x6954973b, 0xc73ba354, 0x26313c86, 0x8c8c0a30, 0x2f20bb73, 0xa9848895, 0x4f5d8b57, 0x3556a5a6, 0xfee19995, 0xd3ce8209, 
    0xdf74d45c, 0xdadab210, 0xd2b7942d, 0xc4cd8148, 0x9a1f4351, 0x60cba3ce, 0xcc4fd006, 0x03043054, 0xbece679c, 0xd347fc23, 0xd053df6f, 0x86c474ed, 
    0x532daf4b, 0x4b7a3aed, 0x920d9176, 0x80b2ce12, 0x360ebdcf, 0x0408a182, 0x5f0d04ee, 0xdc536a15, 0xde93254f, 0xd2d69a2f, 0xcba67d58, 0x3696ba79, 
    0xc4881c2b, 0xb2810c48, 0xb471d246, 0x5e93e338, 0x5176e36d, 0xedd3c5e3, 0x42eadb36, 0xaba84015, 0xb9b49122, 0x9c81ccc5, 0xfdf2779c, 0x5fdda057, 
    0x7a32e0a4, 0x176b5a58, 0xf0a1eb59, 0x5a6b9e79, 0xa78647b5, 0x6bbd38b2, 0xd5a5d353, 0x236961ef, 0xbab55cb5, 0x4b5d825c, 0x769121e0, 0x36bfedae, 
    0x4872fbe0, 0xd14e6e27, 0xb9ec2ff6, 0x49f8c5e0, 0xc5470de0, 0x6d85a7fa, 0x564e4df5, 0x69dae282, 0x6b1b31a1, 0x0d676259, 0xb80a4b1a, 0x84c21366, 
    0x780765c2, 0x4fbbbc5f, 0x954edacc, 0xc5575de1, 0x4c5f5dd1, 0x4c17cd34, 0x66571cfb, 0xa45bb675, 0x3490bc90, 0x524c1d01, 0xccb43a33, 0x2d6fa9d2, 
    0xb1948f31, 0x6f7c8dfa, 0x2c9e6aae, 0xf8ab4b4b, 0x75678786, 0xa46f9bfd, 0xa294b543, 0x664865c6, 0xba4bac31, 0x50c41429, 0xe2d9c747, 0xdccca84e, 
    0xd0329619, 0x5e265a93, 0x8a788055, 0xebb584f1, 0x8fde2ef2, 0xd5daea16, 0x68acaf9e, 0x2cc550f6, 0x6b455b31, 0x67791224, 0x912cc9f7, 0xadcca75c, 
    0xb7f25521, 0xd7fb516f, 0xc30e84ca, 0xf81c3edd, 0xd1b454cb, 0xe9b19fb5, 0xa3b81b91, 0xd6e8b04f, 0x0349b3f6, 0xb7608bb8, 0x0a71080f, 0x95608c6e, 
    0x00877920, 0xfb2be7ed, 0xc2f3d65e, 0xa8f60ef7, 0xc1fb42b2, 0x42ea729d, 0x27d6be8c, 0x93dc822d, 0xa9f77882, 0xca78173e, 0x203e4cdf, 0x398e693f, 
    0x10f2867c, 0x1dbb1d4b, 0x52c097fc, 0xdb55d9cc, 0x2f6997b5, 0xbe663782, 0x4a789d7e, 0x9ff863a4, 0x2a035367, 0x5d5b6a34, 0x3eaae5ad, 0xa99df81f, 
    0xf8343eeb, 0x6f7fa48f, 0xab76dae9, 0xa4754d23, 0x736bc1d9, 0x7fbf891a, 0xefa7d124, 0xd3509598, 0x05b31245, 0xa14631c4, 0x079e5109, 0x2334dac5, 
    0xba7ccbc5, 0x444b8370, 0xc578fe86, 0x1f89c682, 0x8e39919c, 0x45b4c032, 0x290468db, 0x0548192c, 0xfd60af49, 0x9d74afa7, 0x9716e23f, 0x2b2edde1, 
    0xce4c4d5b, 0x91d5a02e, 0x7929d456, 0x6f244702, 0xb3fccf19, 0x173db76c, 0x47cb9d1c, 0xab89c6e0, 0xbac587f8, 0x0d316a72, 0xe4ddde5e, 0xd7b4e6d3, 
    0x35318534, 0x6eb34a92, 0x25dc0169, 0x91ac242d, 0xf82ee6c9, 0x29caee9c, 0x6e9d5a5f, 0x586d4e5a, 0x185d5cf9, 0xca487efb, 0xd8477efb, 0x9636711a, 
    0x49541691, 0x1be12e4a, 0x1938556e, 0x73f978da, 0xe79c41cf, 0xba27d300, 0x5b311717, 0xf3248d46, 0x8bc6e4c9, 0x809bc582, 0xaea8f73a, 0x44f295cf, 
    0x03185408, 0x9fbbe2a9, 0x1a001e87, 0x9dbaf69c, 0x12bc2beb, 0x136be92c, 0x66e04066, 0x6468e332, 0xb8f13bc0, 0xc0090587, 0x49f5fc1c, 0x8cf651aa, 
    0x79244dda, 0xbb0edacc, 0x7dba0e21, 0x94b301cc, 0x1882718d, 0x41909183, 0x3840e8c8, 0xcf126cc7, 0xffb547f8, 0xbdf5f900, 0x4fbe00ff, 0xf0d6d7f8, 
    0x03c96278, 0x0b09da66, 0x20d2e236, 0x6aaf27c9, 0xbb11fe93, 0xb5f3f92f, 0x07be00ff, 0x15eb56f8, 0xcb136b3b, 0xfcdce375, 0x7b1df878, 0x4be2b50e, 
    0x4d4a9fe7, 0xb1d9db68, 0xa5a78f36, 0xc6f39bf7, 0x233b1000, 0xf916373e, 0x39e30a1d, 0xd84f192a, 0x919eb4bf, 0xed86f715, 0x8eb464ae, 0x3c53b555, 
    0x59442237, 0x898d6521, 0x1998778b, 0x4408e5f7, 0xcd5ffd07, 0x4cbeb293, 0x37fc9dfd, 0xe25378aa, 0xdf25990e, 0x9eb6a2da, 0x418a971b, 0x24a8cfa7, 
    0xad0214c8, 0x7274271c, 0xe883cf46, 0xc088d55d, 0xed27f50f, 0x77756d43, 0x6134b1e1, 0x694bb260, 0xbd33b74c, 0xa5a450bc, 0xd9ac9d1c, 0x92513998, 
    0xaa105815, 0x46032a78, 0x6cfb972a, 0x83559f29, 0xd51d9eac, 0xef900f7d, 0xa4b9aecb, 0x733c47d8, 0x293f9619, 0x5f5477a5, 0x400cccbc, 0x259b8d30, 
    0xdb706048, 0x76fc80db, 0x95f019fe, 0xab35b9be, 0x8b3b92f8, 0x18191beb, 0xbd5cb00f, 0x1bc546b3, 0x9421e10c, 0xaef0fea2, 0x65c909e1, 0x79241919, 
    0x59b58717, 0x36e6d7e5, 0x88ebb6b0, 0x390156ee, 0x5f91090b, 0x3111a32e, 0x8d79c12a, 0xd9a9b376, 0x7ddae6bb, 0x275ec0ef, 0x0b9cfa17, 0x59d95ea2, 
    0x568ec6de, 0x72fb0e43, 0x24dbc939, 0x1c074f21, 0x0c1c19a1, 0xdaf5c380, 0x92705530, 0x3fb69ea6, 0x2c59a934, 0x5c7bb547, 0xfc2c7ee1, 0x22fcd348, 
    0x0ade68d3, 0x65d3bdb8, 0x7c610db6, 0x39f28811, 0xcafe4896, 0xd4b63bf2, 0x357fe499, 0xb87c3350, 0xab490574, 0x9e783cfb, 0x6dcd1c1d, 0xc5d17475, 
    0x0c2b3477, 0x6f730757, 0x55043239, 0xf15c8053, 0x38230792, 0xf1242ffe, 0x3df69dce, 0xea9e7952, 0xe5f2f2e2, 0xbfa679da, 0x6e12ed07, 0xc7481239, 
    0x24899921, 0xdd196795, 0xdfb41ef3, 0x1e49de0b, 0xad1c63a1, 0xea244122, 0x94278944, 0x1c721872, 0x1ce71482, 0xa647069e, 0xb831e06b, 0x9b4a3867, 
    0x9865d367, 0xc6c487c7, 0xf4f457bc, 0x3c2d443f, 0x24ed6d48, 0x1a6ed968, 0x5224df3d, 0xe1857c6f, 0x79f21c4f, 0xefd37b1d, 0x6278227e, 0x5fb1c3d3, 
    0x7af6d66a, 0xb624ca2d, 0xd46900ff, 0x9caf30a4, 0x59ea7049, 0x25387940, 0x14da3977, 0x0b165c85, 0xb4277cc3, 0x220d2d6b, 0x69dd3317, 0x29b6444e, 
    0x2ddb8a2c, 0xbc942ff6, 0x05053bc6, 0xef07484e, 0xfcef411e, 0x5f4af05f, 0xb5191e8e, 0x695c6dd2, 0xc9d042c2, 0x68a29128, 0xcd62d3dd, 0x88ac90f2, 
    0xa3222609, 0x653edccc, 0xde7c77da, 0x5ada0b1a, 0x3cf4434f, 0x830a267e, 0xccafa3a8, 0x07f1fbfc, 0x1b5f358a, 0xbb5a8f78, 0xdfbc6996, 0xb9e4593e, 
    0x12ede38a, 0x097c2849, 0x2c95894c, 0xd0827144, 0x21e54385, 0xec2b3050, 0xdaead95f, 0x49087fd6, 0xd6543a24, 0x9ebc673f, 0x6bf8971d, 0xb22c7384, 
    0x557797e7, 0x4795e022, 0x7762803b, 0x7c7bbf49, 0x9ef07fb3, 0xdee4e1ef, 0xab61ab66, 0x3c52e95b, 0xdaf7e9b1, 0x9f2e9db6, 0x4a0415e7, 0x923938a0, 
    0x035d1120, 0x00f34715, 0xfe1d0a67, 0xaa77f8b8, 0x69c1171d, 0x30376932, 0x0f624cdc, 0x8a187169, 0x5b1ac950, 0x0414ea8d, 0x80429050, 0xb005e705, 
    0x78fb4232, 0xbcc823bd, 0xadb0cf8f, 0xbe477bcd, 0x67a965a7, 0xe5dd65cb, 0x27cce30c, 0x4f724701, 0xa7aff06f, 0x90690f3e, 0x353a78db, 0x1cc74c82, 
    0xecd6c2d2, 0xeb6c4b4b, 0xc8917923, 0xdd9650c5, 0x9131aa9e, 0x7c338c8c, 0x28c43f61, 0xbbae5da7, 0x1e28a12f, 0x39545037, 0xf060183b, 0x5149b676, 
    0xa41ea89c, 0x2fb4b30f, 0x1c1e691b, 0xa96143f8, 0x68d9dba3, 0x5c5bbad6, 0x9222888b, 0x14892248, 0xb725b373, 0xd95bccf4, 0x9ca1dcc9, 0x888b4f82, 
    0xc925878a, 0xc13be7a8, 0x4423d023, 0x11008620, 0xd3fa88d9, 0x17bdb8fc, 0xf915fafe, 0x79fb7fd1, 0x6e4e91ea, 0x7c30bc2e, 0xee85b744, 0xb51efb60, 
    0x188ba37d, 0x774bb08b, 0x9204098c, 0x81b43700, 0xd42693b6, 0x579322ca, 0xebf61bfe, 0xefad89fe, 0x875a17fe, 0xae1900ff, 0xcbbf1a95, 0xea93a3f8, 
    0xe9c9b92f, 0x2ff1732f, 0xfc859fe0, 0xc5851d73, 0x5cf3a4fe, 0xa56b495b, 0x816b0b5f, 0xc6286468, 0x59441669, 0xb26ecf1c, 0x62517964, 0x6d37b563, 
    0xb49febdd, 0x7ce79fa6, 0x636cd535, 0xe8daaa84, 0x8ff78c97, 0x11e26d76, 0xda980a88, 0x2de6d738, 0x026af98c, 0x200f8c1d, 0x00fff20a, 0x9b145e82, 
    0x74091fc4, 0xa67b0b7b, 0x76dce5f0, 0xfbe7de22, 0x89db7533, 0x5a2a9b22, 0x3c20a518, 0xdd21cf8a, 0xc9f9ef1b, 0xbfb2c000, 0xe94dfb69, 0xc3f0cb50, 
    0x86d2fe4f, 0xdf66ad3b, 0xa37bb84a, 0x646f6a6d, 0x012b4fb7, 0x2a89f9ca, 0xbddf28a0, 0x18019991, 0xaf547274, 0xf1ca635e, 0xfdd25ad4, 0x9c2b434f, 
    0x26ac1296, 0xc2876eef, 0x9ae4051a, 0x3179816e, 0x191df2ba, 0x462a048c, 0x31948f59, 0xd830efbb, 0x1490424e, 0xb791eb28, 0x7c0d7ed6, 0xc6f0b542, 
    0xdfa871a9, 0x727a2c4f, 0x4cbcba5b, 0xd8995bc2, 0x77b101ba, 0x3b38362b, 0xd06104bb, 0xc5588957, 0x22697771, 0x30b68d42, 0x0a832e64, 0x38960499, 
    0xfa1cd0e9, 0x6dcf410f, 0x421d7af0, 0x96f6c4fb, 0xd1697f56, 0x9f48e8da, 0xf6dbb06e, 0x6d0ba180, 0x4e098ee4, 0x871e7fe5, 0x47250cf4, 0x8f2d891a, 
    0xb4aeaa8c, 0xb78ecf3b, 0x69637b29, 0xcfaa1565, 0x79dcb22a, 0xf38aacd2, 0x8a288622, 0x08333148, 0x46c67cdd, 0x1f20e462, 0xfcce9374, 0xad6ef02d, 
    0x6cd37e75, 0x8061acf2, 0x9531f7bc, 0x2486297f, 0x093003d8, 0x2ae71127, 0x46c20ee5, 0xf8c6151b, 0xbe17c6c7, 0xd9b2f12c, 0xdc59de5e, 0x9737c15a, 
    0x12249bf6, 0x627e4029, 0xbce206ac, 0x12244092, 0xaf085e09, 0x821ff07d, 0xd78a216f, 0xd4b4b547, 0x9967c112, 0xa42b75ae, 0xce151e81, 0x5c72d1f8, 
    0x6c6d24b0, 0x90cca702, 0x7c760e10, 0x518a738e, 0x130d25a9, 0xc222c73e, 0x9252b33a, 0xf06e8fbd, 0xb4d3b19d, 0x19a5288b, 0x91442299, 0x6d6628d8, 
    0x804a12a0, 0x57dc8e3a, 0x551b78b3, 0x46b42289, 0x26a33c96, 0x78369cc1, 0xfa9c23e3, 0x5e717b7a, 0xf04c1463, 0xcd7cf9a8, 0x175e71a3, 0x4957a03e, 
    0x6d59ede1, 0x5349b6e6, 0xb6a2237a, 0xc973ec46, 0xfac0e919, 0xd3c2d77a, 0x792fe3aa, 0xa8e3a49f, 0x5bb2d129, 0x43fb991e, 0xf1b3257c, 0x525dc3d7, 
    0x85f048eb, 0x9be2b986, 0x3cfb93a7, 0x99aede5b, 0xf1c42d71, 0x5c98a025, 0x41651109, 0x09b2fe6f, 0x2492d90e, 0xaf547e42, 0xe1233c9f, 0x8747f037, 
    0xb81ce17f, 0x5c3a0586, 0x41a3daf2, 0x3409973c, 0x972b8b7b, 0x60961091, 0x1bb763d9, 0x03d3018b, 0xde0f2fec, 0x73c24f8d, 0x2e65cd59, 0x981feda2, 
    0x8561beb6, 0xe87c982e, 0x1865e484, 0x540eac80, 0x53815582, 0xf1fdf983, 0xdfdac74f, 0xeb213e83, 0xc9a46b0d, 0xab719536, 0xd2c0f04a, 0x42dc2b5c, 
    0x9904545e, 0x1af3d7fc, 0xd84dc64d, 0xc9682071, 0xeb538550, 0x306a2eab, 0xa7323f71, 0x8b930acd, 0xcfe0fb3d, 0x186f7bc3, 0xd9ef8df8, 0xe1821696, 
    0xe81efd1b, 0x041a7747, 0x80b18c95, 0x8d6497db, 0x1218e511, 0x033710fc, 0x9fd5fec1, 0x677c2d10, 0xd32046ae, 0x6d46a3d5, 0x44ca6f3d, 0x2e1c71c9, 
    0x152efbce, 0xbae6c972, 0x6dc255b0, 0xb4f71985, 0xf67f4180, 0xf6c8f87f, 0xb5d41d3e, 0x334de779, 0xbe054b57, 0xeee6d68a, 0x58cb323d, 0x641b5965, 
    0x3101740f, 0x23af8efc, 0x082c6caa, 0xf3cf302c, 0x5d7c8ebf, 0x24be6aa6, 0x974a9fbc, 0x94a6d3cd, 0x0124c0dc, 0x2ff86c0c, 0xcac8a61a, 0x8d1772a4, 
    0x51a5a870, 0xe76b064e, 0x2dae526d, 0xb47a6cd9, 0x3dbd1739, 0xec59a1ad, 0xb60e5b15, 0x2913baa5, 0xfda6f4c9, 0x58ee3f8a, 0x78c1557e, 0xb5ba559b, 
    0x98cb46d4, 0x7a174967, 0x01435996, 0x1d0e86b9, 0x1dd7e941, 0x7fb2d631, 0xbf3fefb7, 0xff47fe07, 0xf4b5e300, 0xa8b6824a, 0xa62d96e7, 0xfb377dec, 
    0x7891e91c, 0xe6f04a9b, 0xfabcad9b, 0x6aa993b6, 0x9d3ef017, 0xd096ce3c, 0xb59dbda5, 0x8ce388c2, 0xded25da8, 0xc939313b, 0xe6633c8e, 0xd37edbdd, 
    0xfcd30e1e, 0x14afe159, 0xcd99df5b, 0x78f4869f, 0xd23e6db5, 0xb7c24a39, 0xbbc0972c, 0x200e49a7, 0x20d9028c, 0xdb1bc16e, 0x3feca73c, 0xbfc0affe, 
    0xffd616f6, 0xa5d9f400, 0x727ca4d7, 0x0f9000ff, 0xfb00ffc4, 0x00ffad15, 0xb94e1df4, 0x11c7edb1, 0xffde514e, 0xcc7fac00, 0x9d92cae6, 0xaa96b12a, 
    0x6f00ffcb, 0xf32300ff, 0x48b044e7, 0x23d4e4ac, 0xb6b94492, 0x37189995, 0x2253bb1f, 0x22f3eb83, 0xbadae9e7, 0x69c3044f, 0x75f8e17b, 0x56edd357, 
    0x729b59e6, 0xc0c41ec7, 0x0785761b, 0x773cc081, 0x34b1e2fa, 0xef17f97f, 0xc7a5ebbf, 0xdc7a88fe, 0x00ff7df8, 0xfd9f1d22, 0x08fd7f75, 0xb414e9d7, 
    0xcfc7c74a, 0x853f65e2, 0xa3f8f116, 0xb7d697c7, 0x1433a688, 0x9980596c, 0xb4ab5d88, 0x1ce47799, 0x1b18c9f7, 0xeb2b8e4a, 0x1d450a4f, 0x046597be, 
    0x20822348, 0x21c74821, 0xe7004655, 0x3ff90ad8, 0x94fc27e0, 0xf7fadfab, 0xd712fa1f, 0xff1a5ed6, 0x3f388f00, 0xd7cc3fdf, 0x49cdb9e3, 0xdf24154b, 
    0xa3fdc86f, 0x12568420, 0x00ff2e0d, 0xa8d8da99, 0x8a3e1961, 0x8d7ff971, 0x892ada6a, 0xbb33b055, 0xb0cb1af9, 0x00ff91fb, 0x56ccbfba, 0x1fdeb7ad, 
    0x5ee71fef, 0xb57be842, 0x6bf86ecf, 0x5a322471, 0x300f3b32, 0xf2e3c686, 0x1f196392, 0xf47cd7f7, 0x7fe5e7fa, 0xb428b6da, 0x197e8b9f, 0x8a63584b, 
    0x66cae6da, 0x456e6c6b, 0x2bdda863, 0x96584eb6, 0x314bce2c, 0x00188ff9, 0xc327f501, 0x7fa7bd9f, 0x28f47fc0, 0xdacfe56b, 0xdf4afefb, 0xc2ebbf83, 
    0xdc39fd6f, 0xd752ddd7, 0x5f557e0e, 0x6d9ee5fd, 0x0d500c7f, 0xdb1a4150, 0x86cb3408, 0x76931f02, 0x71103163, 0xf42ba1d8, 0x1e247424, 0x20d34037, 
    0x0bf5d3b6, 0xdb6bd7e8, 0x8c11b7b0, 0x23db7804, 0x0718bf07, 0x24d78320, 0xd5b5e7e4, 0xff39e63f, 0x8f9b6000, 0xd1956be6, 0x5be400ff, 0xe6ebbfd6, 
    0xc3d5e63f, 0x9e9edd80, 0x70ac443f, 0xed863f9a, 0xb52e70bc, 0x9659422d, 0x91d03663, 0xb18b2ab0, 0x18de2858, 0x19386ee0, 0x3fb462e0, 0x1fe955e1, 
    0xffebdaf3, 0x00ff2100, 0xc33715f1, 0x5c02f96f, 0xfd7fd77f, 0x95751da5, 0xe2a937eb, 0x00d9ff1f, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(GlassEffectNode, "Glass Blur", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Blur")