#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Dilation_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct DilationNode final : Node
{
    BP_NODE_WITH_NAME(DilationNode, "Dilation", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Morph")
    DilationNode(BP* blueprint): Node(blueprint) { m_Name = "Dilation"; m_HasCustomLayout = true; m_Skippable = true; }

    ~DilationNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Dilation_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_ksz);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        bool changed = false;
        int _ksz = m_ksz;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::SliderInt("Kernel Size##Dilation", &_ksz, 1, 30, "%d", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_size##Dilation")) { _ksz = 3; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_ksz != m_ksz) { m_ksz = _ksz; changed = true; }
        ImGui::EndDisabled();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("ksize"))
        {
            auto& val = value["ksize"];
            if (val.is_number()) 
                m_ksz = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["ksize"] = imgui_json::number(m_ksz);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue9ca"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Dilation_vulkan * m_filter {nullptr};
    int m_ksz {3};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5163;
    const unsigned int logo_data[5164/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf7003f00, 0x719e283b, 0x07d036e6, 0xc5c75c41, 0x17dea0fb, 
    0x57c8019c, 0x9beb7fce, 0xc9706d57, 0xa930246f, 0x19389f01, 0x9f7005ec, 0xe1459017, 0x64df934b, 0xab2dfa9f, 0xb94d18f1, 0x42c5fdc4, 0x3cc2b3fa, 
    0x98aedb2e, 0x94a2ed9a, 0xe16acf31, 0x0d3a333c, 0x959e33dd, 0x27eae9da, 0x33300e24, 0x72dbd45e, 0x15a535b3, 0xa37d68ca, 0x561914b8, 0xb91e1459, 
    0x4b226dad, 0xf2386548, 0x411de7dc, 0x839f7bc5, 0xc6f2de5e, 0x70258e05, 0x8aa070bd, 0x5d60a9f4, 0x7c3beb68, 0x9a1d178f, 0x1cd2232c, 0x8c7e3bdf, 
    0x42edd2f9, 0xee45958e, 0x9b630996, 0x7cb0e493, 0xfa9ae37a, 0xf85c00ff, 0xd2f8a253, 0x1e96a4c4, 0x255cd15d, 0x45e2b2cd, 0xe4757b3d, 0xf3b53ef4, 
    0x87bfc527, 0x5dc3af1a, 0xcb3be24a, 0x48a7814b, 0xc9de5bc4, 0x0272ac0b, 0xa8b80b09, 0x811cc005, 0xa606ae4a, 0xac457b1d, 0x509a0743, 0x69effec6, 
    0x2300ff76, 0x770c6dd0, 0x804b9196, 0x9111d455, 0xd616be5a, 0x89bff021, 0x4d0735ac, 0x00ff44d1, 0x9e761d38, 0x719d1f09, 0xc7b21cda, 0x59f25ba6, 
    0x38fd604c, 0xc82faea9, 0xefd90d1c, 0xb9542d5e, 0xecdd91b9, 0xfae0a279, 0x5ffc509f, 0xc50f73f8, 0x59dc003f, 0xc65f1046, 0x95b268bf, 0x1c28dbb8, 
    0x19067b02, 0x5fedeb07, 0x5e5ae909, 0xb87073d6, 0xe7366265, 0x43fb8a3c, 0xd9f176f6, 0xd2a6d0be, 0x26120935, 0x2519e6b2, 0x3da3bb70, 0x1f0f7d86, 
    0xbf82af88, 0x153fa2e0, 0x313ed2e3, 0xf01adeea, 0x2db3cd8d, 0x6a52bccd, 0xae4ad813, 0x3c045656, 0x5c3b6947, 0x380f2ce3, 0x8e5eeb61, 0x12b18c0a, 
    0xd2c74750, 0xab2c4bc4, 0x65570f53, 0x27e6f5b7, 0x386c7f89, 0xb2ea1a3e, 0x4cd77278, 0x3662eb17, 0x18599e3c, 0xcb2b4972, 0x9c23e38c, 0x37fc5756, 
    0xbed07feb, 0xfe9fef3f, 0xdb2f5fd9, 0x9ef12ffc, 0xcd156fa5, 0x897586af, 0xd150e5ed, 0x339f0ecb, 0x82d083a3, 0x9f540413, 0x777ca8f0, 0xa64200ff, 
    0x8200ffbb, 0x8af8bfc9, 0xc38395fa, 0xf5f56625, 0x6299a538, 0xb2d22625, 0xf8ea3ef4, 0xf726f151, 0x922fbec7, 0x2984a85b, 0x23556a6f, 0xc9499e53, 
    0xabfca03f, 0xfbd2f8ad, 0xff3125bc, 0xfec76500, 0x1ff36a43, 0x3e35d6d9, 0xffc0bd28, 0xd61f9600, 0x55e377bd, 0xee822fb2, 0x87243a8e, 0x7a33fdaf, 
    0x8cb2fefc, 0xb12bda2b, 0xdd6624fa, 0x6ff399b9, 0xf2926084, 0x52e12df5, 0x34e2caf2, 0x484cfc51, 0xebb57e00, 0x6cf02e3e, 0xe2d206de, 0x38bf5bbb, 
    0x6e8730c9, 0x36431ecc, 0xe1daf17f, 0xc75b07be, 0xc323f17d, 0x174836f0, 0x29a72f8b, 0x6bd58ff3, 0x8f687fde, 0x5c902538, 0xe528741b, 0xef778b7f, 
    0xf45a7f46, 0x9c5a4e9b, 0x9250d2fe, 0x1e70ec82, 0x1048d21c, 0x3b4f2b2a, 0x258308e3, 0x8dbe82be, 0x77e15df8, 0x6b166dd1, 0x1dd250e7, 0x27e448de, 
    0x00ff3db1, 0x77bcd60f, 0x932ed1c0, 0xa3c4b53d, 0x9520a37c, 0xedb063e4, 0xa4d15eed, 0xe2ad5beb, 0x3e66c772, 0xeef55ee8, 0x679a5d61, 0xd27ce6cf, 
    0x5e3d228f, 0x0617fdc2, 0x389e361e, 0xb3e656e0, 0x117f69a4, 0xa2752dbc, 0x3dcbb6ea, 0x32b4f0b4, 0xdce50602, 0x23210b85, 0xc1316ce5, 0x615e331d, 
    0x3c96f8a5, 0x9ef1c51d, 0xa42b3dca, 0xb65cfcd2, 0x2a4b1d4e, 0x24e03e9e, 0x75dafa8a, 0x475a5121, 0x4e69b5e7, 0x7ca2b98c, 0x42f8aff1, 0x97ea036f, 
    0xe6ed247a, 0x25b1439b, 0xc7c43cc6, 0xc788dfca, 0xa376e4d0, 0x8fc2afe1, 0xd3407c12, 0x745bb8a6, 0x9a49e1d3, 0x54d68d38, 0x198ea1cc, 0x1000a147, 
    0x91f15c4f, 0xe2077dcd, 0xf149078d, 0x7717f49d, 0xaa236d76, 0xcbc8cb15, 0x0a474e90, 0xbace5fdf, 0xcad6097d, 0x5d6328e6, 0x9e33cca8, 0x28e7eb7d, 
    0x699df4e4, 0xbedd8fba, 0xb7be3e96, 0x42a7d611, 0xff7bc91e, 0xbebd6900, 0x7fc2a75e, 0x2f8adfb5, 0xdf6600ff, 0xc9a7450c, 0x6aaf4924, 0x18d832d1, 
    0xc8abe04e, 0x571d4f79, 0x7b593d8e, 0xb37fca57, 0x7ed9c14f, 0x78f2eb20, 0x9b475697, 0xb363824b, 0x5cfbc9ce, 0x9e24c9f9, 0x7b9233aa, 0xfa5a8f93, 
    0x970afe6f, 0xdfe349a6, 0x7c0b5f8d, 0xea60a729, 0xb9f3e932, 0xa9881d32, 0xbb03a024, 0xde7ecadb, 0xf8ab6b9d, 0x3fbde07b, 0xb1169ec0, 0x31626cd2, 
    0xb547db5b, 0xe49c9141, 0xfa24b19c, 0xe3f127b1, 0xd0a52b1d, 0x7ba997a5, 0x0873df1d, 0xce66ab62, 0xd3167135, 0xdb8a0e4d, 0xde86b54c, 0x5518c038, 
    0x4f2aae03, 0x7ffbdab0, 0xe55d55df, 0x68bea901, 0xca15aff4, 0xc8a1e7ee, 0xfb411ebb, 0xebb0c03b, 0xde7c7cd7, 0xc6c77a55, 0xb581cf55, 0x4a908e13, 
    0xd713f27f, 0x98017c92, 0x8ce78bb7, 0x6bec3674, 0xc731fed8, 0x3e1400ff, 0x5c00ffa3, 0xd100ff25, 0x5d315f4f, 0xee00ff7e, 0x554bbd3e, 0xec0f78e8, 
    0xa71577e5, 0x3c0b6fc6, 0xb92616ec, 0xaf3e8968, 0xc58f221b, 0xbec60f98, 0xa1eff8c5, 0x5dbaf084, 0x9a6d60ac, 0x6fcf6635, 0x8ad4b79b, 0x70c16ff8, 
    0x97a00e4b, 0x5e22ad16, 0x0d342245, 0x9c0fde17, 0x05f23d82, 0xdfe3917d, 0x59c27f1e, 0x0bde5af0, 0x73bb368c, 0x23e83c70, 0xc82a324c, 0x6d0712c4, 
    0xaf98bfaa, 0xb5aad843, 0xf8797417, 0x69753a87, 0x1edb8ed5, 0x127a6547, 0x321c2d5f, 0x25bd27e3, 0x3f4bc6df, 0xf676ea0b, 0xf0f2b873, 0xca7ca477, 
    0x5cc81840, 0xfa39cef4, 0x50fc8cd7, 0x87179ff8, 0x14fbf415, 0xabc07e2f, 0x08a830b6, 0x480e0eea, 0xcfacf7f4, 0x670e3f82, 0x97abbdf8, 0x2d995bb8, 
    0xee6e60e3, 0xb8e03603, 0x5fef2e1f, 0x01f3bed6, 0x3e4ea783, 0x6b89b6da, 0x81877efd, 0x3fa5c68f, 0x3f594761, 0xe1affac0, 0xf8a78dd7, 0x1649ac8f, 
    0xd82f678b, 0xbd6650e0, 0x8c1861b8, 0x6714f09c, 0xd771073d, 0x69bad7d8, 0x7dfab616, 0x5ea524a2, 0x1c3b1feb, 0xb8dac792, 0x167803ef, 0x9baee1c3, 
    0x6c99a625, 0x4f96e06d, 0x92c3bc31, 0x2419685b, 0xe75d01fb, 0xf88e6087, 0x99016599, 0x0efd009b, 0x95886d05, 0x44737f3e, 0xb49607cf, 0x35f6e695, 
    0xacedeead, 0xd94bd62d, 0x0b383592, 0x0ff871e6, 0x77f1ca5a, 0x40138dc4, 0x9df5aed0, 0x2f3df256, 0xcf8cb147, 0xdac1dd3d, 0x0e7c4715, 0x5207e879, 
    0xb9660048, 0x11b68e2f, 0x6ba0c9e8, 0x880bc016, 0x6edc5e2e, 0x653c0439, 0xaf18eb8f, 0xd7daafce, 0x7c8c1fe2, 0x7c05f175, 0x4e767125, 0xfbb70989, 
    0x2a5f8425, 0xf9a82b49, 0x73c7fbdf, 0x03c03310, 0xc9493280, 0xe59aa4ca, 0x4b6e954b, 0x3d944ea1, 0x3df676e7, 0xae9ee18b, 0x607c373e, 0xf7c49ff1, 
    0x75c77e49, 0x78f4d328, 0x76341fe7, 0xb1a10051, 0x2319b9d8, 0xcf5e2db1, 0x38352634, 0xc1d75ced, 0xc10600ff, 0xd8079fe0, 0x00ffc159, 0xba58e02c, 
    0x5f077663, 0x8d3f39a9, 0x28727775, 0xcf85bc63, 0xea7578ad, 0xc78e6afb, 0x502a45ad, 0x77694651, 0xf3a4a007, 0x8d54d01b, 0x45f26024, 0xd48fcd37, 
    0x6fba3757, 0xec9f78cc, 0x1d6f38f1, 0xdae460ba, 0xff88fcb9, 0x03fa1a00, 0x1f9b15e3, 0xd581df03, 0xe47f94a2, 0xbf97af27, 0xe242ed65, 0xbb5ce2f7, 
    0xb1b4bc95, 0x00392c93, 0x95bf5e96, 0x3af15d7d, 0x6be17141, 0x36f96585, 0xb1e973be, 0xd3c4c1ab, 0xdea3106b, 0xa242d4c7, 0x3cf52397, 0xf87ef6af, 
    0xcdc5055f, 0x29abcef5, 0xc991508a, 0x20c1236c, 0xc889db1d, 0x871efe38, 0xbfe2a3b9, 0x1ec1d78d, 0x4e1f6d22, 0x8db9ba44, 0xa13364d1, 0x2fa3a1da, 
    0xef7e8ed8, 0xb7865ce7, 0x4a477de3, 0x326d5b5b, 0x2b235bfa, 0xccdabba2, 0x00eeb651, 0x1507a90c, 0xefc6f8c3, 0xadd6bc52, 0x5b9a66ee, 0x7d2325a9, 
    0x1869c9d5, 0x240356b0, 0x1d009e9c, 0x5cf52b7d, 0x85464506, 0xbadf75b1, 0x9f00ffbe, 0x96b9f091, 0x78d55d6f, 0xe7796e78, 0xab7bb48c, 0xdae91a8f, 
    0xf3e66242, 0xc921e650, 0x1cc4ec2c, 0x7d9231fd, 0xe087f42b, 0x3f3bc22f, 0xed0fbf84, 0x22e4ee6c, 0x895b8670, 0x12a00a25, 0x713c3177, 0xafc0738f, 
    0xf04ff822, 0xa79ac39f, 0x117ff48e, 0x6a5a5bdd, 0x4026b636, 0x492adcb2, 0xe10ada87, 0x623e80b1, 0x77c5f57a, 0x2f7e159f, 0xb8e27dc7, 0xdda33d7c, 
    0xafdb58a3, 0xd3d664fa, 0x24210f29, 0xc0d38e18, 0xe71ed451, 0x6e3ec791, 0x568d8a67, 0x74a39de6, 0x7502062c, 0xdd29aa6a, 0x27feddbb, 0xdbdea67f, 
    0xf5eecaf8, 0x3b4b1e2e, 0xa011594b, 0x296d4470, 0x9cebc125, 0x80f136ae, 0xc06f6b7d, 0x3ae42d11, 0x5a6ceea3, 0x9b6ec95f, 0x602a434e, 0x8aa07e82, 
    0x5937bdf3, 0xd1125bb6, 0xe4d8a8ca, 0x1f4f802b, 0x037eed5a, 0x0777a9ea, 0x80956389, 0xbedebf55, 0x5cee1c61, 0x91ef3f12, 0xd11a6d5e, 0xde3452af, 
    0x587beafa, 0x94b0249c, 0xb6b225a7, 0x1fe2819f, 0xeb2efe1c, 0xe1a7b69a, 0xda5818cd, 0xa9756547, 0xc451dc94, 0xaa8c90b1, 0xc941de49, 0x1c77807e, 
    0x9ecfcff1, 0xda14f02e, 0xe119edb7, 0xea3fbaf6, 0x7dbbe5b4, 0xc8f2818b, 0xff9c83ea, 0x911f1100, 0xe300ffae, 0x97fdab96, 0x1207ade3, 0x16c4236e, 
    0x146e01c8, 0xc779e379, 0xda35076e, 0x5ddba249, 0x6e3dc2f8, 0x0bdc9058, 0x57ae6c41, 0xba99a190, 0xadf45bfd, 0x46cbb13e, 0x00ff5d72, 0xacd81cc9, 
    0x84d66934, 0xd9fc937c, 0x827db2a8, 0x08799108, 0xa9f61900, 0x7c6fedec, 0xf6b67849, 0x0059e696, 0x51c0dbc9, 0x59e949ea, 0xbcbfa49a, 0xa1079ec2, 
    0x65f86daf, 0xf4d324e1, 0x2c5a697b, 0x4982ce5c, 0x73f32b65, 0xc7f65cc8, 0xea82571c, 0xd5a5247b, 0x8a71d599, 0x2f7f9e6d, 0x18f93bc2, 0xc411ea33, 
    0x9202e5d8, 0x4d91e307, 0x418500ff, 0x4100ff7b, 0xbf00ff44, 0xe86bfc67, 0x739bec0f, 0xdc2735d6, 0xdb647f52, 0xff34cf7f, 0xba69be00, 0xff7986f8, 
    0x3f8a5800, 0x19637f33, 0x4de2a9ce, 0x23e4e05a, 0x3d4e1540, 0xd900ff39, 0x88afebab, 0x4a78e436, 0x62e1c8f1, 0x00ffc976, 0x345f6dae, 0x0b7fcdfe, 
    0xda857ff5, 0x5dd4b4a1, 0xca914926, 0x0f4e445c, 0xf473da19, 0x793ca6af, 0x17c2f7ba, 0xa22a97b1, 0x711c2707, 0xe373b5e5, 0x1463b869, 0x7e7dec5a, 
    0x87a9aa16, 0x7cee5355, 0x36c3ad8b, 0xac18e3bb, 0x482264ad, 0xaaec04ad, 0x3b72a0c3, 0xaed7b2fb, 0x73f81b7c, 0xc4eff8a6, 0x25bee9b1, 0x48b3cc83, 
    0x494592a4, 0x06606d0a, 0x1f74b8d3, 0x788d1f30, 0x242f823f, 0x1bb5113f, 0x140927e9, 0x6104cd91, 0x901bdecf, 0xbd93fca9, 0x0fe0077d, 0xabe14b17, 
    0x10b6bca7, 0xd1c82ccb, 0xbb12349f, 0x1db1a772, 0xa767bfd6, 0x1de0da4b, 0xc77abf18, 0xd3eb75e6, 0x3daadcfa, 0x4f6a3f89, 0x21f0098d, 0x4ca1c1fe, 
    0x03dd5c92, 0xaf4d061c, 0xcfaf0a89, 0xe4b990d3, 0x3bda1963, 0xe03b3c92, 0xa30688a7, 0xe19a2460, 0xad52b8a6, 0xe6beb22c, 0x49922376, 0x497292e4, 
    0xfd3faff7, 0x75d463ac, 0x9ad788af, 0x5dcbede5, 0x8735e22c, 0x806f0923, 0xa6a3960f, 0x4e5e9f3a, 0xaf3c7972, 0x4bed0bc1, 0x485b12fe, 0x4c5a7a93, 
    0x646c24fb, 0xfc8a3370, 0xd4c231ef, 0xf5249c54, 0x7864d847, 0x4ab174ea, 0x3e2d696d, 0x4dabeef3, 0x5cb7634d, 0x46703eab, 0xbde69cc1, 0x7df1429f, 
    0x2d858f85, 0x4c9da09d, 0x089fc176, 0x3d2fe4a0, 0x0f5ef1fa, 0xb7f44be0, 0xca0f1998, 0xb04f0c38, 0xf8b06faf, 0x7c8f0f79, 0x42fb5736, 0xd1493e7d, 
    0x54852691, 0x0c082c94, 0xe68c3a32, 0x94139cbc, 0x9fada665, 0xa0559a5d, 0xc88a7aa3, 0xdff8f7fc, 0x517ce9e3, 0x6ce91af1, 0x2a2d06e5, 0xfefa8140, 
    0xe79ce1fc, 0x501fedd8, 0x097beb6b, 0x824fe39e, 0x541686e5, 0xcc0ea40e, 0x7e9faf01, 0x5ec7fe30, 0xf49efd29, 0x6b529deb, 0x0e3fe2a1, 0x75ce72cf, 
    0xf02aa358, 0x3a51c096, 0xff24ede4, 0x12241000, 0x07489071, 0xa2d5e0de, 0x9fe6f0b6, 0xe0d9156c, 0x3edb3886, 0xf85d83cb, 0x662f7298, 0x9d3a3eb6, 
    0x5637ac7f, 0x3344feda, 0x7137f746, 0x3ae671ae, 0xc5b947a6, 0xe8a78f7d, 0x1c6f61eb, 0x8e81db58, 0x857ccd98, 0x75881be1, 0x36e81a4f, 0xdf0b998b, 
    0x0e301a42, 0xfe04ef4a, 0xcdbe0618, 0x4422d4be, 0x82024e0c, 0xf14ac749, 0x5142f2eb, 0xd570e8e6, 0x52f9e494, 0x78d5f221, 0xaf364acf, 0xe3f97cad, 
    0xc13bdb4f, 0x15f1149e, 0x5a9696d6, 0x1dd0b4b6, 0xc2a775af, 0xeaee0e8d, 0x1e679c19, 0xffc38aa3, 0xf0f08600, 0x9e0bfd87, 0xc000ff23, 0xedf87f78, 
    0xea4daa6e, 0x427d73a2, 0xbc945b6f, 0xbf067313, 0x58136de0, 0x7953258e, 0x18c01567, 0x7f506ee4, 0x557c68ad, 0xc3473abf, 0x3dee76dd, 0x3b65c5a0, 
    0x11e38ce4, 0x56f8e939, 0x00ffec37, 0x3df8eda5, 0x893b3be1, 0x646faf4c, 0xfc51e6b6, 0xfea0325b, 0xc5bf5640, 0x00ff65cb, 0x16e26785, 0x3efb2323, 
    0xf2b0b7e0, 0xeeceb65e, 0x9e6694b1, 0xf03f7efa, 0x9a23574f, 0x6f4ab5fa, 0x97e2df74, 0xfe9e1ff9, 0x7cf3bf14, 0x5ea97305, 0x8ebf97dd, 0x7b8fa439, 
    0xf955bee1, 0x1d79727a, 0xdff49a7a, 0x5fc4fbd9, 0xdcd177db, 0x7874204b, 0xc9071265, 0x750c43da, 0xf93a3ffc, 0xefc2c3a3, 0x8160f354, 0xa08c831c, 
    0xe7200738, 0xe82bfd8e, 0xc2fed93f, 0x6c091bc6, 0x9aec17af, 0x33637ebc, 0x22e6da28, 0x393e1f53, 0x473d3d19, 0x82a37eb5, 0x4bb7539b, 0x555b091f, 
    0xd47edca1, 0xf7853d5a, 0xa4056c80, 0x00ff2d50, 0xc46e84f6, 0x459419ae, 0xd4e33c20, 0x069f71ad, 0xa7491f7e, 0xead262f8, 0x27f93c70, 0x871d8869, 
    0xfd901f03, 0xbfc49f6a, 0x7c8bbf15, 0x4e78a579, 0xb32f7b04, 0xdcdce749, 0x46b20c6e, 0x1d0305dc, 0xb13d0f72, 0xe1c55eef, 0xd982758b, 0x28964f20, 
    0x2bc600c6, 0x128b78e1, 0x86b2afbd, 0x78d1cf9d, 0x37aa085f, 0xe8885e5a, 0xc8e461f4, 0x9a33f080, 0x7a878ff7, 0x9c0589fc, 0x5d85c951, 0x51af0383, 
    0x1712155e, 0xd51e7be5, 0x542b78dc, 0x0bc0b336, 0x91cbda95, 0xecf88af8, 0xa419673d, 0xad39f6d9, 0x69935605, 0x9bb65e1f, 0xc2cff8a7, 0xad4edad7, 
    0x3776976c, 0xccb53db0, 0x8d24322e, 0x881fa9d4, 0xf129be26, 0x3b74980e, 0x563eedeb, 0xcfac350d, 0x95d01103, 0x951f0962, 0xdbe07f7d, 0x84b6bbf5, 
    0xe4b0ca96, 0xdff2157e, 0xfe7e6fed, 0x1595f804, 0xfabc59d3, 0xb36aaf7e, 0x2240c62b, 0xa06ec444, 0x7523e077, 0x38f6d5ea, 0x8452f398, 0x0cf343d7, 
    0xa44ea534, 0xc79dbae0, 0xbde0dfec, 0xbc19fe3e, 0x2f193a45, 0x6068b9a1, 0x1030e2c9, 0xeed4e364, 0xadfda622, 0x15de7cfc, 0x3d5a54f0, 0xbfb7c99d, 
    0x2ccb9fd5, 0x4758878d, 0x78a6472e, 0xd335a15f, 0x2b860a7c, 0x6a59062f, 0xd3c24a31, 0x926e8551, 0x96365026, 0x90319203, 0xe9b91770, 0xd37e215f, 
    0x885f3f5e, 0xd7af163f, 0xb0a7994e, 0x39d202b0, 0x675be514, 0xbbed2bde, 0x8eaff73c, 0x16339683, 0xfcb335f9, 0x8f925a8f, 0xfda8e6b6, 0xbb268fd4, 
    0x07303365, 0xcaa2e285, 0xb176d6fa, 0x79de583a, 0x8ab5cb72, 0x7f548383, 0x00ffe0b4, 0xaff3e39e, 0xac6c54a7, 0x09b1acd1, 0xf17d66b7, 0xb65d16fb, 
    0xf83bfbb9, 0x23f1f66e, 0x3653e296, 0x483bdae6, 0xb3827ec0, 0xbd5c3fbe, 0x165fc1a7, 0xffda11c9, 0x7817d900, 0x69f44f6f, 0xb05fab39, 0x379bfcaf, 
    0xffb3be85, 0xaad6e800, 0xfc3fb41f, 0xff160f91, 0xef22d800, 0xa44900ff, 0xf8df7cae, 0xe65f3dd4, 0xda24338f, 0x00ffa2bf, 0x9fce8fdb, 0x43f1b687, 
    0x03880e34, 0xe14f1e13, 0xafd700ff, 0xf4f5924a, 0x84b8b5cb, 0xe5cb9a2f, 0x2f3fc392, 0xce2be65f, 0xedf7057c, 0x7dd7b1fe, 0xfd8bf5aa, 0xf46be8ef, 
    0x910f3dea, 0x0fbf4d7d, 0xadc9db59, 0x8c60784d, 0x9201ce5c, 0x32b6bc40, 0x4eaff207, 0xc7d30ed3, 0x1afee615, 0xb58f00ff, 0xfa7700ff, 0x377df49a, 
    0x9e397ead, 0x57a3fd37, 0x22d3fdd4, 0xa3cffe8a, 0x5a7544a7, 0x05fd205f, 0x6547696d, 0xeee095da, 0x2e56cc1f, 0x05fdd095, 0xf1bf696d, 0x0fefbff2, 
    0x3e445ee7, 0xaf587a24, 0xfc449f85, 0x6867d430, 0x0bd952a3, 0x9fe735d3, 0xcf11b4b6, 0x9de9e063, 0x995ba515, 0x21470ce3, 0xf323a14a, 0x7557f951, 
    0x2deebff0, 0x8fb63f71, 0x21bc82fc, 0x935f00ff, 0x5f0be87f, 0x3f78db7a, 0x573cf991, 0xf0cc6ffb, 0x27e2433d, 0x93c11389, 0x4fab89e8, 0xe6b69616, 
    0x0b8fb725, 0x20e31c84, 0x358f1f67, 0x44105ee6, 0x479a4f9f, 0x95e62f45, 0xfc03b0cf, 0x977a754d, 0x7f2e83fc, 0x2a7f9beb, 0xff137ce5, 0xbfa92000, 
    0xe87fbbeb, 0x5c365e2b, 0xd97be695, 0x7954549c, 0xc42b8e55, 0xa9ae553a, 0xc2354fab, 0x40b13a33, 0x80515756, 0xb306384e, 0xd317e17f, 0x9f94e7bf, 
    0xfe4ffef7, 0x0f75b72a, 0xb900fff8, 0x8dae00ff, 0x7bbdeafc, 0x3a9fbb6d, 0x00d9ffcf, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(DilationNode, "Dilation", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Morph")
