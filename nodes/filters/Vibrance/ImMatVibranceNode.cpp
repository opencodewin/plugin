#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Vibrance_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct VibranceNode final : Node
{
    BP_NODE_WITH_NAME(VibranceNode, "Vibrance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    VibranceNode(BP* blueprint): Node(blueprint) { m_Name = "Vibrance"; m_HasCustomLayout = true; m_Skippable = true; }

    ~VibranceNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_VibranceIn.IsLinked())
        {
            m_vibrance = context.GetPinValue<float>(m_VibranceIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Vibrance_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_vibrance);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_VibranceIn.m_ID)
        {
            m_VibranceIn.SetValue(m_vibrance);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_vibrance;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_VibranceIn.IsLinked());
        ImGui::SaturationSelector("##slider_vibrance##Vibrance", ImVec2(200, 40), &val, 0.0f, -4.f, 4.f, zoom, 32, 1.0f, true);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_vibrance##Vibrance")) { val = 0.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_vibrance##Vibrance", key, ImGui::ImCurveEdit::DIM_X, m_VibranceIn.IsLinked(), "vibrance##Vibrance@" + std::to_string(m_ID), -4.f, 4.f, 0.f, m_VibranceIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_vibrance) { m_vibrance = val; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("vibrance"))
        {
            auto& val = value["vibrance"];
            if (val.is_number()) 
                m_vibrance = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["vibrance"] = imgui_json::number(m_vibrance);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue91c"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_VibranceIn = { this, "Vibrance"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_VibranceIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Vibrance_vulkan * m_filter   {nullptr};
    float m_vibrance        {0.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6129;
    const unsigned int logo_data[6132/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xd0003f00, 0x7792b5b4, 0x755462c8, 0xfd14afc9, 0xeb4b6fa0, 
    0x123c399a, 0x5d313f70, 0x60e3b3be, 0xf85a207e, 0x9244ce72, 0xa679b704, 0xe6073796, 0xa7e300c7, 0xedaf79ad, 0xe2912f11, 0x0e66132d, 0x881f03f7, 
    0xfe1a00ff, 0x3f61cb6b, 0xd2e652af, 0x67e9b5e9, 0x5df547fe, 0x39a3566a, 0xccfcf649, 0xf6632e0d, 0x5ac82d96, 0x036eade9, 0x6ac78301, 0xb6d9b4e3, 
    0x2723644a, 0x82a1ab1d, 0xc26cd35d, 0x1e4bc685, 0x00fffc83, 0x1071f75a, 0x51f03abb, 0xdcd0b38f, 0x72720537, 0x40c51d57, 0xd79580ba, 0xba0627af, 
    0xe9d80b2f, 0xa4895337, 0xc0295d80, 0x1efa9155, 0xd1d73afd, 0x7c0d00ff, 0x7f8de139, 0x415f584f, 0xcbc9e4d2, 0x6346b76f, 0x0dbfebfc, 0x1413cf93, 
    0xf3b9d2f9, 0x51119799, 0xca4d6dc0, 0x46f988de, 0xdbb960ea, 0x1b55f9df, 0x8d61b2fb, 0xce786d94, 0xbedeb355, 0xfba1f8b9, 0xcebae92b, 0xe1a33691, 
    0xaac1be08, 0x60df8cc0, 0xc049e501, 0x65a07ccb, 0x0100bb95, 0x5a07061d, 0x36c603f9, 0xb5849f1a, 0x54278d8b, 0x50c79ab2, 0xb7653bb7, 0x71a389b8, 
    0x0358dbe8, 0x8e831c86, 0x6c950641, 0x6906beae, 0x4a7df1da, 0x1c38e7c0, 0x9d548be2, 0xdccbbea4, 0xdc0d6ff7, 0xd9a0af2e, 0xe9fd28cf, 0xa622068c, 
    0x4d9fbeb4, 0xb3bb21d4, 0x0e2cc390, 0xe4794224, 0x7ce18a1c, 0x00ffa933, 0xd662f867, 0xf9109fe9, 0x00707279, 0x36b79afa, 0xcca26eb6, 0x8c03ad4e, 
    0x23c8a1ab, 0x8b315feb, 0x3847558c, 0x707a2ead, 0x9e0637c3, 0xf66b3db7, 0x7ee4f09e, 0x810ef03b, 0x514c67f1, 0x61898c0c, 0x394ec4ac, 0x38e30a07, 
    0xf1cad6ce, 0x5fe911d4, 0xedfaeb2e, 0x1bb4879f, 0x9cfd628d, 0x55e15b5b, 0x8eb45c22, 0xa60775df, 0x7dc5734f, 0xe227f02f, 0xfef097be, 0x6f3ac4d3, 
    0x3eb7278d, 0x90b3bf0c, 0x54aa7d5f, 0x700a0189, 0x73177201, 0x1909d0fd, 0x07e75724, 0x7c4c3c8c, 0xdb4be257, 0x699044e8, 0x9dae2ba9, 0xd9cf2167, 
    0x837cf7ad, 0x27639cd0, 0xc9aeafb9, 0x71da5fb0, 0x1dbb9fbc, 0xce8ffcfc, 0x64f9b8b1, 0x8a85a912, 0xa50fdebb, 0xbc4d7f9f, 0x8dcfabcd, 0xee963b3e, 
    0x11df3469, 0x6e56e85f, 0xd3b1a3e5, 0x46710cee, 0x7df2803e, 0xff50eb49, 0xf8e6c200, 0x4300ff95, 0x00ffbbce, 0x35fead81, 0x4f78dbcd, 0x66bc1ac4, 
    0xdac3c7e2, 0x2409a7ce, 0x646c6c19, 0xa9bb1599, 0xe9613860, 0xf86f2aee, 0xff593c40, 0x89774200, 0x2f53f07f, 0x0be957f8, 0x952b420b, 0x7ce45b41, 
    0x540cb31c, 0xeea8339f, 0xfbc2b77b, 0xdcf12689, 0x96395377, 0x69a558e6, 0x78c43f24, 0x6bdaafad, 0x49abf862, 0x01f7dd2d, 0x2bfc23f5, 0x5164e12f, 
    0xda218db7, 0xff8be53f, 0xfdde2a00, 0x1f122daa, 0x1947e813, 0xe2bede2c, 0x5fe622bf, 0xf7d7f4da, 0xfb7e467f, 0x4d33ac1b, 0x4cf3bfdd, 0x40f774e2, 
    0x7ae04bcc, 0x17fccdd6, 0x3b9b5f10, 0x9620798b, 0x41d60535, 0x037982b4, 0x640d421f, 0xfbc76af8, 0x65dac453, 0xd44de182, 0x702c00e9, 0xfe55773e, 
    0xb47fe9b5, 0x97259f16, 0x585e1dc6, 0x0833acf6, 0xff392036, 0x1d749700, 0x35dd00ff, 0x4d4551d7, 0x2915f726, 0x7a8c5acd, 0x62dfdfa6, 0xe06d87df, 
    0x13ed83b4, 0x207537ca, 0xf4b5ba9f, 0x0fdfc0cf, 0xdb17c55f, 0x96e9d4ae, 0x8ccbe3b2, 0x5caf33f1, 0x1f743f85, 0xefa0cf53, 0x13783d5f, 0x6f790d4a, 
    0xbb377075, 0x30de9e15, 0x770e5278, 0x324ebfb7, 0xe92b3d47, 0xa9780bef, 0x4149b426, 0xf7469966, 0xcfe25f66, 0x7da5d71f, 0xa96b5d06, 0x67c3873e, 
    0xd9cffefc, 0xefb9eb53, 0xdbd0341a, 0x9608aca2, 0x80e24eaa, 0xa9e39ce5, 0x7f79ad27, 0x3afb39ed, 0xbc1d1f69, 0x17af2e37, 0x2de36d9d, 0x699c4f23, 
    0x1feddab2, 0xd18c606d, 0xd391cb5b, 0xea86dbcc, 0x5fbd2301, 0x215abcd2, 0xcc876497, 0x750acedd, 0x0d5db1fc, 0x9d4e8eaf, 0x9991e61e, 0xb1506eb7, 
    0x401eb083, 0x5fefe9e7, 0xafd20979, 0xa39a4a0e, 0xc45259f2, 0xd4aaeae0, 0x3d3f9aae, 0x5f3766b4, 0x22796709, 0xbedd1e2a, 0x038ce047, 0xacb14790, 
    0xc21bd91f, 0xc5f8313e, 0x7e3aeaa0, 0x5e5ca28d, 0x8c39a543, 0x907c526a, 0x1d46dc4b, 0xf01c66b8, 0xe28c8133, 0xfdbfddbe, 0x172f749e, 0xa97b8af8, 
    0x1d1e4ced, 0xb9e689bb, 0x0f975bb1, 0x2eb1cb25, 0xdb0ac973, 0x8c713889, 0x2ff58af1, 0xc27f7801, 0x3df406df, 0x0d9ac20b, 0x405a69a3, 0xb6b5653f, 
    0x039b24f3, 0x3b0b6271, 0xa9276333, 0x2bbee639, 0x71c69005, 0xf0194baf, 0x6fad7bb9, 0xcf9d5fa7, 0x2e0ef3d1, 0x2b744ea9, 0x2b973560, 0x9a6e4fe6, 
    0xb956ab6f, 0x48fbf9f8, 0x7e9c7aeb, 0x177cd43e, 0x9196147b, 0x972c57e8, 0x7bc138d0, 0xd57d72cc, 0xf99ec241, 0xff73bd27, 0x1a7e0600, 0xf1487c5d, 
    0x0aa1367c, 0x3d81dad8, 0x115ec0ed, 0xf5a8f233, 0xea037862, 0xb2f66b6b, 0x103f6cf1, 0xcf6900ff, 0x86a5da88, 0x75af2de9, 0xdee02dc9, 0xb1880bbb, 
    0x673ce308, 0x7b7d3dcb, 0x003fd557, 0xf0c315fe, 0x4110c1df, 0x5caa032a, 0x55f2fe7e, 0xddb4ba94, 0x1500e080, 0x7a3d1d48, 0x94a1aff5, 0x6f586569, 
    0xd7a64367, 0xe6b3faea, 0x79466cd5, 0x569c788a, 0xe4697bef, 0xeed0f292, 0xe90a1ff4, 0x6d930efa, 0xc61e6a61, 0x040b5708, 0xe75e850d, 0xd473ea38, 
    0x00ffabf7, 0xf3df96d9, 0x00ff75f7, 0xd93d0d7f, 0x6e9a1cb7, 0x723abe5a, 0xb79493e7, 0x71aad067, 0xc947b28a, 0x48a30b3f, 0xe116713c, 0x1f2143cb, 
    0x00ffcff7, 0x6bbfb75e, 0xdff5f204, 0xf23fb10f, 0x73ad1fd7, 0xdda40f9f, 0x0726fbe3, 0xfc8f12a4, 0x75857f74, 0xafbdb5bf, 0x3abc4efc, 0xb0e5bf19, 
    0xe6eb3d3d, 0xb500ff6c, 0x7ff6c9a8, 0x2ad48f94, 0x5e3a2c4d, 0x3c72fb5f, 0xc07ac2cf, 0xa15b3cd1, 0x4886aeea, 0xb9a02fec, 0x24d51d75, 0x53f22356, 
    0xd2fe4b5f, 0x7eb71c9a, 0x4c5f6d32, 0x547ad716, 0x32c112ed, 0x449c21ed, 0x4836dfca, 0xabfc16fe, 0xdd366de6, 0x722beb0d, 0xf8514fbb, 0xcb5e537f, 
    0xab2eaf69, 0x9ec297f0, 0x60488a15, 0x5e594c8f, 0x49caa5e5, 0x878b1be6, 0x669b3e07, 0xafef8a41, 0x4dad5749, 0xf9f474c7, 0x1cc300ff, 0xeeb05cd5, 
    0x45bb8838, 0xbfe957ae, 0xab694be8, 0x99116343, 0x12cb3eae, 0xdf6cfe1d, 0x56c7f62e, 0x873da127, 0x7ff5e46a, 0xf8d824da, 0x3e0dd28e, 0x8ab656ea, 
    0x3299f35d, 0x05531890, 0x0e6219c7, 0xb2610040, 0xef78ad47, 0xea263e8e, 0x6c93eb7a, 0xd5cedac2, 0x0e5091e3, 0x7986e565, 0x838193e7, 0x2fe9e79e, 
    0x79053c83, 0xb2554bf1, 0xd68df4d0, 0x8b5cd297, 0x480aa789, 0x984f0282, 0x90c4e841, 0x728e03a4, 0xd58f037a, 0x96b6ccf2, 0x5dad9b06, 0xd36fdd7b, 
    0x368bfcc8, 0xa98ba5ce, 0x47af70ec, 0x91a7bfd7, 0xf8109eef, 0xe25bf195, 0xf0e0887f, 0xad0d83f7, 0xa651ceaa, 0x2f219eba, 0xdc6220d9, 0x70eeb893, 
    0x4e9eeb17, 0xfff63507, 0x0fcfc300, 0x1ae80c9f, 0xc7c53a74, 0x168887f6, 0xe8eed208, 0x4279d526, 0x6c07ec8d, 0x575c4fb6, 0xf033fc95, 0x07f08506, 
    0xc2ce9242, 0x7da53ee8, 0xd21c6d0c, 0xc865efb7, 0xe38e8201, 0x759c04e5, 0x9bbdda23, 0x5a4df8e1, 0xfff13e3f, 0x7ce47c00, 0x8371d8ad, 0x8cd6538f, 
    0xaa84225e, 0x7949d2a8, 0xd870341e, 0x257552b9, 0xb9f6c62b, 0xf6a7f8cf, 0x2fbcd085, 0x9a685ea8, 0x9ec44334, 0x6df78329, 0x70f99266, 0x12322ec3, 
    0x1c208859, 0x634f5076, 0xf657f98a, 0xfca4fd82, 0xf9cbe045, 0x52edf5ae, 0x37c7e3d2, 0x95164d76, 0x8825ede1, 0x6563d1b5, 0xc74e5d20, 0xbf1be425, 
    0x3f198776, 0x3a03c031, 0x73fcb47f, 0xb0fd327c, 0xd2f6243c, 0x89575a79, 0xd0585291, 0xcaf9fd85, 0x42aec707, 0x6b045ff3, 0xbf65726b, 0x6779beb9, 
    0x73b9b9bf, 0x6731f334, 0x1277dc67, 0xd6efc949, 0x9c554ab0, 0x5e457b27, 0x9d32cdeb, 0xe9206128, 0xda4a79a5, 0xef5f4df6, 0x43f68b3d, 0x00ff7df8, 
    0xff8d2709, 0x5167b500, 0xbb94b625, 0xba332ea3, 0xdfa79073, 0x7c1f3300, 0x5973dc57, 0x5e55a398, 0xfe935780, 0x6f00becc, 0x4e03f803, 0x5057d199, 
    0x99cd8fb8, 0xc059825b, 0xb40b7e24, 0x66bd067e, 0x0e5852eb, 0x169e98cb, 0xaff0fe1d, 0xf6d5c69e, 0xea4e9af5, 0x0dde1e3a, 0x5b92142a, 0xcd674abd, 
    0xc68f1c07, 0x7feacb8c, 0x425d8a3a, 0x41909016, 0xdb675a1f, 0xf71ff5a2, 0xb1dc79d5, 0xbfe3feec, 0x3fc8479e, 0x3f84af0f, 0x49e83411, 0x7433344c, 
    0x5e33f7eb, 0x4260fb97, 0x199eebd1, 0x03988f51, 0xf09aeb93, 0x338700ff, 0x0dc5274f, 0xa7b41435, 0x039698ca, 0xf9437e3b, 0xd67ebb57, 0xf1bf00ff, 
    0xcc3c8347, 0x59516984, 0x0c374087, 0xd0abf09a, 0x113af374, 0x00ff535d, 0x30d08fdb, 0xa289a3d5, 0xfcb52de7, 0x78c15939, 0x34d3451f, 0xaf352ec9, 
    0x87365d19, 0xd26e45a2, 0xed707041, 0x3b952a71, 0x480b2012, 0x847f2508, 0xaec1ef6e, 0x285ec63b, 0x21dec59b, 0xced696b9, 0xc26f382b, 0x2564a05d, 
    0x23a20ae4, 0x1b923ae6, 0x1f17ce98, 0x623ca7c2, 0xde247eb6, 0x2be6528d, 0xb1b5b14c, 0x1b8da395, 0x428d100d, 0x85b1bce5, 0x7e00bb24, 0xae3839a3, 
    0xae12c727, 0x5852f195, 0x4d1abc22, 0xc6aa71a4, 0x8e60b5cd, 0xb5e31633, 0xe482cb4f, 0xaff724fe, 0x87fcb2da, 0x8ed2960f, 0x93e6b23e, 0xdefcd1b2, 
    0xe6f8719f, 0xbc18c473, 0x61e1797d, 0x6537412b, 0xcee4976f, 0xd984c53f, 0x97863aeb, 0x20ee053c, 0x96aaec97, 0x30e832ec, 0x38d8da23, 0x2374147e, 
    0xbe02400c, 0xe127f8f0, 0xe3d93fbb, 0xc6f657e1, 0x00ff05b0, 0x0f457c8e, 0x02a7679b, 0x090aa3bd, 0x97586e6c, 0xb19c9c8c, 0xcfc7eb38, 0x19fc0f5f, 
    0xfc13cfe1, 0x1ac48b55, 0x12be3cb2, 0x67a4adf0, 0x4424d55d, 0x0877d716, 0x27bc1f83, 0x408e9160, 0xf296c0dc, 0x7335c9f8, 0xadc7f847, 0xa5f14f7c, 
    0x133589cf, 0xc4a4ad25, 0x0c4a379d, 0xd73a8d7c, 0x35825471, 0x6e1030e8, 0x92cd7c20, 0x71cec06b, 0x489d52cd, 0xfcd77fed, 0xca1bee8e, 0xc3c78d63, 
    0x77df510d, 0xfeae65a7, 0x8c7a687b, 0x3e8e5fba, 0xcbafcd30, 0x3d8b9be3, 0x3d2dea22, 0xd323d2e3, 0x5724ae6c, 0x35be4990, 0x1e09b9cb, 0x1ca38e37, 
    0xfeb2d77a, 0x88af7acf, 0xe355f861, 0x57c4683b, 0x2c86f75a, 0x6282160c, 0x14cb0ce5, 0xecc619bb, 0xfc1addec, 0xc0c141aa, 0xb599eb3d, 0x52fcb7f1, 
    0xf1964cb7, 0xe513a9fd, 0x1bbb0198, 0xfead0247, 0xb734fecb, 0xdde2e38e, 0x05dcddbd, 0x65a9b4ae, 0x12196608, 0x3fa1e300, 0x6bfd6e78, 0x21e3a8e4, 
    0xbb15b452, 0xd38ffcdd, 0xf0447931, 0x8f421cd8, 0x7b555e4e, 0xb757dedb, 0x837cae95, 0xfac43bf1, 0x9bf1a3a6, 0x7a6a73c3, 0xf0a4f687, 0x4bdddade, 
    0x2b28eb7a, 0x8aa52130, 0x31162333, 0xbdfec083, 0xf053176b, 0x3f3ed689, 0xfeace14b, 0x6f5afbef, 0x50f9183b, 0xedf8ce48, 0xa3748cc2, 0x1da376e3, 
    0x00ff8db7, 0x6c09cad1, 0x8aed92a3, 0x6f317263, 0x80ed4995, 0xbdd6e701, 0x081ec0bb, 0xf600ff8a, 0xb5a6f19e, 0xb46d3e2c, 0x0ed41549, 0x712d9454, 
    0xc6c1391a, 0xfde9063a, 0x582afaea, 0xb5274c9e, 0x7e7fb7b5, 0x9659e7c7, 0x09339c12, 0x652ea750, 0xb5dc9716, 0x03b1823e, 0xd982b34b, 0xe7b5fa4f, 
    0x539ca73e, 0xef79535b, 0x7b200852, 0xd40ea9ab, 0x63b11485, 0x676fa8f4, 0x1dc867c1, 0xfca6d7fa, 0xde4af013, 0xe2620d5b, 0x74754bdc, 0xc7d2c2e4, 
    0x1c8cc8bb, 0x131cb902, 0xe5ab3dea, 0x1a8e562a, 0x6db5b42a, 0x6db6bbe8, 0xdcc5c555, 0x17e1d7e2, 0xe7113588, 0x6cd696ca, 0xa4c9f2df, 0x0e7c0fe4, 
    0xa5f0bfb4, 0xedf9cf35, 0x7f00ff6b, 0xd457f80f, 0xdc5ef891, 0x3e060428, 0xbfd3d4af, 0xfeb618e1, 0x6aad7fec, 0xd1fe78b1, 0xa388273c, 0xfd73fcdc, 
    0xdbbeae9b, 0x99cd0ff1, 0x5d6d55d5, 0x8f3cf749, 0xffdd6be4, 0x3a8d6a00, 0x13bcd617, 0x6ec7dde7, 0xcc17aa0c, 0x7087f904, 0x0fe878f9, 0x0b5ee9a9, 
    0xd546bbf0, 0xf4f815be, 0xb421de68, 0x1974437b, 0x215795a1, 0x4172c6f6, 0xfd5e31ee, 0x11e954fb, 0x5ad6695f, 0x66f3c6ac, 0x80b71497, 0x53ae4659, 
    0xe5dc9662, 0xe8780188, 0xe0b0c732, 0xffa862d4, 0x2ad5c200, 0x03fed376, 0x63c0433f, 0x221ecb12, 0xff9d544f, 0x73f80f00, 0x3baf1be7, 0x9a35bec4, 
    0x108cd5ce, 0x33bb6599, 0x10e946c2, 0x632b92f9, 0x74ee57d9, 0xf57acf19, 0x2c7c040f, 0xa8b9f8b5, 0xfd5ae95a, 0xeea7d5ad, 0x21d4669d, 0xf12c478c, 
    0x6db02e29, 0x55cec739, 0xf8898ef3, 0x41788ed7, 0x4f734d9e, 0x6b5a2ed6, 0x25e2366d, 0x94886b8a, 0x2d6c1eef, 0xdaf57410, 0xdd0e5846, 0xe0d55eb1, 
    0x36ea104f, 0x65c5a21a, 0xf4fa2c7d, 0x75cdb411, 0x48e5cfa5, 0x16dc4eac, 0x6cf58f20, 0x8e1c873f, 0xd1bf5f73, 0x02461ca7, 0xe4fd6054, 0x5fe7c38f, 
    0xa5ed1597, 0x7e9a67b3, 0x13139fd0, 0xf025d75e, 0x59908ae6, 0x64d67af8, 0x54626ddd, 0xed8c6542, 0x301fc854, 0xc1915b40, 0x051c6676, 0x75824fc6, 
    0xad6dad48, 0xf2050bad, 0xfb0fb6d9, 0xc90f586a, 0xf4d785ab, 0x233d3c29, 0xcd4348da, 0xb9dee70e, 0x6c58e80a, 0x23380f60, 0x7604a1d7, 0x6708b4a9, 
    0x80b4bfbc, 0x4cf2c03b, 0xff850bb1, 0x7a6c9600, 0x2ebfd21f, 0xf49c30cc, 0xbabd4d65, 0x99c37d9f, 0x1af3cba3, 0xeb1ba578, 0xd2f4a9b7, 0xd150ebf8, 
    0x2c5856ac, 0x8e81b9a3, 0x0c9757d7, 0x743f070e, 0x4b33bde6, 0x1dfeccf8, 0x317f57f8, 0x563574d0, 0xa96b9eb3, 0xc6cd99e2, 0x20d88cc0, 0x66be05a0, 
    0x79b5e7c2, 0x750bc3d7, 0xdcb50ad2, 0x64aca8a9, 0x49017c67, 0xf7b963e0, 0xc7f15eaf, 0x7ea8e5ec, 0xb601ded0, 0xb65e175d, 0xe64366d0, 0x1df094a5, 
    0x65cb2797, 0xf2536754, 0x20195b82, 0x8a8373f0, 0x10b26cf8, 0xb7797975, 0xf3edfad2, 0x4ce2663f, 0x233c85c2, 0xcb7cb197, 0xd65eaf55, 0x029ffa4d, 
    0x8ad7dd25, 0xfbcb356e, 0xefc5b58c, 0x069ecdce, 0x610fe0e6, 0xfb0afac0, 0xa3a5e08b, 0x1fbde04f, 0xc5057057, 0xe66b9bee, 0x21c5523f, 0xfc4fc648, 
    0xd758be06, 0x87f8183e, 0xf588dfe0, 0xcff80e8f, 0xd4469749, 0xabd0c4f6, 0x2f9ee3e1, 0xc890f79b, 0x19cf7538, 0x06878e07, 0x7df898be, 0x3f9aeaab, 
    0xc30cdfc3, 0xc51d6565, 0x3d5c7a94, 0xe524244e, 0x308cedb8, 0x55ccaaaf, 0xd7b5c5fd, 0x70c5cfe4, 0xb49fca0d, 0xabaf67eb, 0x346c7d3b, 0x3831b316, 
    0xaff5840a, 0xf81bbeb0, 0xc133fb73, 0x29e442fa, 0x8e139136, 0xfa07e583, 0xdf37c2d7, 0x6df52d11, 0x97d6749a, 0xe9c89336, 0x708f871b, 0x82539d01, 
    0xb4afc83d, 0x6ffc313e, 0xf8043ed0, 0xb39a6a10, 0x6d118d6c, 0x66d0acac, 0xe102996b, 0xe3b91751, 0x6b72d027, 0xa751f1e7, 0x2debd219, 0x2aab3274, 
    0xd64e2fd5, 0x6f4f2c3d, 0xf89fbd8f, 0xbf7d1e05, 0x5f39feaf, 0xedb71a97, 0x579bf1f1, 0xcaee96bf, 0xd6c3135d, 0xb0611272, 0x68b8067b, 0x0be9b6d3, 
    0x0ac09f0c, 0x0d00ffa7, 0xfec3f1cd, 0xff0b1d86, 0x00ff0400, 0x1f7a9dfd, 0xdeeffebd, 0x54657f73, 0x5db532f3, 0xfc175f72, 0xe233f814, 0xeab3c07b, 
    0xdb5d5d33, 0xbc9fdc5c, 0xcf980c71, 0xb52bf2fd, 0x46f5b0fd, 0x6324bcd2, 0x6ef2a48d, 0x463831e1, 0xcad53fda, 0xa9e77932, 0x0f3fb9e2, 0x49e72e78, 
    0x3dbc93fd, 0x73c4cd0d, 0xf45ae95c, 0xe011af8c, 0x8c6f24c7, 0xad7fdf7f, 0x1bb6bf75, 0xa285f020, 0xda12b749, 0x0371c3ca, 0x18b011e7, 0x8dbe00ff, 
    0xcfe69219, 0x5f75adf0, 0xaa9c3da3, 0x894b8ea3, 0xfecdde84, 0xb4303e36, 0x1de13f95, 0x45356f9e, 0x2c7197dc, 0xa87c0e71, 0xff243942, 0xa942bc00, 
    0xb5e7c01d, 0xcfc09f7a, 0xe27d4911, 0x96b80d08, 0x5716b90b, 0x32ae6996, 0xd471410c, 0x8f823bf5, 0xd325afa0, 0xbcf09663, 0x0ef7ac4a, 0x386383a1, 
    0x1d080a39, 0x6b7de0ba, 0x6e47f8b7, 0xa7a997f7, 0x0ebdcb9b, 0x7b7b5747, 0x24f355db, 0xd99831dc, 0x874af731, 0x4fa10e3c, 0x97bb7ebd, 0x97ac71d5, 
    0x579a1f4b, 0xd2d0d15c, 0x9a66b9f8, 0xd69cedad, 0xacda5657, 0x1d4958b1, 0x0cb3c5d5, 0x9244fb86, 0x0c091946, 0x842822a5, 0x264fd511, 0xa61b7cb1, 
    0x1ba24bdc, 0xa8c90cfc, 0x076aac5b, 0x410e6b27, 0x72359ced, 0x75a9defa, 0xfd181fe3, 0x510cc99c, 0x396f5ba8, 0x549e767f, 0x3d76287f, 0x4f722049, 
    0xeff59a24, 0xbafd5a0d, 0xd2d6cae6, 0x9745da3d, 0x542ab9dd, 0x8276c54a, 0xa0cafb99, 0x2719cfb1, 0xe23cbfda, 0x928b621c, 0xfcbb898e, 0xfad9ea97, 
    0xabe5087f, 0x6a9a5b17, 0xaf5e56f6, 0xdf95e877, 0xdfa9adad, 0x6cf17e78, 0x045c8565, 0x9efad95d, 0x7ffa9a33, 0x048aefe0, 0xacc65ab0, 0x07c65455, 
    0xf95ac7cd, 0x90f32189, 0xd257c684, 0xafe11fbd, 0xf6840d88, 0x95f938f0, 0xfc710e90, 0xc329bf42, 0x549d7de2, 0xcffdd0db, 0x13c3c03f, 0x54ab7c86, 
    0x69fb277d, 0xf8b622fc, 0xeb31fbc7, 0xaf4230f7, 0xdb0d4fe2, 0x5ca5b13e, 0x98e2fd20, 0x03b174d7, 0x18c66bd7, 0xed29d463, 0xabe1035e, 0x21bcd364, 
    0x26b9c4a2, 0x6913183b, 0x63d488ed, 0x3eb7aff4, 0xfad66a1b, 0xb8218aee, 0x17299655, 0xe43696cb, 0x08829132, 0x34bf22f4, 0xdeea233e, 0xe357f837, 
    0x1669146f, 0xaedf91f7, 0xb8357f9b, 0xe58bbab5, 0xdb941808, 0x542a408e, 0x9f7ead8f, 0x2aa54e8a, 0xd5df8613, 0xd7f953bf, 0x754ecd0f, 0x3f5df760, 
    0x5bfad03f, 0x3bc31fe0, 0x317e880f, 0x70d4549f, 0x42f3e8b0, 0xfd0040d1, 0x092c99e4, 0xc56b1bf6, 0xef6c00ff, 0x3ebef688, 0x9ef6c8f8, 0xf8a49967, 
    0x218a1676, 0x9f9887bb, 0xe3f5809d, 0xae017d6e, 0xc64fe1df, 0xbfe1332d, 0x8a7f8bc2, 0xa62b237e, 0x7756776a, 0x30e8f056, 0xe99a67b1, 0x3a80a258, 
    0xe0c9f59c, 0x5b255f03, 0x9b785e5f, 0xfe425d52, 0x7fa1fd21, 0xb8154b33, 0x73dc39f7, 0xd73c7fd8, 0x5ba552c8, 0x52a98d17, 0xf9da442b, 0xe873a7ed, 
    0x47a592f0, 0x9276addf, 0xffbb5e56, 0x9b665e00, 0xfead6a45, 0x79ce4394, 0x0fe4b16d, 0x51babd6e, 0xeffe4cb3, 0x00ff41fe, 0xe219d7eb, 0x7aea108f, 
    0xae3db57e, 0xda46249d, 0x0224931f, 0x9aa70e4b, 0x8400ffca, 0xdf3fc4b3, 0x15f9fe87, 0x04090bf6, 0x4fe589b5, 0xedcca930, 0xab0f3d2d, 0x382b673f, 
    0xdbd8bf75, 0xb11777c5, 0xd7b7e689, 0x899d5862, 0x0cdd0fca, 0xd7e8fb0f, 0xdc7afb2d, 0x0c9eb648, 0x3a113180, 0x57fa2bb9, 0xff2efb5f, 0xf896c900, 
    0xd1c3fecf, 0x2b3800ff, 0xfebdfd8c, 0xdc7f82ef, 0x985ce77f, 0x611ff99f, 0xcce41f7d, 0x26f21f30, 0xcdaffac4, 0x76e83f1f, 0x30432b51, 0x6dad4804, 
    0xdc3a0e82, 0x01f47f2e, 0xd6de9af9, 0xb3a109f5, 0xdbe2d7ba, 0x8b1ca70e, 0xa8b11c6f, 0xc885895d, 0x7d9efa18, 0xbfe864cd, 0x00ffa3ea, 0x00ffd77a, 
    0xbdee2a4a, 0x6d2200ff, 0x2f7dfdef, 0x56fd5af2, 0xf8e8421a, 0xaf4c7c19, 0x4f6bf8a3, 0xab613cd3, 0x0b27c022, 0x7fa6ca70, 0xf1e0a89c, 0x59a7d7f9, 
    0x29603adc, 0xc70050c0, 0xffa1e16a, 0x58d79100, 0x96af00ff, 0xa55d4bfe, 0xbfca5faf, 0x965bcf0d, 0xface7c2e, 0x83d7fab3, 0x94a3f470, 0xbb8a92d0, 
    0xeb6c7e57, 0xdd773a7c, 0x965df30c, 0xa2ae128b, 0xf00e068c, 0x1bd7f873, 0xfaf8bfe1, 0xff68da15, 0x9ffef100, 0x2be60fef, 0x44fc67e1, 0xd7650e7d, 
    0xe0fbfad0, 0x8388c4d5, 0x7ac7780c, 0xbcf683f9, 0xf6cf8ab5, 0xb4fcd49b, 0xecd3bd18, 0x431e9ca7, 0xfc99c23e, 0xfa2a7f91, 0xfaefe06f, 0xbee6fbbf, 
    0xbfb1fd69, 0xffe4e6e4, 0x974db000, 0xaf5fcdfe, 0x5f2ed752, 0x9ff943d7, 0x64cc9210, 0xf4890778, 0x26d276fb, 0xaec4489e, 0xbc697992, 0x27e32ae4, 
    0x5471b603, 0xd7a23c7c, 0xd7265ec3, 0xadd4e6d7, 0x8f1409e0, 0xa02345c8, 0xc45fab1d, 0xdc2ff2df, 0xc0d700ff, 0x74b246fe, 0x9e26f98f, 0xae00ff2d, 
    0xcaabfc69, 0x1b959bc8, 0x71d1e7be, 0x94ac5002, 0x6f385674, 0xc72a7805, 0xf627fac5, 0xcb2da196, 0x062b495d, 0x1eb4c931, 0xbdf59efe, 0x8f0a00ff, 
    0x9e00ff44, 0xfbf7bf97, 0x4bad00ff, 0x44fe8bf0, 0xabebbfe8, 0xed4a00ff, 0xd41be96b, 0xff7ff4f8, 0x000000d9, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(VibranceNode, "Vibrance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
