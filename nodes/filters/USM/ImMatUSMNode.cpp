#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "USM_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct USMNode final : Node
{
    BP_NODE_WITH_NAME(USMNode, "USM Sharpen", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Enhance")
    USMNode(BP* blueprint): Node(blueprint) { m_Name = "USM Sharpen"; m_HasCustomLayout = true; m_Skippable = true; }
    ~USMNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_SigmaIn.IsLinked()) m_sigma = context.GetPinValue<float>(m_SigmaIn);
        if (m_ThresholdIn.IsLinked()) m_threshold = context.GetPinValue<float>(m_ThresholdIn);
        if (m_AmountIn.IsLinked()) m_amount = context.GetPinValue<float>(m_AmountIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::USM_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_sigma, m_amount, m_threshold);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_SigmaIn.m_ID) m_SigmaIn.SetValue(m_sigma);
        if (receiver.m_ID == m_ThresholdIn.m_ID) m_ThresholdIn.SetValue(m_threshold);
        if (receiver.m_ID == m_AmountIn.m_ID) m_AmountIn.SetValue(m_amount);
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        float _sigma = m_sigma;
        float _amount = m_amount;
        float _threshold = m_threshold;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_SigmaIn.IsLinked());
        ImGui::SliderFloat("Sigma##USM", &_sigma, 0, 10.f, "%.1f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_sigma##USM")) { _sigma = 3; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_sigma##USM", key, ImGui::ImCurveEdit::DIM_X, m_SigmaIn.IsLinked(), "sigma##USM@" + std::to_string(m_ID), 0.f, 10.f, 3.f, m_SigmaIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled || m_AmountIn.IsLinked());
        ImGui::SliderFloat("Amount##USM", &_amount, 0, 3.f, "%.1f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_amount##USM")) { _amount = 1.5f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_amount##USM", key, ImGui::ImCurveEdit::DIM_X, m_AmountIn.IsLinked(), "amount##USM@" + std::to_string(m_ID), 0.f, 3.f, 1.5f, m_AmountIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled || m_ThresholdIn.IsLinked());
        ImGui::SliderFloat("Threshold##USM", &_threshold, 0, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_threshold##USM")) { _threshold = 1.0f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_threshold##USM", key, ImGui::ImCurveEdit::DIM_X, m_ThresholdIn.IsLinked(), "threshold##USM@" + std::to_string(m_ID), 0.f, 1.f, 1.f, m_ThresholdIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (m_sigma != _sigma) { m_sigma = _sigma; changed = true; }
        if (m_amount != _amount) { m_amount = _amount; changed = true; }
        if (m_threshold != _threshold) { m_threshold = _threshold; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("sigma"))
        {
            auto& val = value["sigma"];
            if (val.is_number()) 
                m_sigma = val.get<imgui_json::number>();
        }
        if (value.contains("threshold"))
        {
            auto& val = value["threshold"];
            if (val.is_number()) 
                m_threshold = val.get<imgui_json::number>();
        }
        if (value.contains("amount"))
        {
            auto& val = value["amount"];
            if (val.is_number()) 
                m_amount = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["sigma"] = imgui_json::number(m_sigma);
        value["threshold"] = imgui_json::number(m_threshold);
        value["amount"] = imgui_json::number(m_amount);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue919"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_SigmaIn = { this, "Sigma"};
    FloatPin  m_ThresholdIn = { this, "Threshold"};
    FloatPin  m_AmountIn = { this, "Amount"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[5] = { &m_Enter, &m_MatIn, &m_SigmaIn, &m_AmountIn, &m_ThresholdIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_sigma       {3.f};
    float m_threshold   {1.f};
    float m_amount      {1.5f};
    ImGui::USM_vulkan * m_filter {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 7622;
    const unsigned int logo_data[7624/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x7d3a1d3b, 0x8c047262, 0x592ca7d1, 0x2b8ee3bb, 
    0xfb6bbfc1, 0x3e8a3fe3, 0x1980bb1e, 0x1c4021a4, 0x7a25de0f, 0x6cfc88a7, 0x8566e387, 0x9d4eeff0, 0x3a1d8e24, 0x5842fd7b, 0xe0830524, 0x4a064204, 
    0xdb734b9e, 0xb6bfe315, 0x6ff6c7bd, 0x791a7e89, 0x829b5c61, 0xe7a31e84, 0xe6f8158f, 0x60629d1b, 0xf476baf6, 0x9c6d3fb3, 0xfd37c97d, 0x68f8626a, 
    0xe236ad91, 0x64042876, 0x6b5e8fe4, 0x4899b7bc, 0xfc2b8750, 0xaff3e73f, 0xe7fdf03a, 0xcfcca895, 0x9c2be616, 0x313dcea1, 0x6c7a77c5, 0xf92a73ab, 
    0x60b44dde, 0x7c5c7916, 0x9c808eb1, 0xb703e79e, 0xbfd35d51, 0x45d39935, 0x58235b2e, 0xc56d79ce, 0x5a0fea38, 0x1da31eab, 0xae1091c4, 0xc7394032, 
    0x97e9d23c, 0xa47777b6, 0x123e4f8b, 0x895b6215, 0xcc4fdc79, 0xc601507e, 0x3f7b0546, 0xc32f9dc3, 0x8dd2245e, 0x404ff8bb, 0x9b6ecbb8, 0x727c7aed, 
    0x24b9e7ca, 0x5ec77982, 0xe9bb62dc, 0x375a2760, 0xf9fa4b52, 0x3433461e, 0x505785a7, 0xfea2b772, 0xeec503bf, 0xa06d5688, 0x61cff38c, 0xacf3079e, 
    0x6d6f160f, 0x3f31ed2f, 0xb4003c95, 0x00c3396e, 0x7d9d3f48, 0xd9efe317, 0xd1ba4fb7, 0x878f75ee, 0xb33eba8a, 0x4b931469, 0x96a699e1, 0x55496d7b, 
    0x3b279f77, 0xca538ae4, 0x3864a8aa, 0x6b72b451, 0x6b133fe6, 0x7dc93637, 0x33366aa6, 0x90ddda68, 0x5ea47d2b, 0xd8ed49a1, 0x18c52aa9, 0xf3eb0807, 
    0x941b6521, 0x6a6a8e83, 0x5a616ae1, 0x5f5fbc76, 0x3f26bcd0, 0x7ed3980b, 0x74cbfbc9, 0x0bfa68f4, 0xf03f17c3, 0x495bf890, 0xfd936ed4, 0x4890ad25, 
    0xc6098e55, 0xaed3fa73, 0x68d2e6d6, 0x3067d367, 0xb348db5d, 0xed0c23c1, 0xf82b4891, 0xe1275764, 0xf04ad709, 0xb9a8911e, 0x046d6adb, 0x54e11693, 
    0x0fd0937a, 0xd4bcd17a, 0x34dcee1e, 0x88943544, 0x672c43b2, 0xe440ea2a, 0x2b7d841e, 0xce15afca, 0xd6b9b6e4, 0x43333ba9, 0xe2d0a8f6, 0xbc8557f1, 
    0x45f3f12b, 0x69dfec8b, 0xc50f1d8e, 0xe6edb936, 0x4195e118, 0xd939c6fb, 0x956424a3, 0xaf454f91, 0x43bcd619, 0xc103f8a4, 0xbc8ca7ba, 0x87066e46, 
    0x2244b2a7, 0x5dd350b4, 0x5c3e385c, 0xe0dcfd2b, 0x00c0cd92, 0xe80738f5, 0x387e840f, 0xc11ffed2, 0x693ce8e2, 0x35fc9a25, 0x86f934d5, 0x2aa5fdaf, 
    0x14b26e45, 0xc8bdab2a, 0x88b9cc4c, 0x8ab96129, 0xa8fc9a63, 0x248d97f1, 0x5be281f8, 0xcd4d69ad, 0x23698fb6, 0x9769a1c3, 0xf6e91c6e, 0xb974bf01, 
    0xb7db16e0, 0x6ce6e373, 0x38f4f59e, 0xe0d7372c, 0x498bdea6, 0xa7f8ef7a, 0x5f299ff9, 0xe594fd17, 0x5abb8a86, 0xbeb3f4c1, 0x5b7a74fd, 0x9a75ecaa, 
    0xf123ed9f, 0x6ed4568b, 0x1d6f346f, 0xd308de6b, 0x1d9e9167, 0xa49ac313, 0xea96b6d6, 0x20a9404f, 0xd9aededc, 0x05e8f724, 0x0f68f86f, 0x59f4bf8e, 
    0x00ff79bc, 0xffd70585, 0x63ae1d00, 0xe36df842, 0xcbda1a0f, 0x0c7e68a8, 0xad884ff1, 0xb714ad84, 0x2d8f361a, 0x304a71e4, 0x0475275a, 0x54820007, 
    0x5a0f03f2, 0x8500ffd2, 0xfe2bf111, 0x1fc46789, 0x3f2e26fc, 0xc5fa9af8, 0xb15c304e, 0x3ef4b28a, 0x3665554a, 0xdf3629e5, 0xc027f5a9, 0x9f8bcb0b, 
    0xd7eab18e, 0x54e706b7, 0x96b9b4be, 0xc81ce7e6, 0x803f07e7, 0x5a01fac0, 0x8d20b7df, 0xd3f0613c, 0x39370379, 0xfb334e0a, 0x427e1cc4, 0x8209fcaa, 
    0x4c6ff103, 0xf68154f2, 0xfd53c739, 0xbcfdd4da, 0x174f21ad, 0x77f92e7c, 0x39d87013, 0x3ff27e3c, 0x94ceaff1, 0x65a3d797, 0xdb00ffb2, 0xd2b2fa59, 
    0x5fd79b9d, 0xd28c33cd, 0xb8b3a16f, 0xd6699eb8, 0xcc426338, 0x09008ce7, 0xdea9b935, 0xcdaa79cd, 0x77e9dea0, 0x88f67c1a, 0x954bb824, 0x05e7e828, 
    0xbabaaf54, 0xdd5ce337, 0xdaea92bd, 0x9f8e9695, 0xed6fd521, 0x78ccb074, 0x229d681f, 0xc3719e24, 0xa1c7c1f5, 0xadfd6faf, 0xa7733b7c, 0x2d7ed3fe, 
    0xe42be3d4, 0x795a52ea, 0x2c3dbb4b, 0x83db5320, 0x6bea96fb, 0xdf246d67, 0xd5aa1191, 0x548fd048, 0x4b13fde4, 0x8b3432f1, 0xc9222d6b, 0xee4e4db5, 
    0xb90bda34, 0x2286c876, 0xe3008f3d, 0x6b928c81, 0xe80c7edc, 0x4d86a97a, 0xc25ff562, 0x3ee655da, 0x2ff76fcf, 0xc10d8ce7, 0x00ff3692, 0x8681ad52, 
    0x2a19b17c, 0x933cc4bf, 0x6f247ac2, 0x7c7f697d, 0xa7ab5ba6, 0x814a4f4d, 0xc613091b, 0xf4f284c1, 0x14d2ce39, 0x2b37bf12, 0x27daeee9, 0x5655df8a, 
    0xaf1983d4, 0xcccd0d51, 0x4c5ca0b2, 0x1848081f, 0xa3f03c18, 0x187ba5d3, 0xd8db686b, 0x7e3eb3f0, 0xae4f674f, 0xf368b3e7, 0x1c43d9db, 0xa3433056, 
    0x36cde7c2, 0x24cfc8f1, 0xcc2c47ec, 0x6700b7dc, 0x5ef37cbf, 0xfe54fb4f, 0xed675acd, 0x7cb9e105, 0xf5256143, 0x077dc487, 0x478bb849, 0x38924d93, 
    0x5688b5bf, 0x821b0b92, 0x3b3f06e3, 0xbe523918, 0x1337f263, 0x88675a5b, 0xc9ebd21e, 0x12b964b8, 0x91b2ca65, 0xe300f0b8, 0x0f6eeb1d, 0xabe1c91f, 
    0x569e2469, 0xc83c4977, 0x10c128d6, 0xe755c929, 0xf6dfc619, 0x5f931c8f, 0x3aa54e5b, 0xa37a96ab, 0xafd2f9f3, 0xa5b59f86, 0xfddfd774, 0x9fca877e, 
    0x2f1b750d, 0xb6cefe17, 0xb2429177, 0x7a785dda, 0x64bbf16d, 0x53072b64, 0x7e6008ee, 0xf01fe695, 0x1b8ffb4f, 0x4df865fc, 0x3fede17b, 0xa4da97c2, 
    0x86761a5e, 0x48775bd7, 0xcecf256d, 0x40ae4c2d, 0x76602832, 0xa5ac70ae, 0xec2708b0, 0x1a822f6b, 0xeaabbd06, 0x6972f64c, 0x2dd509be, 0xb4d4b927, 
    0x2d63b875, 0x8fc4f5c5, 0x97cdc725, 0x304f8a65, 0x2a45b693, 0x01b4db49, 0x5de0935e, 0x065fc233, 0xefe03b7c, 0xb319fe87, 0xb4f0c1fe, 0x695a7297, 
    0x6e79709a, 0x9e465a0e, 0xce48d250, 0xe01cf3f8, 0x3a20fe96, 0x0d6b3e0e, 0xb54a4696, 0x72914e3c, 0x656fad5c, 0xb7b76ed7, 0x99f1eb53, 0x353ae1ec, 
    0xe5f28a30, 0xa9a6cb7c, 0x6eb9ea69, 0xd9fe4b7e, 0x7cee12df, 0xfc14f155, 0x9d5b5b33, 0x5df04037, 0x09428dd3, 0xd5bc4781, 0x23a45530, 0xcaa03138, 
    0xa572c046, 0x31481cd8, 0xfe03dfe6, 0x1b3f6a10, 0x9a0e7b7c, 0x6d746d8e, 0xb5f64531, 0xbc6124a8, 0xe2887398, 0xedc8d051, 0xcef522f2, 0x6924a05b, 
    0x103fda7e, 0x6abf8f07, 0xd85a8b6f, 0x5f9fe11b, 0xa6605c3a, 0x8b66ebc2, 0xe319a76a, 0x04a72e22, 0xdf0e24e7, 0x7fcf7e6f, 0x25f8e106, 0x43dbb6f0, 
    0x453c309a, 0x6d00ff72, 0x638e67d6, 0xe55e7224, 0x00ce04b6, 0x9c60e258, 0x3916cb28, 0x5aaf8661, 0x3c0a987c, 0x7e6dbab4, 0xeef5abaf, 0x5cddf478, 
    0x5babbbca, 0x4bf4afae, 0x8fbc4dcb, 0x9bcef041, 0x06bde061, 0xaed245cb, 0x580f1f75, 0xb4c8265a, 0xa2e126ed, 0xc7922c8a, 0xb9375271, 0x92739624, 
    0x4f6b9ec4, 0x00ff58fb, 0x4fe2c9d0, 0xfe4b18fc, 0x4a238f35, 0xcf2d31d2, 0xebcf6f7a, 0x4638295f, 0xbb927272, 0x9595be67, 0x9f0ffc92, 0xc75b05be, 
    0x0448c507, 0x69f60f83, 0xa623670c, 0xfd5d45de, 0x6f5d01bf, 0x909f3be1, 0xff38687f, 0xace2c700, 0x20d7846f, 0x48d06dfc, 0xbbb3e627, 0xc80f1d07, 
    0x0afe7f2b, 0x5f751e09, 0x1f381985, 0x1f078cda, 0x15fec7ed, 0xeb2f46e6, 0x4cfef9b1, 0xb5929afa, 0xfd6f9724, 0x96877eb9, 0xe101e2c3, 0xf141631d, 
    0x51d7c243, 0xb05a7f78, 0x078566d6, 0xd4b5152f, 0xf01f3873, 0xc7fa6a14, 0xd7b7b5f6, 0x63886f75, 0x742cd152, 0x9e4153ad, 0xd4b116ea, 0x66d94812, 
    0x3a3a5a9c, 0x002a99b4, 0x1ee4200b, 0x57a40e54, 0x9435dacc, 0x0b57ea13, 0x4220df3e, 0x865c56f9, 0x6c1f8c27, 0xaff63916, 0x6d8cf053, 0x024fc03f, 
    0x4f4d39fc, 0x34d3b74f, 0xa2267111, 0xf7f66ad7, 0xddbd5c51, 0xe4f3abdc, 0x983ba60d, 0xe6e75c7e, 0x70e94acf, 0xbd184785, 0x7bbeeee2, 0x38a7d498, 
    0x1b268e54, 0x3ffa955b, 0x8000ff7a, 0xd9d9adf1, 0xfaec3d5a, 0x54ba6993, 0xea9e0952, 0xa27d11fb, 0x2bad1d6c, 0x80efba1f, 0x192f7a15, 0xf128aff4, 
    0xbf55ed27, 0x1a443ac7, 0x9a7ea316, 0x9fe78d45, 0xbe77cba8, 0x21ec390d, 0xc0e924db, 0x806c0869, 0x7397ed02, 0x2b7039af, 0xfc29bec5, 0x7dbcd770, 
    0xf069dd2b, 0xba68627f, 0x7097d644, 0xd72e3158, 0x3b54990d, 0x3bcbf916, 0x4e8c5d6c, 0x9c715806, 0x00ffc03b, 0x34beae0e, 0x83771aeb, 0x69e73ffc, 
    0x97baf49a, 0x2ab784f6, 0xc5c29619, 0x61b44fda, 0xb2c0c4c1, 0xc338ea40, 0x6268e716, 0x7060a09f, 0x7590f054, 0xda7a2f6b, 0x5397a7df, 0xa4f931e2, 
    0x38f612b1, 0xadfa7457, 0xbe54a7df, 0x0bfac4ef, 0x6fc5efe1, 0xfc157f8f, 0xfe811767, 0x7a69dc1e, 0x1ce93764, 0x6bcf5ff2, 0x4d9ae40d, 0x6fc28594, 
    0x7929cb94, 0x2edf4794, 0x0c4adc48, 0xe0c57db5, 0xe0c50f9f, 0xcfc2264d, 0x776dbe59, 0x56042bc6, 0x63aa86da, 0xaadc92d8, 0x47d591a8, 0x2d20dddd, 
    0xf5a06fd7, 0x1f86dff3, 0xfb2ffc09, 0x5a17e838, 0x2935841f, 0x667db52e, 0x3b4bdec2, 0xdb4799eb, 0x2af1832e, 0xca5d99c6, 0x1c3b5104, 0x9e335d72, 
    0x006ff500, 0x92306d68, 0x9a74635d, 0x291a2a91, 0x307d0c46, 0x726277e4, 0x8ae3f579, 0x326a558c, 0x244da3aa, 0x76bde8b4, 0xc5d2f83c, 0x9d726e3a, 
    0x3efdaad6, 0xfe716aeb, 0x7ca4fd26, 0x121fe131, 0xc247785e, 0x27e247f6, 0x16767bc4, 0x5d9069d2, 0xcec69a7d, 0x4dde80e0, 0x43e5f3cd, 0x46360eed, 
    0xad5dee1c, 0xe66b90b4, 0xf653da6f, 0xc2d7f186, 0xa843134f, 0x3ac4c7f8, 0x09c6d76d, 0xb42dd9b4, 0x51f8043f, 0xc22f3d9a, 0x2a134991, 0xeebbde5f, 
    0x24908b6b, 0x6d9c2826, 0x1f98f904, 0xed9f3d20, 0x841fa511, 0x5f52f03f, 0xbbaa3a84, 0xc77ff8db, 0xb56700ff, 0x8285b5bd, 0xf6ddbf06, 0xfe689b75, 
    0x776ccd30, 0x3c47f863, 0x7689f971, 0xba6850f7, 0x9baba3a6, 0xfa66ad9b, 0x797951f6, 0x49f3ec74, 0x6765f22e, 0x67b32466, 0x93e44976, 0x9b55cd93, 
    0x4f177d51, 0x654ebd3b, 0x915cd208, 0xe46bbb5a, 0x00ffd2d5, 0x607fdf33, 0xc46386af, 0xc45b14df, 0x5872ac53, 0x2d114678, 0x7dc075b0, 0x13c24d42, 
    0xab08e28f, 0x081dc724, 0x17dfd74c, 0x92c291d0, 0xc989f747, 0xb2dfe435, 0x7e39c38f, 0xd021fc16, 0x5de26825, 0x7313ee6e, 0xa9841c79, 0x76006e69, 
    0x5ea4d007, 0x3ddc7342, 0xb7de857a, 0x3af9b315, 0x32d6b485, 0xcce3042f, 0x7d64fa5c, 0x55f1e72b, 0x9356ad3d, 0x997f5aba, 0xa55261ef, 0xd7754549, 
    0x2644f4fa, 0xf6465267, 0x8fc6604f, 0x00ff49b4, 0xfafe5f3d, 0xd6b70435, 0x365ec8d3, 0x378c4347, 0xa6780698, 0x441fa6fd, 0x82bf00ff, 0xcf1e6db8, 
    0x2e2f3bee, 0x13fc979f, 0x1a85bfe6, 0xefc7af9b, 0x91b75808, 0xe25b6bb2, 0x88ecfd4a, 0x57f97143, 0x41c17fa1, 0x677d65ac, 0xa26024e1, 0x5b1eaa93, 
    0xe095c8d4, 0x6faf027f, 0xf0a2f65b, 0xdcbb5354, 0x2550d762, 0x79949fb6, 0x743bce2d, 0xa0aff103, 0x9ed96fbf, 0xd9e0776d, 0x9a243166, 0x84d3c6f2, 
    0xc57cb10d, 0xf70007e7, 0x15672438, 0x184e3ac9, 0xd36e49da, 0x50f451fd, 0xe7536a9c, 0xeebe6a7b, 0x159e7056, 0x67f80f5f, 0xfed7bb5c, 0xe12d6a25, 
    0x5a5a051f, 0x935ad6b4, 0xa5bab4ba, 0xf9136fe4, 0x33a0f636, 0xd955c4dc, 0xa176bf19, 0xacfc37ce, 0x32bec42b, 0xe3fbcef8, 0x2db58d97, 0xdf120d62, 
    0xc7117f48, 0x0c6faf16, 0xbcd2b4b0, 0x14d9aa10, 0x19f7789a, 0xec6e9907, 0xb5f11123, 0x45cab718, 0x1b00ff74, 0x1ac683a4, 0x347b41db, 0xeaa16bcd, 
    0x62763617, 0x96b62ce8, 0x5ba4b0f6, 0x64c316e4, 0x40e29e45, 0xccc748ac, 0x05b68b9b, 0xa6199f73, 0xeddff0b2, 0xe9a67d5d, 0x53f8bafa, 0x288eb749, 
    0x0841666d, 0x6bb7b6b2, 0x512c2b31, 0xd38011b0, 0x0d8c93b3, 0x13efe7ee, 0xb260a65f, 0x186d398a, 0x69aeeae2, 0xfcec543e, 0xfbdaf4ae, 0x79e7e75a, 
    0x175f6b96, 0xed22745e, 0xb695dd14, 0xb1f6bee9, 0x67113fe6, 0x573cd2b7, 0x530b4de2, 0x69dd32b1, 0x114943f7, 0xbdbfc8d9, 0xc0aa84b6, 0x02d626c9, 
    0xce452260, 0xca480ad2, 0xbfe8d702, 0xe100ffec, 0xdf657f08, 0x9eea5184, 0x0f358122, 0xb73fbe8b, 0xa9a5692f, 0x87556557, 0x018e3c62, 0x4a89b664, 
    0x97cd6dee, 0x15a81362, 0x7c8197f3, 0x1c1fe001, 0xfcd37cfc, 0x3dc3ac41, 0x00ffc3c7, 0x2710e900, 0x3c557c8c, 0x6600ff71, 0x30841aeb, 0x7f976e0c, 
    0x21cdb296, 0x2e49ab31, 0x3bcb1fe9, 0xd7033343, 0xc9f8287c, 0xf16d7cae, 0x21fe889f, 0x0a49b16b, 0x42bbcbde, 0xf6429ad2, 0x91802dfa, 0x714b5ba2, 
    0x224655b5, 0xbb8aec5d, 0xb8616ed8, 0x62998bd7, 0x7f5409ed, 0x7a8b7f0b, 0xeeefca7d, 0x7c323bf3, 0xb8187104, 0xaebd9bd1, 0xd72dbbdd, 0xb3b47d75, 
    0xadf5efdc, 0xc66fe227, 0xa171fce8, 0xc28b567c, 0x68f3341a, 0xb7e14172, 0xdb9b74d1, 0x9c946b84, 0x3bab0249, 0xd5064332, 0x852c4195, 0x1e20c43c, 
    0xd97ff641, 0xbac4e79e, 0x19efc037, 0xd4b784d9, 0x3de05b3c, 0xe8f46d0d, 0x6e49cbee, 0xcadb11d7, 0xed0e99d0, 0x94f84ede, 0x21184205, 0xd48c1c00, 
    0x3f9ef892, 0xe4af46f8, 0x7b6d34fb, 0x7779036f, 0xbb7d0105, 0x59feea7e, 0xf6236bfc, 0x89d5f173, 0x58327ed4, 0x696c00ff, 0xe177cbd3, 0x686bbbb7, 
    0x49a5952e, 0x8c526451, 0x99c7e199, 0x40823a82, 0x9e16aff4, 0x55a40e22, 0x46b7ebbb, 0x2f23767d, 0x68251c95, 0xa3a2ecc5, 0x46efedad, 0x5f6bd3f6, 
    0x3e874f7d, 0x59d37830, 0x1f68bfd1, 0xbe9a7786, 0xae8a37af, 0x2fad756c, 0xafd7ba57, 0x2359b8a1, 0xee8956bd, 0x99e42ded, 0x8db5c7bc, 0xb9b011f0, 
    0x294fc6f7, 0x8b873fe3, 0x1fdb7fe2, 0xee76f85b, 0x185fb223, 0x627609ea, 0xeb76f703, 0x05d72c75, 0x587e1b41, 0xf0630093, 0xb6bf5bed, 0x7c13f485, 
    0xf4d2b347, 0xf06648f6, 0xa7268bfe, 0xf3eddb2b, 0x1b667912, 0xb0caf155, 0x79868d55, 0x6b700cc3, 0xfc0e5fe8, 0x3f2ed332, 0x1b7fa0e0, 0x2b824e7c, 
    0x2dc53edd, 0x80532b75, 0x766ad2ea, 0x5fe55cf1, 0x57194aa6, 0x328ea18e, 0x3a9d5e33, 0x525718ea, 0x79d9ddd6, 0x9f3b3fbd, 0x42c38e2b, 0x9c42e718, 
    0x5d6992b9, 0x6b7500ff, 0x8f7ccddb, 0x16b8bd70, 0xb6c1b68e, 0x91cdf298, 0x2bee98d1, 0x851f67f8, 0x80f85f63, 0xad157dc3, 0x96daa4ad, 0x5dde70a7, 
    0x97118cb5, 0xc0199b69, 0xca8fd751, 0xb4ec4e8d, 0x32ce4eb2, 0xd493cd72, 0x1fbde6fa, 0x50f07ff6, 0x8b07d2ba, 0xda842d2f, 0xe670a9ae, 0xb7984bc2, 
    0x09d53e0d, 0x7ce4f140, 0xbc13e4ac, 0x38401b75, 0x48959aaf, 0x4faba2e1, 0x7babdbba, 0x9a64951d, 0xf8173877, 0x701de303, 0xf4c8bb8b, 0x1c67166d, 
    0xf377cb59, 0x6d37eaa0, 0xa6e70152, 0xcdf0bf69, 0x00ff265e, 0xff878ea0, 0xff4d8100, 0xd557c400, 0xb770d8bf, 0xee56b22f, 0x7d2eb9f3, 0x36d81fcd, 
    0xffb6dcdf, 0xf88fbe00, 0x1b6b7dd5, 0xeb8e27da, 0xe4e7be52, 0xac5dec9f, 0x40fba536, 0x73cd5c5b, 0x91164b1c, 0x2bdc2f34, 0xb0bddc31, 0xd7fb140e, 
    0xb600ffd0, 0x756d95e6, 0xb714fca9, 0x34add4bc, 0x41dcfee5, 0x1112bb19, 0x0154e270, 0x834a403e, 0x03389793, 0xfd62bed6, 0x7ffd349e, 0xe1c657e0, 
    0x681b4fe1, 0xabcf69b3, 0x78d696ef, 0x1d731490, 0xc0ea92bb, 0x8e57eafc, 0xd3d7e438, 0x8657b77f, 0x183ec4d7, 0xe7acf6f0, 0xb5e12b5a, 0xd040d5bc, 
    0xe29de2ac, 0x59c2fc31, 0x8a4457de, 0x37f0b431, 0x904272bb, 0xa9155d8d, 0xa7d399a5, 0x3fe03f6d, 0xa63ef2d7, 0x8bfd2786, 0xd75c75db, 0xb5e6775f, 
    0xde86493e, 0x185f885f, 0x36ddf42e, 0x2bebec5f, 0x00ff46ad, 0xb050935b, 0x60ae9931, 0xc35db56f, 0xb1e89737, 0xf7910fc6, 0x8bbf3b57, 0x093cd923, 
    0xda3f76f0, 0x7cd25827, 0x27ede229, 0xb2243ac4, 0xe705c95b, 0x55fbf488, 0xb3bdbab6, 0x4bb8a48d, 0x70beb30f, 0xf99372c2, 0x10524685, 0x858fd131, 
    0x65d3307c, 0x874ff1b4, 0x8dac577c, 0xcdf04c43, 0x17768ce5, 0x9b9ea6ba, 0xa7774326, 0x202e64cd, 0x256fbef9, 0x8caa73d7, 0x69979fe0, 0xc39f7bc5, 
    0x867811cf, 0x30b45bd3, 0xff3a17ea, 0x28abc400, 0x52ebfe5e, 0x96a0aef0, 0x98a42cb3, 0x1cc9bb02, 0x91b4c589, 0xc31511e7, 0x351bdc20, 0xc618e5fa, 
    0xa2740ebe, 0xf9b4e4fd, 0xaacc8f24, 0x6b7fb5d4, 0xf9779b2d, 0x53fb579e, 0xc69772fc, 0xf0b9249e, 0x636f817e, 0xc232f8a2, 0x4a9306ea, 0xb13456d0, 
    0xd9769b5b, 0x8f3ab21d, 0x4902c7de, 0xb2705d2e, 0x29d2244f, 0xf4b6f264, 0x897fb39f, 0x5fe8746c, 0x4b047940, 0x403e976c, 0x72175b3d, 0x12d7af3a, 
    0x8ef3b5fe, 0xf8efe1a7, 0x9cce2c45, 0xd19e25cc, 0x40a79d24, 0x69e23956, 0x814c1122, 0x93326c80, 0x044100c3, 0x6a200810, 0x2e2f51f8, 0xdaa443fc, 
    0x973e79c3, 0x1d7d7177, 0x3f20d588, 0x8dcdbc35, 0xed7c478c, 0x6bc61d19, 0x1176ccf3, 0x2d2aa3d6, 0xbffafcfc, 0x29b73e9b, 0x2e1e3cc6, 0xcb5f8b18, 
    0x7ee4a7d7, 0xe7f8dc86, 0x6dedd054, 0x3efdb4ae, 0x91b250d3, 0x73812b9a, 0x12966174, 0x0894e102, 0xf1e430d8, 0x938e5ded, 0x00ffaef1, 0x350c1fc2, 
    0x2d7c45dd, 0x3e9dbbe0, 0xf3eec6da, 0xd4b2bb57, 0xec476de7, 0x5629adca, 0x9b21020d, 0x3db6cb6b, 0xd381caf8, 0x00fff39a, 0x0edf8b00, 0xbba6ba8d, 
    0xb7228a0f, 0xd1246938, 0x0389ddd2, 0x1ce48d03, 0xad4f4e90, 0xff18df75, 0x67dd6600, 0x55f8b7f6, 0xf8a36563, 0x6dc2c3ca, 0x98f6756b, 0x39cdbb34, 
    0x56e9abbc, 0x96248e16, 0xa131df68, 0x1b3b41de, 0xede06ce5, 0x047fbe02, 0xcf59aa94, 0xf5fad3e2, 0xaf37fb3e, 0x27079d4a, 0x5ab5b64d, 0xdf64edf5, 
    0xa6e6e7ae, 0x9eeaa88f, 0xd63c3e38, 0xeae623b5, 0x6c3eecba, 0xa80a19d2, 0x03954933, 0xda413b39, 0xf628fa02, 0x838fd0af, 0x197e9b16, 0x24c467f8, 
    0x83785eab, 0xdc3b7ac3, 0x6b77394e, 0x17ad186b, 0x1371ee71, 0xd7fbc41f, 0x0e9f97c6, 0x3ff0477c, 0xf031fec4, 0x194dc497, 0x37e233fc, 0x7b4bc682, 
    0x6e957557, 0x7994406d, 0xdba9f2b6, 0x4a801322, 0x3815189e, 0xb03e6065, 0xe2af06f0, 0x1a7c0f3f, 0xa76b61f8, 0xaebad668, 0xec840f95, 0xa590efb7, 
    0x9221c9cb, 0x50b1937f, 0x63afa8b2, 0xe9b19e1e, 0xe033f975, 0x29b86db0, 0xbe9e5dad, 0x8b4efdb2, 0xd95f77c6, 0x67d51d9e, 0xb4202a77, 0xc0964392, 
    0x7dcd75e0, 0x0e4fe09b, 0x1ec02f8d, 0x4856b419, 0x8a36e9f6, 0xc45578e5, 0x49a6df43, 0xf1d9f935, 0x9da6e21b, 0x5063f8af, 0x35d3a7d1, 0xe5fa1a5d, 
    0x59b8b721, 0x1aa98ced, 0x12703c4d, 0xe94ebdac, 0xfab53e06, 0xe3d3f109, 0x67bf844f, 0x785d033f, 0x530cc58f, 0x8e25844f, 0x0d5ba59b, 0xe1845ad7, 
    0x26101c71, 0xc971627e, 0x802407e8, 0x4aafc82b, 0xbcd2a637, 0x58cddbb5, 0x9f4abdc2, 0xb13a5603, 0x7c466875, 0xe4efd9c0, 0xfba5f567, 0xfff79f4d, 
    0xbf5ef200, 0xe0bfef33, 0x751fbfa0, 0xb4bf97eb, 0x07bec19f, 0xb59698b1, 0x7b4edfd1, 0x278b23b9, 0x63569261, 0x46ea88b9, 0xae42c601, 0x00ff5571, 
    0x68bfbbe1, 0xbc1dfa3f, 0x8200ff19, 0x122e5d23, 0x813f5e5a, 0x6a56c182, 0xc8d77ff6, 0x9678aea9, 0xccfe147f, 0x8fbfb2bf, 0x7ab74275, 0xe61aeae2, 
    0x3fa9759d, 0xe758b032, 0x3d8f158d, 0x0f7f2056, 0xf86ff47a, 0x1b89af28, 0x60075fc3, 0x5a9c1786, 0xcec2b7ea, 0x08638275, 0x06ec8619, 0x01bf9163, 
    0x39e7e49b, 0xa7f89c3e, 0xa9377c88, 0x09fe5f78, 0xb8e5e0cb, 0xbf4b82ba, 0x9c41fc0d, 0xb9c9db2b, 0x93f6bc4d, 0x8c7aca10, 0x1da883b4, 0xe03fdb6b, 
    0xffc1d2a2, 0x49bb0a00, 0xbcf2b8b1, 0x3c77b3ab, 0xf954d965, 0x98eac6d1, 0x5b89e7c8, 0xa32b3da7, 0xf8e60b1b, 0x56a3a769, 0x00ff93fb, 0x09387a34, 
    0x4ead2ddb, 0xfc72d66e, 0x7ee85f79, 0x8525597d, 0x1b7581cf, 0x5db7b9b7, 0xb259eb66, 0xcbd3d68e, 0x90ad05f3, 0xc7deb9b7, 0x6219f3b1, 0x4248bd42, 
    0xf65a191b, 0xc667d9af, 0x00ff7a37, 0xeceff48c, 0x75d3bd74, 0xe69e87ab, 0x53f3faee, 0x8859b20c, 0x993c7c4c, 0xc66afe2c, 0x3dd57d3a, 0x92767885, 
    0xccad5ab7, 0x93acd1d6, 0xc82253ea, 0xacb80b26, 0x1bc5629e, 0x16a0e828, 0x00ffa00a, 0x47afb17b, 0xaead98fd, 0xdb66cd35, 0xd65c8742, 0xd23d133c, 
    0xac9536cd, 0xe43531e9, 0x9e8f72fe, 0x39706bda, 0xbfb3c688, 0x8c30bcca, 0xfa3519e3, 0x8da30606, 0xf26f9754, 0xe6b2363e, 0x8c9f858e, 0x25fc6ffa, 
    0xe873e853, 0xe29f9eba, 0x2b7cedf9, 0xa8a9be2d, 0x628052e9, 0x5757ea90, 0x72a08930, 0xb5a28d24, 0x29652268, 0x9611b2f2, 0xe193eac6, 0x6e6f8667, 
    0x785e16fe, 0x7d5544ae, 0x25fac54f, 0x32a198a6, 0x6598a2c1, 0x6e39d397, 0xdad3ce79, 0x1ac5abbc, 0x6bf1a7d6, 0x6b8a08e2, 0x34dc3ead, 0xa9ab6951, 
    0x7e585bec, 0x4b046cc9, 0x0b12b23c, 0xf2822abb, 0x6eb14b48, 0xaf0f204f, 0xd9a5057c, 0xf0548778, 0xa6828ecd, 0x0ade876f, 0x417d7b06, 0x1a6baad0, 
    0x5662949f, 0xf1827287, 0x339f0b42, 0x03b13300, 0x1f5f0320, 0x6454e29b, 0x7b37d1d2, 0x76d76dfa, 0x63afdfed, 0x2a2cf2ec, 0xaee536ad, 0x56b25e96, 
    0xbb31d26f, 0xb1b5b5f5, 0xec2de8eb, 0x89a36865, 0x66311312, 0x774b302a, 0xc9f4d427, 0x3ef058af, 0x46da36b0, 0x47037025, 0x1d8513b4, 0x8866cb2b, 
    0x84eac2de, 0x011c5c16, 0xb6e69e9c, 0xfda933fc, 0x6221489e, 0x4d655416, 0x80e08ca7, 0x55e9e02b, 0x9f4d6971, 0x153466a5, 0x53cb6e7a, 0x0f6fbfd1, 
    0xc67fda83, 0xc53bd9df, 0xe22dce17, 0xec821ff1, 0x910ef1a6, 0xb0c430a9, 0xeabe2924, 0xdb6ec020, 0xb7cb2824, 0x131197ee, 0x7b3c06f7, 0xdf34484f, 
    0xda3ef802, 0xb7e299d5, 0x1c9bf6f0, 0x5b18b87b, 0xf8019048, 0xf0997dad, 0xd5b753cf, 0xe982f4f4, 0x7086ba23, 0x54199e60, 0x2ab03a32, 0x82e02943, 
    0xe5d7200f, 0x457c8acf, 0xffe047f1, 0x71fc8800, 0xd66b59a2, 0x1e9ee4da, 0xef342fd7, 0xc476bdec, 0xee23106c, 0x21c868b7, 0x132dbc82, 0x00e29f01, 
    0xea4afb1a, 0x94502955, 0x35fc975d, 0xbaf253bf, 0xc5ea8417, 0x75f9a3ef, 0xabcfecf9, 0x86df667f, 0x3e169f36, 0xceda6a20, 0x3c6c5dae, 0xf6647535, 
    0x9faa51f6, 0x86795db4, 0x64246755, 0xedd4182a, 0x1cafbbef, 0xa1ed47f9, 0x8a6ffbe3, 0xfd53b41f, 0x852f41a2, 0xcda70dfc, 0x60be6a6b, 0xc0aed7c4, 
    0x528f325c, 0x489f4542, 0x6557d4db, 0x1fe39bf0, 0x7c137e87, 0xedf7f011, 0x8b26e309, 0xa3a69ac3, 0x3656eaa5, 0x32b30dde, 0x11ea5f2b, 0xed51b45c, 
    0x909c2546, 0x2c3f498c, 0xb9e74562, 0xd644f3f8, 0xdc11bf75, 0xb1a6ba69, 0x3589bf02, 0x6c6ec9cb, 0x33e0e4b4, 0x3033963b, 0x4e26ee27, 0x8fc5ea09, 
    0xc2e11538, 0x89b85a9d, 0xadb68a54, 0xb7b2373f, 0x799fbe4e, 0x4767e1e9, 0x6da39e9f, 0x6657b924, 0xfcbcfef7, 0x52ddeb8d, 0x97e5dec2, 0xd4b85457, 
    0x1d530608, 0x814365b0, 0x058c1c84, 0xa8f61818, 0x3dfcb67f, 0xbf3e00ff, 0xc63f28f9, 0xfec7e7bc, 0x9b36f129, 0x1fcb9be2, 0x746a4d0c, 0xf72d42bb, 
    0xc8b3abba, 0xc0123bbc, 0xdf734d9e, 0x487c9af0, 0xd69e00ff, 0x3fe6f77f, 0x387aaff0, 0xf8555b78, 0x6539f3bf, 0xedcca98c, 0x917fc12f, 0x9dc0c7f4, 
    0xff5dcb16, 0xfc5a8200, 0x87bfbc5b, 0x3e3637ed, 0xc85a8838, 0x1f0873ec, 0xf302ead9, 0x8cf2c4c0, 0x7f5bb57f, 0x5c6956f0, 0xb31c7cdb, 0x24cf7edc, 
    0x02b2d297, 0x15be2d40, 0x1d673ace, 0xd92fd5fa, 0x4d51fecb, 0xc7fea3f1, 0x557afe94, 0x8200ff5a, 0xad00ffb2, 0x00ff2ff8, 0x32fabf6f, 0xf2df9a1a, 
    0x27afc336, 0x099f33f9, 0xfa2200ff, 0x8ffccf8f, 0xa731fc99, 0x17c415c3, 0x445c18aa, 0x0cc75eda, 0x524d0641, 0x9f23c730, 0xf4b860f9, 0x6d8c7acb, 
    0xdac5bb78, 0xf583c795, 0x4af189af, 0xb3305e96, 0xb54c8fbc, 0x628db3bd, 0x8814f016, 0xa70e8090, 0xc9b1807c, 0x18d391c3, 0xfce7f0ce, 0xdafbaf7b, 
    0x1a9dfe3f, 0xfe93f8ab, 0x9fc4bb4d, 0xff8b1cf6, 0xbe824000, 0x36a82dea, 0x2f2d1fba, 0x859efa89, 0x27e1cff0, 0xf13ffc85, 0x74c1c607, 0x9f0ed4d4, 
    0xaba53dab, 0xca9b186a, 0x016e858c, 0x7ecccf18, 0xbede676c, 0xe595b787, 0xf9e42c74, 0x003d156a, 0x3ee515f6, 0x9200ff13, 0xfe1bf187, 0x00ffedc3, 
    0xa75e47a0, 0xe18ff765, 0xd5e6875f, 0xac304baa, 0x2b6527a5, 0xa165252f, 0x4645cefb, 0x3bcc729c, 0x53bc528c, 0x9dfb6e7e, 0xef328c46, 0xeeefa1d7, 
    0x2338522b, 0xc305b312, 0x4e36a402, 0x1bcdac41, 0x0ffd63fd, 0x9fac15f3, 0x03fe1feb, 0xfc08abfc, 0x5b00ff29, 0x899f989d, 0xf0e31efa, 0x91b757d2, 
    0x5cbe1dd9, 0x8aeb1360, 0xb6f643f9, 0xfd4583b3, 0xd6447cb8, 0xde1a86f1, 0xdedfa489, 0xb432bfa4, 0xdcb764c1, 0xb8fbe901, 0x1cf01f63, 0x0ebfd5d7, 
    0xf0dff4fe, 0xe52be61f, 0xfe37db8f, 0xfb4f764f, 0xfdaf3416, 0x7b5f711d, 0xf9095c43, 0x764c2726, 0x4e7c9b87, 0x67918ef0, 0x58435de1, 0xafee186b, 
    0x46daf492, 0x1c7139d7, 0x5130777b, 0x19883bfc, 0xbe71ad23, 0xdff49d10, 0xf8497c03, 0xf166ac82, 0x3694853d, 0xfc3397d6, 0xa06e04cb, 0x3aec4595, 
    0x00003b00, 0xf1955eef, 0xbe49fe6f, 0x6100ffa5, 0xd100ff66, 0x41c7bc66, 0x759300ff, 0x00ffb1f8, 0xf47f2d5c, 0x535e5e01, 0x6d312a27, 0x475600ff, 
    0xb57b9cbb, 0x8eadbfac, 0xc047e06f, 0xdfe207bd, 0x3ac49380, 0x75acf6f5, 0x4765ae19, 0x8aa06b6b, 0x6d9c83dc, 0x358fe53c, 0xc7f07fe8, 0x00ff08de, 
    0xff7bdd9f, 0xff870300, 0xfd4e1100, 0x8be4bf8e, 0xe4d77fdb, 0xdb6bc9df, 0x9a9cd9eb, 0x3d9f4993, 0x3f9b621d, 0x0000d9ff, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(USMNode, "USM Sharpen", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Enhance")
