#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Emboss_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct EmbossNode final : Node
{
    BP_NODE_WITH_NAME(EmbossNode, "Emboss", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Stylization")
    EmbossNode(BP* blueprint): Node(blueprint) { m_Name = "Emboss"; m_HasCustomLayout = true; m_Skippable = true; }

    ~EmbossNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_IntensityIn.IsLinked()) m_intensity = context.GetPinValue<float>(m_IntensityIn);
        if (m_StrideIn.IsLinked()) m_stride = context.GetPinValue<int32_t>(m_StrideIn);
        if (m_AngleIn.IsLinked()) m_angle = context.GetPinValue<int32_t>(m_AngleIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Emboss_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_intensity, m_angle, m_stride);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_IntensityIn.m_ID)
        {
            m_IntensityIn.SetValue(m_intensity);
        }
        if (receiver.m_ID == m_AngleIn.m_ID)
        {
            m_AngleIn.SetValue(m_angle);
        }
        if (receiver.m_ID == m_StrideIn.m_ID)
        {
            m_StrideIn.SetValue(m_stride);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _intensity = m_intensity;
        int _stride = m_stride;
        float _angle = m_angle;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_IntensityIn.IsLinked());
        ImGui::SliderFloat("Intensity##Emboss", &_intensity, 0.0f, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_intensity##Emboss")) { _intensity = 0.4f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_intensity##Emboss", key, ImGui::ImCurveEdit::DIM_X, m_IntensityIn.IsLinked(), "Intensity##Emboss@" + std::to_string(m_ID), 0.01f, 1.f, 0.4f, m_IntensityIn.m_ID);
        ImGui::EndDisabled();

        ImGui::BeginDisabled(!m_Enabled || m_StrideIn.IsLinked());
        ImGui::SliderInt("Stride##Emboss", &_stride, 1, 5, "%d", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_stride##Emboss")) { _stride = 1; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_stride##Emboss", key, ImGui::ImCurveEdit::DIM_X, m_StrideIn.IsLinked(), "Stride##Emboss@" + std::to_string(m_ID), 1, 4, 1, m_StrideIn.m_ID);
        ImGui::EndDisabled();

        ImGui::BeginDisabled(!m_Enabled || m_AngleIn.IsLinked());
        ImGui::SliderFloat("Angle##Emboss", &_angle, 0.f, 360.f, "%.1f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_angle##Emboss")) { _angle = 45.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_angle##Emboss", key, ImGui::ImCurveEdit::DIM_X, m_AngleIn.IsLinked(), "Angle##Emboss@" + std::to_string(m_ID), 1, 4, 1, m_AngleIn.m_ID);
        ImGui::EndDisabled();

        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_intensity != m_intensity) { m_intensity = _intensity; changed = true; }
        if (_stride != m_stride) { m_stride = _stride; changed = true; }
        if (_angle != m_angle) { m_angle = _angle; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("intensity"))
        {
            auto& val = value["intensity"];
            if (val.is_number()) 
                m_intensity = val.get<imgui_json::number>();
        }
        if (value.contains("stride"))
        {
            auto& val = value["stride"];
            if (val.is_number()) 
                m_stride = val.get<imgui_json::number>();
        }
        if (value.contains("angle"))
        {
            auto& val = value["angle"];
            if (val.is_number()) 
                m_angle = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["intensity"] = imgui_json::number(m_intensity);
        value["stride"] = imgui_json::number(m_stride);
        value["angle"] = imgui_json::number(m_angle);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf2ad"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_IntensityIn  = { this, "Intensity" };
    FloatPin  m_AngleIn = { this, "Angle" };
    Int32Pin  m_StrideIn = { this, "Stride" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatIn, &m_IntensityIn, &m_StrideIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_intensity       {0.5f};
    int m_stride            {2};
    float m_angle           {45.f};
    ImGui::Emboss_vulkan * m_filter   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5304;
    const unsigned int logo_data[5304/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xb3003f00, 0x4128a42c, 0x75a5e792, 0xf0614a76, 0x9083ba16, 
    0xaf4fbe90, 0x2fb9deee, 0x812fdf1c, 0xaf4d1cbe, 0x7379af1d, 0xc6db9072, 0xf9b912dc, 0x4eaf0788, 0xb1e8d7d5, 0xe269f807, 0xfb866337, 0xdf338c34, 
    0x0b5c2ff7, 0xba3cd073, 0x24042df3, 0xd6fb3c77, 0xf0882d8c, 0x66c53d78, 0x04042f16, 0x7b0020f6, 0xed648cd6, 0x9c73a9c2, 0x8a6aee05, 0x801bb545, 
    0x4a3fce18, 0xcaaa7225, 0x6ae8484e, 0x3200b7a4, 0x5d25b1aa, 0x08f0b283, 0x19d7311d, 0xecefd2a2, 0xf30f89da, 0x73298c3b, 0x03d75195, 0x33374a35, 
    0xa32dd294, 0x3d0c2189, 0xdb9a3abf, 0xb0f01c0f, 0x7e90baca, 0xc8f4b686, 0xfd48dd34, 0xa70b539b, 0xb508e4c8, 0xc458751b, 0x8904f064, 0x27f7b2c2, 
    0x4a4f3d82, 0xf7e8aaa3, 0x67ae041a, 0xcab04f8e, 0x917ab6ec, 0xa017ac8c, 0xe1b13175, 0xa49091b1, 0xd0649ce0, 0x94d4d0e2, 0xe0318796, 0xef2d59c9, 
    0x8eee582c, 0x7d44d819, 0x1774a507, 0xdb5cd116, 0x948b14c9, 0xf5b04a91, 0x09dfb906, 0xba176aa3, 0x9909468a, 0x46a12a67, 0xa02bfc49, 0xb018ed8a, 
    0x312a838c, 0xa33c5749, 0xa1d2c70e, 0x00ffc68e, 0xc79365c3, 0x7ed60c5e, 0xed365d1c, 0xf5e5c36b, 0xf0e0163d, 0xa3e57619, 0x0372db63, 0x67aeb8d7, 
    0xc74d9ac3, 0x6c08758a, 0xca1159ed, 0x2749b234, 0x19358add, 0x07be2376, 0xf1aac961, 0xf1d1fae9, 0x78ab856e, 0x106f2565, 0x9627dcd9, 0xd1624621, 
    0x05f71b6e, 0x78bf8004, 0x6b001c9c, 0xfca0fdad, 0xf85ea449, 0xf047fbe6, 0x8bfdc1d3, 0xe6f69695, 0xd4a1d5c9, 0x92cc482f, 0xaf20292b, 0xbb83e7a2, 
    0x980bd28a, 0x4393cbc5, 0x47fcd693, 0xcdee35a0, 0x6e9ac33f, 0x88126ba5, 0xb755f7d6, 0x1f9f27f3, 0x41f979c4, 0xf7a0a3ec, 0x00ff50cd, 0xff4d8384, 
    0xc33fa100, 0x3f02f89f, 0x352eb0c6, 0x96c936dd, 0x4e5fad2b, 0x6ca370b0, 0x136b7777, 0x0f60f632, 0xd867d451, 0x94f05fd4, 0x32f49f68, 0x31f89f68, 
    0xecadf14f, 0xbf98b98c, 0xad0b3515, 0x2d11c35b, 0x766cbee4, 0xbdc291ce, 0x66fe7991, 0xdc46afbd, 0x350b00ff, 0xa700ffe6, 0xbc7d3249, 0xf113af97, 
    0x99e143f8, 0x53f33946, 0xf8b8d7f9, 0x277c7771, 0xf33f09f1, 0xf61ff9e6, 0xed97ebc5, 0x290f7d1d, 0xb4c1d1fb, 0x0c5de973, 0x785a3356, 0x43101f4a, 
    0x3d6f4922, 0xa98cb5d1, 0x5812dcfb, 0xfc48657b, 0xca73730d, 0xb8d7b42c, 0x7921883c, 0x52d93f4e, 0x7869a57f, 0x5f5dfe2a, 0x6bf076f6, 0xbc380216, 
    0x128c7cf6, 0x19b96bdf, 0xa67498fc, 0x35b07604, 0x1154dbec, 0x3faa7012, 0x46adbf8d, 0xa9abfded, 0xa99c1e45, 0xde9f5a3a, 0x239fc9de, 0xffa0427f, 
    0x3d42cb00, 0xa4b90307, 0xb3dd758b, 0x87b4ed0c, 0x7d24d736, 0xb17137f9, 0x4f9e637b, 0xa6d6d007, 0x2cdb129b, 0xa4761b56, 0x35826041, 0x723c0239, 
    0x0ee43c01, 0x5346b4e6, 0x6857ec34, 0xe65e6976, 0xa91bf241, 0x8a1e95b1, 0xff8ec200, 0x1e778d00, 0xb03df10f, 0x6b0a7fb1, 0xe17bc190, 0xdd754acd, 
    0x69cbc02d, 0xdaf230b2, 0xd5d913ee, 0x04639c18, 0x6b866b80, 0x3b381092, 0x818b9002, 0x00ff0ed0, 0x33834fad, 0x21552e47, 0x72de0628, 0xd7efb9e7, 
    0x4c93adf0, 0xa35ab3e6, 0x161ec337, 0xfc1fbed4, 0x8617f15b, 0x439d73b5, 0x3f12d64d, 0x340b4139, 0x458e0664, 0x534666cf, 0x73b5e3f8, 0x7875141f, 
    0x52fb17bc, 0xa645fa6a, 0x7f5f136e, 0x6e614db4, 0x55993d37, 0xa2e3cc00, 0x8c53cf21, 0x44af999e, 0x7149fcd7, 0xbfb147e2, 0x437c70b6, 0x9d5b9104, 
    0x9b2ad449, 0x01238668, 0xece5ee7e, 0x59fc734a, 0x2dfc68ac, 0x9e6aa765, 0x94a7f129, 0xac37ebd2, 0xf9a5ba97, 0x1469ba73, 0xc2094614, 0x15728203, 
    0x94acf640, 0xaab4b937, 0xf1ab636d, 0x0a9f177c, 0x0065013c, 0xe2bd668f, 0x6e317feb, 0x0d923ba3, 0x56951138, 0x4626c71f, 0x030cd4e1, 0xfde2095e, 
    0x489bf461, 0xfef8b42c, 0x126aabd1, 0xdcc6967d, 0x2c634b1e, 0x1c55f6e4, 0x570c7ab3, 0x9eb41fd1, 0xe1951ea3, 0x191a86df, 0x78a54924, 0x9cd3ed73, 
    0x2ab92964, 0x00ff9e71, 0x7100cfea, 0x7c3a5fef, 0x8a4fd32c, 0x61fcb9f5, 0x91a0bb78, 0x8096ae4d, 0xe4db31ed, 0xfe801989, 0x92916127, 0xab450770, 
    0x6e422bd2, 0x87ceeee6, 0x6373f840, 0xdb1f9b1e, 0x6b756cac, 0x9797ccb3, 0x0f6987b0, 0xd50e82aa, 0x077d01e3, 0x00ff68bd, 0xbfd1bdc2, 0xffa201e8, 
    0xff22e000, 0xeb748500, 0xa70aa5fb, 0x297d3a0a, 0xacf5d67c, 0xc7f73c4b, 0x4245e390, 0x1b97d57f, 0xdcabbdbe, 0x7c3722bc, 0x0656f12b, 0x7348a771, 
    0x646c00ff, 0x8ef810af, 0xdc45f1df, 0xe11f4b7b, 0x82777bcd, 0x1e858f98, 0xe5d2f72b, 0x7af9fdcf, 0x796eb48f, 0xd591dd05, 0x15db4bb4, 0x6975ad6d, 
    0x8cde082c, 0xa67e54e8, 0x59027eb7, 0xd5ec0f41, 0x5d7ee1e1, 0xb8a5ad2f, 0x0129fa86, 0x999b523e, 0x93eb785d, 0x6af423ba, 0x6b918cc5, 0x66c1016e, 
    0xeea0b700, 0x9a96ce6a, 0x78aa99a6, 0x19cee2a2, 0x54625da4, 0xd10d0c92, 0xa9dbb11d, 0xfd6e7a01, 0x64fa1cc3, 0x3dd8b553, 0x5bda2f35, 0x0a044cdc, 
    0xcdf6759e, 0x888ce48d, 0x3aa6ba53, 0xa9f7dc81, 0xbe2d417c, 0x94cbe187, 0xd4b8468a, 0xb9258c65, 0x9938c3b2, 0x4fced88e, 0x2aa89fcb, 0x56731d07, 
    0x3c887bf5, 0xd3445b3c, 0xcc5c5cd8, 0xa84d5bb3, 0x999d8113, 0x0e003b28, 0x9c8e617e, 0xf85c9fd7, 0xc2061dbe, 0x5400ffe6, 0xf6f9df8c, 0x88b460bf, 
    0x90ab1b1c, 0x784f703f, 0x03a49ef6, 0xd79cedc1, 0xac966254, 0xa2ef94e6, 0x1fbfb537, 0xd11a7e69, 0x7521bce0, 0xda50513d, 0xbb6f6747, 0xb98a7717, 
    0x11004b62, 0x049c2309, 0x0446b23d, 0xd7b20bbe, 0xab4eec2f, 0x358c4be2, 0x2cd89be3, 0xac050a63, 0x7248864f, 0x8ca36038, 0x18c8ebf5, 0x9fe10f03, 
    0xe3ed6f80, 0x2c9ec483, 0x6f0fed97, 0xb07ade74, 0xf26b6fd9, 0xbb3e462b, 0x3dcf85cb, 0xbbbbb66b, 0x1da06efb, 0x6291c524, 0x00ffb0d0, 0x03778396, 
    0xa4c0983e, 0xd984beda, 0xb585da9b, 0xd3e18687, 0xdd130ff5, 0x5ea79736, 0xdada9a86, 0xabdbbc18, 0xbce09488, 0x50000271, 0x47c5dc78, 0xccc56aa6, 
    0x5678aeaf, 0x015add1b, 0x96867fe1, 0x3130abf7, 0xbe6ae7cb, 0x3f489926, 0x58f88965, 0x320f20e3, 0xe42a1f45, 0xdfe14902, 0xaeb1b41d, 0x9ed7c6fe, 
    0x6bc2b227, 0xdebc0f3e, 0x6aaf1e92, 0x9e8866d8, 0x8915afe3, 0x1a5173f1, 0xefad8ee7, 0x29fb27a3, 0x6c297b34, 0xdcfdc16d, 0x32bab510, 0x328a0ea2, 
    0x1b05404f, 0x5f79ac85, 0x6a17cfc7, 0x75fc141f, 0xb14c3724, 0xec8a785e, 0x7ec4ca35, 0x03347b4b, 0x2280be28, 0xf45a0fa2, 0x2cc9328d, 0x1089a2ac, 
    0x55a1a846, 0x0ca08017, 0xf20af801, 0x4336877f, 0xd6289ec5, 0x6df2c9b5, 0xdab36f96, 0xfc8c441f, 0xff337bc4, 0x07f62a00, 0x540c2032, 0x4346373a, 
    0xee362bfd, 0xbe215acb, 0x9a716e59, 0xdffda33c, 0x11b79cd2, 0x8fdc8d01, 0x98f64b51, 0x462abc7f, 0x39c5d779, 0xabc3a74d, 0x448281fb, 0x7d7a8eb0, 
    0x032ff7fa, 0x3c083fb0, 0xfd51275b, 0x00ff2895, 0x3c5f0fc8, 0x489a71fc, 0x2e6a137e, 0xdbe7931c, 0x7e82a380, 0x00fff77a, 0xc12fb304, 0x1b051a7f, 
    0xb893688a, 0x90b7844e, 0xa93554fc, 0xae3c77b2, 0xd7522f3d, 0x746cb23f, 0x66bd756b, 0xc8a8319e, 0x65c51064, 0xcf0cc76e, 0xc88f7033, 0x80c4302a, 
    0x58c3ae78, 0xc39f8df1, 0x5f4d0fed, 0xb536de0e, 0x9bd2e8a4, 0x37efb518, 0xf3247960, 0x0e8d6526, 0x62028fd7, 0x0c07cfa5, 0x5803f331, 0xa20db796, 
    0xda5a44f8, 0xd8b69fbb, 0x16a6c4a5, 0x6696a4f2, 0x38a3b17d, 0x1c1410cb, 0x00474e72, 0x42573d55, 0xefd98f6b, 0x8db61642, 0x996e89a9, 0x21e22d99, 
    0x304d9ca5, 0x8be532cb, 0x27e3c008, 0x8cec5a85, 0x39335714, 0x8bdd3667, 0x68abf59a, 0xae876fba, 0xae6dc637, 0xc9fac5ec, 0xe46ce72a, 0xe3755562, 
    0x8c607cf7, 0xf624c083, 0x47f83caf, 0x1bf1c1a1, 0xc77873c4, 0xff747954, 0x5e780000, 0x57de8656, 0x79469a21, 0xc3087032, 0x8130ecca, 0x9cbc9042, 
    0xc6676b8e, 0xbf6baeeb, 0x046f340f, 0x6b127769, 0x46f13d3e, 0x441af7a4, 0x26997a5a, 0xc6e6f4d3, 0x730151e0, 0xcab75c18, 0xe7e6579b, 0x17f1b115, 
    0xbec22bfb, 0x193ed223, 0x87483af8, 0x6f33bc84, 0xd5f5bd1d, 0x6fdd2e9b, 0xeebd2b50, 0xe19029e5, 0xc430564e, 0x19e300ec, 0x1c72cec0, 0xad637723, 
    0xdd893ff1, 0x99e1593c, 0x226b373c, 0x494d4af8, 0xf216d524, 0x2fa4f24d, 0x8ced2b91, 0xf26df300, 0x2748f9c0, 0x5c314e76, 0xae9585b5, 0xdfaef18f, 
    0xdb997b4e, 0xb5e6dac3, 0x763bb5f6, 0xc22591b7, 0x8487887c, 0xe0ce8f7d, 0x3b92ec46, 0x2583bf56, 0x398e2559, 0x481b49d4, 0x9ca21f30, 0xc7236b0e, 
    0xa1f8a305, 0x40e1f2f0, 0x15f16281, 0xe51b4eb4, 0x199d17df, 0x7d9cbacf, 0xd4d3ac38, 0x67b271e8, 0x536bf15b, 0x842fb5d6, 0xfe9222de, 0xd23e2d28, 
    0xa1495697, 0xf63686da, 0xc1767bf6, 0x4eb07333, 0xae8f734e, 0x5f70a517, 0xd2b6b510, 0x27f8033e, 0xeee9ce5e, 0x14692dbc, 0xb4f39340, 0xefb9c460, 
    0xb5df01cb, 0xd4c4df7a, 0x4b001f8a, 0x5d5e9b04, 0x384b5363, 0x355a7283, 0xee28b324, 0x7845c633, 0x782bbd06, 0xec67e0bb, 0x02a500ff, 0x8efabc5c, 
    0x92837899, 0xec7467a9, 0x61d08137, 0x55d0e780, 0x4bc6c8de, 0xfcd6b1de, 0xf0f8f034, 0xf87483e7, 0x1a53261b, 0xbaf7e9ef, 0xbe00ffb1, 0xa8abfc89, 
    0x6b2b96b9, 0xcbcc3563, 0x2d63bc0d, 0x96023821, 0xa3185638, 0x8c285481, 0x79ac1805, 0xe43a6bd8, 0xcbfbefb6, 0x1235360d, 0x995b3940, 0x840eb39b, 
    0xde13fe28, 0x06b5bdb2, 0x5da9476b, 0x7dfb2edc, 0xb38be435, 0xef2d84cb, 0x7f8a7382, 0xfa2ff5da, 0xf6fd2f05, 0xe157e3bf, 0x2c359a85, 0xbb8fa4ce, 
    0xc2be0a1f, 0xb77fe49f, 0xe445e737, 0x1fe0d145, 0xeb92a718, 0xa759f1c2, 0xea907bdf, 0x7f0e7c07, 0xe0357d9d, 0xa7f061d7, 0xa41185c7, 0xdf27d247, 
    0x2bf7e322, 0x1f5b3ee4, 0xc9418fc5, 0xa7f800af, 0x4f5bbde0, 0x89aff5f0, 0x2d6e8d61, 0xcc1cb32d, 0xeccd3684, 0x72e85300, 0xf0017d45, 0x78b77f9e, 
    0x63d3551f, 0xd9ab9110, 0x7d26708b, 0xca48e2ac, 0x137f8ced, 0x8564dc9d, 0xda3423f5, 0x9f6eacf7, 0x7ecb73bb, 0x85a75d24, 0xa0a739bc, 0xfbb8648d, 
    0xd986bd0d, 0x40de065b, 0xb127743e, 0x0e32c03b, 0x2a8ef273, 0xaba5eead, 0x5b8a3cfc, 0xd6ea3a1d, 0x6bc244ec, 0x08d93b4b, 0x0166d68e, 0xc070e75a, 
    0x2e5ec620, 0xc5f664bd, 0xe681f853, 0xbd75b178, 0x77094b37, 0x3f7d657b, 0xd1602694, 0x4292298f, 0x300cdc8e, 0x82c7aa52, 0x626bce71, 0x5a56c4db, 
    0xff9ed9bd, 0x6f8a4a00, 0x97375d08, 0x47ab636f, 0xe74250be, 0x3c0e4e05, 0x6f1976c4, 0xb5dc15c3, 0xeb3b8e8d, 0x3cd5b473, 0x0dfca73f, 0x8b8eb5f0, 
    0x00ff19a3, 0xacd41eb7, 0x1783d7b7, 0xfbc944fe, 0x46f55cc9, 0xd58bb87f, 0x70e31963, 0x6c4017af, 0x596f98b5, 0xd9d7ad76, 0xb300fff7, 0xf24f2a85, 
    0x87f853af, 0x8acf3569, 0x8b6b75af, 0xb5bf6fc9, 0xce324625, 0x628ea4db, 0x840c4b37, 0x023ac570, 0xe8762038, 0x9951ef3c, 0xa9cbf46d, 0x58bb055a, 
    0x0d8469a2, 0xf03e4afc, 0x72c5f9cf, 0x786369c9, 0x67e7ce4a, 0xb2a408a2, 0xc56578ba, 0x683c44cc, 0xbf83ec7e, 0x78698d3d, 0x737d4e23, 0xa4f248c6, 
    0x61995d52, 0x58af685b, 0x00434985, 0x2e1ce00a, 0x5e71f371, 0x4bcbe07f, 0x2349b096, 0x629370bb, 0xbc438e45, 0x370e90aa, 0xac57d071, 0xcdf13d7c, 
    0xc6ba80a6, 0xe0647195, 0x9f3dd9de, 0x336094f6, 0xcae0175b, 0xaf5870aa, 0x470e025c, 0x9d286b5e, 0x07236933, 0x2d8b8fe2, 0x2bf143fc, 0x12074b48, 
    0xfd4b1a69, 0xc228d492, 0xee7c2c9f, 0x9c6cde3f, 0x3ecf2bfd, 0xa77ddb17, 0x9cedd650, 0x5e0f1d66, 0x4ee816be, 0x928d8b76, 0xf1ba2b36, 0x532dc367, 
    0x1b3e37c2, 0x3578e2d6, 0x2dcb0b8f, 0x60b526ca, 0x2927424b, 0x40ca1491, 0xe420a468, 0x137b8e2b, 0x68c3bf5c, 0x69fc7962, 0xfb206d75, 0x16f3fa5c, 
    0xc2ee07f3, 0xf1a74aac, 0x3992d624, 0x83b077a2, 0xbe7fe82c, 0xf89d6bfd, 0x23dadf6c, 0xcd07d455, 0x45b852bb, 0xede024c7, 0x3e7da1ad, 0x5bdc7796, 
    0x53de8d9c, 0x82197246, 0xe9f41996, 0xbc98fd4c, 0xf82afe36, 0xc5dda77b, 0x4c967634, 0x0d35d527, 0x70f9e842, 0x31d2c6db, 0x003d7667, 0x8cd70303, 
    0xe64e6c56, 0x36c288f0, 0xdec30d33, 0xd45f8f97, 0xfc107fd5, 0x35add146, 0x37fcad69, 0xfdf559e1, 0x75b1132e, 0x81a7fb2b, 0x08bb1bee, 0xd38b7cd4, 
    0xd6ebf300, 0x67e17fb3, 0x4400ff4d, 0x19fc1ffa, 0xf514fe4b, 0xfecb2917, 0xd7b51acf, 0x00ffed8d, 0x6a0c2f68, 0x2cd81b92, 0x69739986, 0x3514bd04, 
    0x7ac559c4, 0x1298c09f, 0xe3bd045f, 0x69db3305, 0x72247402, 0x039c1a71, 0xe33990db, 0xb29fe715, 0x6ff685a6, 0x04e21fda, 0x591bcd12, 0xb80d5aeb, 
    0x48763fc8, 0x3b8243a6, 0x077a0df0, 0x5c13e3ec, 0xe09a35fc, 0xe9b36fee, 0xb97fb288, 0xfee7e4e5, 0xc697aaf9, 0xcfc28f8a, 0x47d1d01f, 0x4e492688, 
    0xfbb4ed6c, 0xdcba25a7, 0x2f3690dc, 0x3dd972d0, 0xcc35c731, 0xd7e28af8, 0xa9c51345, 0x89b4244c, 0x23952315, 0x6021eb2e, 0xdb19a8dc, 0x73e2b7b4, 
    0x2473245d, 0x6023c312, 0x912864c2, 0x241bc683, 0x734f528f, 0xa1e6fa59, 0xc9ad8706, 0x43a2757f, 0x403d3de2, 0x91179b4b, 0xc32bc861, 0x1b72e4a3, 
    0x1be3e460, 0x17d595be, 0x5dcfcea9, 0x3ef034f1, 0x336f7d91, 0x6adbb5a5, 0xe9d91396, 0x2eb2fcb2, 0x4e9752db, 0x4b1c70ac, 0xa70c0623, 0x9957e0b1, 
    0xef9bd068, 0xc8a5cd1e, 0x3a695ba0, 0xa1d7f45d, 0x60a365ba, 0xd73afd14, 0xe52af153, 0xc5a719bc, 0xea33c7a2, 0xede66c69, 0x1933d359, 0x74321fe6, 
    0x842357f9, 0xe349005c, 0xa50fd73c, 0xf8a5495a, 0x824bf35e, 0x7c893f61, 0x1975fb48, 0xa7eb6da3, 0xab0b9259, 0x7ccce3b0, 0x20090a05, 0x3d579c64, 
    0x8d537446, 0x36874fcd, 0x6be1c3d3, 0xfe2c2933, 0xeb6e6044, 0xf0e362b7, 0x37025deb, 0xcef41894, 0xa7b18a73, 0x49ac1d45, 0xd448a802, 0xa0e8516c, 
    0x47dd5171, 0xddcf17e5, 0x3ad720c9, 0xd1955c67, 0xb300ffe9, 0x7c6eb7ee, 0xab373c4c, 0xeff0bb20, 0x33fb5789, 0xf273b350, 0x7e22fe3e, 0x18b93a7a, 
    0x1527a36e, 0x3c0f7fe2, 0xc8e07b2b, 0xeaa459fc, 0xd7f65e6c, 0xbc8d9ac4, 0xcdfa478e, 0xf80f1493, 0xd7f803aa, 0xc9dea043, 0xed7ea867, 0x874752cc, 
    0x11e4818d, 0xaf813fc8, 0xa3fdf848, 0xc3f85eda, 0xe5ecd645, 0xc4cf366d, 0x821a441a, 0x69140079, 0xef36cb87, 0x2701dc56, 0x237bb7de, 0xc973698d, 
    0x357d593c, 0x78a3a7e6, 0x46f2166e, 0xf7bc92a0, 0xaa424a3d, 0x9c7a1472, 0xd4ab3de3, 0x1f6557bc, 0x7a82cfc3, 0xd5b48127, 0x24d667f2, 0xe9d54b8a, 
    0xee07d1b6, 0x3fa18f91, 0x5ef11d31, 0x2f2de04b, 0xe3adf854, 0x677810af, 0xe9581051, 0xb1bd19be, 0x04c49fbc, 0x37f669f9, 0xfb4972c9, 0x3230c6b8, 
    0xd5959e58, 0x85f85afc, 0x199fe36d, 0x908d9a6b, 0x590c7f7b, 0x33c15a2a, 0x9fe8ae8d, 0xd3fe812a, 0xb20676fa, 0xbc16b949, 0xb8e178cc, 0xc08d4560, 
    0x5652b4b7, 0x072e4f30, 0x9a533f56, 0x3ff5d97f, 0xfb0f08fa, 0xdb34b6ea, 0x4edf2a1d, 0x365e6db5, 0x12a3c94b, 0xecf67bf9, 0x0746f753, 0x5f3eabb0, 
    0xdfbabf85, 0x00fff4f7, 0x6e626b8d, 0xd5ece779, 0xdcfe2a77, 0xcd39f616, 0x9a179ea4, 0xd6fd8467, 0x2319337f, 0xdf5e81d7, 0x6b813bfb, 0xf6783efb, 
    0x5d57fe58, 0xff815822, 0x94c86700, 0xf62bbce2, 0x9300ff6c, 0x00ffb3ef, 0xfd6f4eb1, 0xbfdd6b18, 0xf900ff67, 0x1f885f37, 0xff9b0cf6, 0xa4e54900, 
    0xf02534fe, 0xb474c133, 0xe3ad885b, 0xc8330a70, 0xcc42fa48, 0x8f7e5a3f, 0x80b75aa2, 0x7307c3ed, 0x3323186c, 0x3d654e92, 0xfdf97e7d, 0xfc27ba29, 
    0xbd00ffba, 0xb593fe2f, 0xf2dfe868, 0xffe33f23, 0x7545a300, 0x577c1518, 0xa58a3f7d, 0xa8a38ef0, 0xee35cf4a, 0x55b8269a, 0x0e1d5938, 0x01fa48c0, 
    0xb0d94ac7, 0xd5de8ab7, 0x34d62812, 0x8141ed3c, 0x3faee79a, 0x3fe01be4, 0xfeb704fb, 0xdad2358c, 0x8fa800ff, 0xe6f3dafd, 0x547ae6fd, 0x518bbad7, 
    0xee79b913, 0x0dc0cd2a, 0xaaf53c1f, 0xfae47dd1, 0xfa37b38a, 0x29d2f8b1, 0x672ed199, 0x955e734f, 0xefda55f1, 0x7df875f6, 0xb41f237d, 0xb6f76ad9, 
    0x88e0b890, 0xff2b6f98, 0x5e017d00, 0x7cfc0f6d, 0xe835f545, 0x3f1300ff, 0x193cd9e4, 0x056300ff, 0x358bfedf, 0x8913bed0, 0xa01147fc, 0x1b73bc20, 
    0x5f1bb1fc, 0x5738913d, 0xdf91d071, 0x4e17ab1d, 0xf85b83b0, 0x06cde187, 0x54e23fe5, 0x6e739226, 0xe475069c, 0xad39f531, 0x00ff0acf, 0xc3fdc7c7, 
    0xbfacf3cf, 0xc900ff0b, 0xd6f7f067, 0x0d53e56f, 0xff71268d, 0x7fbc1500, 0x39fee9aa, 0x30a26dd4, 0x443051f9, 0x03ed3c06, 0x23d73a80, 0x2f0b00ff, 
    0xfe83f559, 0xf500fffd, 0x4fc6dfea, 0xb79a28f9, 0x26ae74fd, 0xd9ffc8ac, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(EmbossNode, "Emboss", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Stylization")