#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Contrast_vulkan.h>

#define NODE_VERSION    0x01000100

namespace BluePrint
{
struct ContrastNode final : Node
{
    BP_NODE_WITH_NAME(ContrastNode, "Contrast", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    ContrastNode(BP* blueprint): Node(blueprint) { m_Name = "Contrast"; m_HasCustomLayout = true; m_Skippable = true; }

    ~ContrastNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }
    
    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ContrastIn.IsLinked())
        {
            m_contrast = context.GetPinValue<float>(m_ContrastIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Contrast_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_contrast);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ContrastIn.m_ID)
        {
            m_ContrastIn.SetValue(m_contrast);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_contrast;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ContrastIn.IsLinked());
        ImGui::ContrastSelector("##slider_contrast##Contrast", ImVec2(200, 20), &val, 1.0, zoom);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_contrast##Contrast")) { val = 1.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_contrast##Contrast", key, ImGui::ImCurveEdit::DIM_X, m_ContrastIn.IsLinked(), "contrast##Contrast@" + std::to_string(m_ID), 0.f, 4.f, 1.f, m_ContrastIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_contrast) { m_contrast = val; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("contrast"))
        {
            auto& val = value["contrast"];
            if (val.is_number()) 
                m_contrast = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["contrast"] = imgui_json::number(m_contrast);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3ab"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ContrastIn = { this, "Contrast"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ContrastIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device                {-1};
    ImGui::Contrast_vulkan * m_filter   {nullptr};
    float m_contrast            {1.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6751;
    const unsigned int logo_data[6752/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfa003f00, 0x4bd2d232, 0x95b833b9, 0xf235b95e, 0x76a5edd7, 
    0x842ff165, 0xe35cea49, 0xf65afafe, 0x5ce2777d, 0x34b7f05f, 0x580500ff, 0x1d8b1c4b, 0x5257979c, 0xa7922245, 0x0f906a03, 0xdaf39c07, 0xe4f61fbc, 
    0x8807fbba, 0x06b01dbc, 0xfc184626, 0x309dbf56, 0xc1c59b31, 0x99fcb73e, 0xd7a026fd, 0xf5ab2ebd, 0xb7e01b47, 0x311fdb3f, 0x6704573b, 0xd9ac579c, 
    0x0a55a95c, 0x78c53972, 0xb6af83cf, 0x7b34b35f, 0xe7a08e98, 0x757aea15, 0xbe0cb6e2, 0x2c01485c, 0xbc7ed1ed, 0xd79c00ff, 0xd9f35b6d, 0x311ade9e, 
    0xdae8d0e4, 0x255b80e4, 0x5d53c57d, 0x4ea63956, 0xf701921b, 0x8d5a68a7, 0x26e0f5a5, 0x00442c01, 0x93f3238b, 0xbed6f1d4, 0xe14bf891, 0xab780ccf, 
    0xf8f2164d, 0x93984b7b, 0xc8d60c99, 0xbdcedfee, 0xf154195a, 0x473abf31, 0x94679881, 0x9bea2ab0, 0xcd47be95, 0x490072b7, 0xf6fc8e51, 0xf196ab1d, 
    0x976c6361, 0x61c9b611, 0x08bd9125, 0x635f8304, 0x93fd567c, 0x49742eec, 0xa9038ff5, 0xa36dd4b0, 0x8b217d67, 0x00d015cb, 0x99f7c9b7, 0x1000b01f, 
    0x5a070670, 0x0de2aff8, 0xaf87f7e5, 0x568df4ae, 0x542f6dca, 0xb16725b5, 0x22c78cbb, 0xb5ad1de4, 0x39ac6d80, 0x20c84052, 0xd697add2, 0xab4949c1, 
    0x071ef5c5, 0xd466c137, 0x9276b19f, 0xa23ef7e8, 0xf6f725f0, 0xb48400ff, 0xfb81bbcb, 0x208702f3, 0x44ad38f5, 0xbd4e9fba, 0x4fceea86, 0x481c682e, 
    0x9183fa84, 0xfff06b5e, 0x235d5000, 0xfb753ac0, 0x207f4bb8, 0x0088853c, 0x004f520f, 0xd9fadc56, 0xdb77add4, 0xea6ac9ba, 0xb78d2419, 0x38ee032b, 
    0xa162e035, 0xae383715, 0x36c362a7, 0x6da67a9a, 0x0ffed67e, 0x11bec58f, 0xe92efed0, 0x6391212a, 0x8458c38e, 0x950b659c, 0x29f50046, 0x21df2b21, 
    0xab7ca587, 0xe91bafe2, 0x273c0fbf, 0x582de279, 0x1190d64a, 0xb940711c, 0xed6ca579, 0x38877f40, 0x1f009ee4, 0xf07b7d85, 0x8b8ee2e7, 0xf143ebf0, 
    0xba365e24, 0x77c183b4, 0xc39b7256, 0x1143327f, 0x6079846d, 0x904955c8, 0x1949817c, 0xe257a062, 0x1e1fc5cf, 0xc60ff1cb, 0x9ea4863a, 0x99503a74, 
    0x99b24dd7, 0x6d5b1bf7, 0x8e8fcbc7, 0xe3c6050b, 0xd8d7e4dc, 0x9b05f864, 0x8a76725a, 0xe07fbdf8, 0x78e707fe, 0x3a5ccecc, 0xf24a83a7, 0xe5f4c15a, 
    0x9baedf77, 0x661df979, 0xfc54fbaf, 0xaed4bc4e, 0x61fcd267, 0xca72f8ab, 0x9d1e2d47, 0x04c9dea4, 0xaae80311, 0x3ca94f46, 0x00ffa79a, 0x7bf1410d, 
    0x8a678afe, 0x3f6df0bf, 0x5c1500ff, 0x1fe0897e, 0xd196f813, 0x0e8fb4ae, 0xaaadda6a, 0xb2a78db9, 0x0e6496b1, 0x2a4b2500, 0xc7119c91, 0x00ffabb8, 
    0x793ca8f0, 0x4f4200ff, 0x53f0bf88, 0x1100ff3f, 0x0d47a65f, 0x50518285, 0xfc489e8e, 0x75dc58e6, 0x923a3949, 0xd967f3bb, 0xab5eb3df, 0x667cab77, 
    0x63fe4a7d, 0x6d757d71, 0xfe29cd33, 0x8ffc2326, 0xdb6fbac2, 0xb7f86ad3, 0xcabba5c1, 0x4be03f4e, 0x55b3bf58, 0xb3f03fb4, 0x474accad, 0xcfbd34fa, 
    0xfda76bf7, 0x8fe3ecbf, 0x38081ec5, 0x733732c9, 0xc6afe5fd, 0xcebc3821, 0x463f5d16, 0xa5bb427f, 0x4fabb718, 0x789747f3, 0xbc22e552, 0x5005d22c, 
    0x35ed9a3a, 0x8b1ae6c9, 0x9216f768, 0x890a4bdb, 0x56015925, 0x8f007952, 0x37ae29a3, 0xa96b56c1, 0xd34b9bf8, 0x6e6fca07, 0x9c04b4e1, 0xa948e601, 
    0x5e05fed7, 0x784ffbdb, 0xf84ae772, 0xa0dfade9, 0xfbbbb745, 0xb3558d38, 0xeb01d5d2, 0xcf5c00ff, 0x3ab7537a, 0x5c15da6c, 0xaa47a866, 0x9126fa6d, 
    0x6dec8527, 0x7d51cb74, 0xc6ee3279, 0x173b2748, 0x6b527ffa, 0xefd97fea, 0xc3a67ac3, 0xd121dea9, 0x798cfb74, 0x242e1e51, 0x3f85a04e, 0xcf531f70, 
    0x3c5fefa0, 0x8f4303f8, 0xb79776ed, 0x2b4de6ab, 0x4a9cd52d, 0x206554d8, 0x738c8ff9, 0x4702609c, 0xa3fa8a3c, 0x172e3ec2, 0x84708b16, 0x49a6eab4, 
    0x7c18d359, 0x1e8cd3f1, 0x60d2577a, 0x43df746d, 0x68cf73e4, 0x7d2a7be9, 0xd2813e77, 0x092008d2, 0xb7026b0c, 0x961cb4cd, 0x734fea38, 0xd8fe3e5f, 
    0x997eb2bf, 0xc300fff1, 0x87ed1a17, 0x753cadda, 0x23b769a3, 0xd1cd924c, 0x36c2de3e, 0x2c666d78, 0x8ccb500e, 0x6cee0a1e, 0xa0d7981f, 0x3635be68, 
    0x7fa518b3, 0xd938bf34, 0x3ba6d3d7, 0xee78f2d6, 0xdd5c181b, 0xeec4ca33, 0xc8c73802, 0xd30324a7, 0xfabeded3, 0x29626915, 0xf2634ff2, 0x81134757, 
    0xbad3aaaa, 0xcf8f666b, 0xae5c0c5f, 0xb434fbab, 0xf4a122c6, 0x27473789, 0xdc46080c, 0x0741ec08, 0xfeebbc22, 0x37ded209, 0x6de0c7f8, 0xd0b5435b, 
    0xb4acafae, 0xaf160916, 0x31db1121, 0x98076139, 0x20e302c4, 0x60c019ed, 0xfd19014e, 0x9cfdb909, 0xcde23d3c, 0xb3ccf346, 0x6a0b6f6b, 0xee35cb71, 
    0x499c2e9e, 0x34b3f22c, 0x42cc37bf, 0xd74ef2b6, 0x578c6704, 0xc10778a0, 0x13f80e7e, 0xc1035de1, 0x3ab0185e, 0x3c1b892e, 0x59421616, 0x9a65366e, 
    0x66e40546, 0xea31f363, 0x9f4e5f4f, 0x23c98125, 0xe3e9753a, 0xca25173e, 0x5d5ffad6, 0xfbd85b57, 0xce147fbc, 0xc0556835, 0x99af5c7c, 0x9bb6b53d, 
    0xf073adee, 0xf8f4f6d7, 0x1f6ba9ab, 0x1ebeee12, 0xd3b06618, 0xf1742dbc, 0x4726c15d, 0x1d067a9f, 0xda41d5fd, 0xc32cb887, 0xffe41586, 0xc1e7b300, 
    0x77e3435d, 0x20d3e18e, 0xb54a8b57, 0xd08dfac4, 0xcee3885c, 0x73578f02, 0x9efaa8f2, 0xfb47d780, 0x1fd2f86c, 0xbfb55f89, 0xcb620dc5, 0xb72ec173, 
    0xc92c9c2d, 0x8bc1bab0, 0x00cf3875, 0x07e759f9, 0x0f3c409e, 0x8f64bfbf, 0x1c7cf080, 0x0d6f69f8, 0xbbfd4bcc, 0xf99b8b79, 0x46a49da3, 0x72a19d9b, 
    0x85500100, 0x27cf75e0, 0x55455f83, 0x6a30cad2, 0x9b970f95, 0xa197cfea, 0x6cdcb3ed, 0x9f9f38b1, 0xf59797e8, 0x0b9ee9b9, 0x78a16bf8, 0x3a36c32f, 
    0xa64b923d, 0xd5265b5b, 0xaa72b4b6, 0xf771cebd, 0xc7929c98, 0xfe6f6b92, 0xfe33ed11, 0xfb0f757f, 0x56e3dffc, 0xe45cc81c, 0xfacb4df3, 0x7cf3e7d7, 
    0xec9672f2, 0x314e65fb, 0xf7f84856, 0x8eb66bf6, 0x1240e2db, 0x6700ff70, 0xf3fd6793, 0xc17f6fcd, 0xb3a65442, 0xfee946e0, 0x4af5e392, 0xdd047ee5, 
    0x9ffee267, 0xa76d7082, 0xec4a7efc, 0x11a2e07f, 0x1ef05463, 0x30bdfc4f, 0x6bd000ff, 0xf69fa2c5, 0xb4fe1b8c, 0x7657db67, 0xf967b770, 0x1bfcc4a3, 
    0xfc86afad, 0x72ede15d, 0xa5c53244, 0xd2b776ea, 0x2952eaa0, 0x4a7ed891, 0xda5fed6b, 0xd4ba4fc3, 0xa91643bc, 0x7d6543a4, 0x3f3ccda4, 0x5656ba66, 
    0xea429057, 0x8c23b7c0, 0x15a36e3f, 0xb485a7f1, 0x9d6feee8, 0x12021b5f, 0xe9c91901, 0x55fed48f, 0x68e2ebee, 0x8487e01f, 0xcbf615bc, 0x186d6b6b, 
    0x718df7ca, 0x5a59e698, 0xe445e6e2, 0x7c3cdbf6, 0x95b5e675, 0x23ac5e35, 0xe62d3dd5, 0xa99c2246, 0x8b8aa755, 0xd12fced2, 0x7ebd7feb, 0x7df1a423, 
    0xd7648796, 0x61df57b7, 0xc6bc89b1, 0xf384e09a, 0x27171c5f, 0x74801ea3, 0x7886571c, 0x9ed8f6c3, 0x4358193f, 0x0ddcdea0, 0x1be4d636, 0x768c99a7, 
    0x9d6102af, 0x3dc80578, 0x916c1800, 0xf57c4dce, 0xd6e377f1, 0x510ff1b1, 0xed74a6c5, 0x7844d622, 0x76c981ad, 0x4fecfc04, 0x523e9e24, 0x45f8564d, 
    0xf850abf0, 0x1f5be2eb, 0x3a91680c, 0x895c536a, 0x4a28b8e6, 0xde925bdb, 0xf4f1cf61, 0xe71c0742, 0xd78f649c, 0x96bacc32, 0x5dad9b06, 0xfdd6d67b, 
    0xf3cb8f3c, 0xba58f66c, 0xb307c39e, 0xc8d3dfeb, 0x9fe1c3fa, 0x7f8f4fc7, 0x6d673c1c, 0x93871fe1, 0x74c3595a, 0x9abee611, 0x5bd89c14, 0x72166cb1, 
    0x5fc059ec, 0xdac9b3f7, 0xf7f46b32, 0x648517e1, 0xb4845ff0, 0x5f116f6b, 0xad786b7f, 0xfe8e616d, 0xb2dacbfb, 0x315f055c, 0xc997ed80, 0xeff08aeb, 
    0x3c051f81, 0xf82afb2b, 0x452f7d7a, 0xfa6a13bf, 0x4152bca5, 0x3c013b75, 0x205c01b9, 0x6a7920e3, 0x0fabe3c4, 0xe137fa6a, 0xc2a82bdc, 0xdfa46f6e, 
    0x6e38f872, 0xea7130dd, 0xc48cd17a, 0x425dab50, 0x8f7c4982, 0x71b1540e, 0x66b52aa1, 0xf86f6fdc, 0xe7f18763, 0x7fe16fed, 0xbed7eb09, 0x63ccf010, 
    0xb639dec5, 0xf1e94b3e, 0x5b5be5cf, 0x1ce146cc, 0x56080cd7, 0x31543bc7, 0xf89a71ec, 0xfdb5f68f, 0xf0557cad, 0xf3e2fab6, 0x9df5dac4, 0xcbcbc4df, 
    0x9ff42d09, 0xca7d780b, 0x247978d9, 0xe5f60246, 0xe02c2dc9, 0xd8c63139, 0x0090c319, 0xb69fda50, 0x07bfac9d, 0x2f6f00ff, 0x33d66a00, 0xe397b635, 
    0x7886a208, 0xeda36062, 0x4c228c3b, 0x620ce20f, 0x6600ff39, 0xbb352cbf, 0x5abdcb8b, 0x9a52e3fe, 0x69429d6b, 0xb826eedd, 0x853cd262, 0x79627689, 
    0x9ee49c24, 0x56198568, 0xa29d1c94, 0x6fda5db7, 0x78ba0953, 0x57530d5a, 0xe8abad94, 0xcccb4e9a, 0x02f63ffa, 0x00ff51f8, 0xe1c5e709, 0x1ec45cae, 
    0x344140cb, 0x720dc761, 0x76fd11d9, 0x42eccf80, 0x45ead7fa, 0x89b799d5, 0x18e83e51, 0xecbff315, 0xfea9f03f, 0xd2297c1c, 0x178917f5, 0xcf8cbd54, 
    0xb4043f32, 0xba0f36a0, 0x50bf96a7, 0xef05f4d5, 0x73b72388, 0x5b12ec1d, 0xb871ea30, 0x53be627e, 0x4e2cc432, 0x16bdf221, 0xd465d487, 0x180f17d6, 
    0x9a957af5, 0x71235667, 0x7dd26c5f, 0xbe00ffa1, 0x9f539ddf, 0x4292b458, 0xf454caca, 0xda9fa925, 0xffa9deb6, 0xf28a7d00, 0xf7675739, 0x8f34a71e, 
    0xeb047e8a, 0xe8377e65, 0xdaca87b6, 0x9124d7f6, 0x6b5efdd7, 0xe000ffd8, 0x937cfaa1, 0x5500be6a, 0xf2e46620, 0xc9d7ca7d, 0x4eb300ff, 0xed2f7fa7, 
    0xad2ca111, 0xbbb7f924, 0x3c8004e7, 0xffaeaf96, 0x52a0e000, 0x0d5feb3b, 0xda8812cb, 0x0648a382, 0x4e46ae76, 0x7c2d573a, 0x5198a133, 0xfc6b778c, 
    0x5ea7aacf, 0x4f468938, 0xe5becc65, 0x80ef7816, 0x051f746e, 0xdf7af76a, 0xe1d31bc4, 0x5b5b0ddf, 0x6c97b634, 0xc2ed3d43, 0x501c6114, 0x102acd00, 
    0x00f2934a, 0x6b70efc7, 0x7c313ec1, 0xc5f8bc47, 0xfe46cde3, 0x49874acf, 0xaf585987, 0xb4d48963, 0xb04691ae, 0x3ba12311, 0x0a49e886, 0xcf298c17, 
    0xe387ae18, 0x2c9ea63e, 0xb8b463d7, 0xa7c9fe9d, 0x026f495d, 0x1cc14348, 0xbcb9a928, 0xd232b5a1, 0xb9ea0730, 0xd779c5c9, 0x173a74c5, 0x5bdb0bc7, 
    0xacd1b51b, 0xb7348ee1, 0x6288c278, 0x0a660043, 0x72010aa7, 0x89893ffd, 0xe5b15feb, 0xca863dbc, 0x591fc368, 0xa7f24973, 0xa777e567, 0xe7941fc9, 
    0x1b2bfe79, 0x12169688, 0xbfdd22b4, 0x0767fe2d, 0xd347abe2, 0x69a9517c, 0x4de645b3, 0x01b3316f, 0x08556208, 0xc2f5c155, 0x7a90d381, 0xfd4ffd0a, 
    0x58197e92, 0x05dfca7e, 0xa3d65993, 0xcfc467fb, 0x58d24018, 0x95b08de9, 0x99559b50, 0x5058ee82, 0xe5b89311, 0xd78c0b89, 0xfe085fc8, 0xc547f81f, 
    0xfcad18df, 0x3cc1ae4d, 0x75f000fe, 0x97785294, 0xec17955b, 0x1829d7b7, 0xf9844cf9, 0xf2af246b, 0xb6cbf7ae, 0x57c432ce, 0xf810fcab, 0x8d1fe2e5, 
    0xdf3511bf, 0xed61eb17, 0x1a97e5ec, 0x5a8e903e, 0x04b44ad7, 0xa7c0dba2, 0x3708000a, 0x7c7b0315, 0x3d5f93c7, 0xa59ae39d, 0xdd488b2a, 0x4fafbe5f, 
    0xe1e9ecc2, 0xac38aadc, 0x1df5707c, 0x5b767af7, 0xd3f4e6eb, 0xefbbf4cc, 0xf8577c09, 0xa8e27bdd, 0xe85c243e, 0x97a6239a, 0xd97f6822, 0xa3731736, 
    0x8907b3ce, 0x8a087941, 0x3983791c, 0x1eb87205, 0xcffe44bf, 0xd12ade57, 0xb6f8023e, 0x7d6f01ce, 0xe9099fe2, 0x2e626f0d, 0xe25e984b, 0x33312438, 
    0xbdbcdbfc, 0xa4caaff1, 0xf700a71d, 0xe289afa6, 0xc85d0c5f, 0x3137622d, 0xb4cb76c6, 0x82dec617, 0xbc9dfda2, 0xdf2c6967, 0xbe252d14, 0x326d26b5, 
    0x322bcc49, 0x82030eee, 0x86f773a5, 0xf3357eec, 0x7570b134, 0xf975bde0, 0xcb8b7f1f, 0xeafa325c, 0x362eda29, 0x99cbde4d, 0x6f56de5e, 0xf8c6fccc, 
    0x11afe2ef, 0xc2dff1cd, 0xd4213e97, 0xb6bd5a9f, 0x9abcb3bf, 0xe49f65fe, 0x346d749f, 0x59ac3431, 0x4fe146a2, 0xc3538f1f, 0x6f377cdf, 0xd7d4fe11, 
    0x6c2710fe, 0xe319e26f, 0x241fa09c, 0x983c2b4b, 0x0f08c718, 0xfedad56e, 0xb3f5bada, 0xcf865e7c, 0xdac6104e, 0x469eb16d, 0x2be1ae80, 0x746c403e, 
    0xfa3c0520, 0x0ff75a8f, 0x2d0d3f83, 0x53dbbf75, 0xe58817e2, 0xb5b16781, 0x09087548, 0xf25ec84d, 0x6ce59b24, 0x1c97ee63, 0x5fe90d75, 0xec134b47, 
    0xabd95e70, 0xf4dedf68, 0x2e7ceefc, 0xfda78463, 0xe5142aa3, 0xf99294cc, 0x63e5af25, 0x342e0dec, 0x5bcb74d0, 0x49796c14, 0xce7347ce, 0x2acef438, 
    0x25b5f69d, 0x5a5af2cd, 0x7f7dc95a, 0xbc15d931, 0xc7b95868, 0xbc5833a5, 0x7020cfda, 0xbde6c938, 0xf078f673, 0x43e93204, 0xcbf6b7c4, 0x8cecfd3d, 
    0xb7789a6d, 0x48209e7d, 0x2d383205, 0x8aedc8c9, 0x545539f8, 0x6df5aa12, 0xe8d9e6e9, 0x9d46abe2, 0x661e2937, 0x177f673f, 0xdc5d406b, 0x239d8e25, 
    0xbbcb00ff, 0xf728774c, 0xbf3423c0, 0x273eccf0, 0xbb9f00ff, 0xdffafb0f, 0x867d4dfc, 0x722064ba, 0x39529fa0, 0x83cdfea5, 0x57f98bfb, 0xd6629e72, 
    0xfb5f3ed1, 0x093f7641, 0xc11b617f, 0x8e6dfca8, 0xab0a2479, 0x7b123261, 0x913f3212, 0x6f7fadaf, 0xbb771b6b, 0x37b76cf8, 0xdbafd9d0, 0x3138dfc6, 
    0xe5235bf3, 0x0fca47f9, 0xbe023876, 0xb498fd3e, 0x7fe06bfd, 0x3cd194c6, 0x634da555, 0x1852f425, 0xdb86009f, 0x7fca9d13, 0xd7f96388, 0x50f01fd7, 
    0x57fb13dd, 0xa63e5ac2, 0xd9dfa246, 0xa3767329, 0xa11c854e, 0x461e2c54, 0x36a85076, 0xf5981bf4, 0x46d7e000, 0x2cfc9f36, 0xe9b485d3, 0xfbd43ff7, 
    0xfd310edc, 0x9b8a1846, 0x07fe3ba5, 0xfe549ec0, 0x71b3f83a, 0xf6c9a761, 0xee6e795b, 0xbecd8d6f, 0xfba924d3, 0xfaf691c9, 0xe8e40304, 0x7bcdf73a, 
    0x817fc3d7, 0xd777fc70, 0x141f34ec, 0x635aea5a, 0xea136408, 0x532cd1f6, 0xa48542dc, 0xb32d6f5b, 0xc932e683, 0x1ebb8fb8, 0x69bede31, 0xd8236bf8, 
    0xd74ebff8, 0xb3b817b5, 0xb24fa4d2, 0x366c7b4b, 0x126c9ec8, 0x3c27e641, 0x0e586eec, 0xd7603a70, 0x3c0edfd4, 0x988baa63, 0x5caa9b46, 0xdadaf85c, 
    0x5193b937, 0x12c4aed0, 0xdacb27a1, 0xfa8755ce, 0x98705097, 0x5f735ec1, 0xc7e9e1bd, 0x84ce9615, 0x9f96be5f, 0x4ce5f8a1, 0x6fbf5842, 0xefb6ee35, 
    0xf64b3cf3, 0x17cbf8ac, 0x7b4b3c89, 0x470d1fe1, 0x4ef8a56b, 0xb05664c2, 0xb9adc2d2, 0x10552096, 0xc63a8c32, 0x0d87650b, 0x2bc34823, 0xec4f1db3, 
    0x1d7be397, 0xcfa4432e, 0xc68a4228, 0xf9887f32, 0x00ff8184, 0xbecc578f, 0xf0e5d020, 0x8c35a3f6, 0xb19174e7, 0x2c044522, 0x5cd7c689, 0x703d82f3, 
    0x04014247, 0xc580a756, 0x7489c7e5, 0xa46e2de8, 0x846b96b1, 0xff636e85, 0x4e6c9600, 0x33ccaf01, 0x8c38ba2c, 0x76f2b014, 0x5df3b7b6, 0xfce1b34f, 
    0xd21c58d6, 0xdf5b9e18, 0x873e794b, 0xe7f8cbea, 0x20add351, 0x1bcac69a, 0xd90e59db, 0x64149344, 0x05201838, 0x355deb39, 0xf9c600ff, 0x97f0077c, 
    0x037dbf5a, 0x95251141, 0xf0dcc5d5, 0xa2f6495d, 0x30be1b8b, 0x055f5063, 0x45c6b9b0, 0xa8c1ef79, 0x551b34af, 0x4d53535d, 0xcbc83872, 0xe48c983d, 
    0x8ff80328, 0xee1a7fa6, 0xc9fe3dfe, 0x65edefba, 0x0fc6c2f0, 0xcfa2f80d, 0xae1657c3, 0x5d5811d7, 0x7897b75a, 0x232253fe, 0x04948d48, 0xb8b533b6, 
    0x15e3e06c, 0x136439f0, 0xbee7caad, 0x451cec87, 0x0a43a18c, 0xad5a2ae7, 0x2b7abd56, 0xf273bf2f, 0xbe59e326, 0xe2b39ef1, 0xccf9621d, 0xd2ecb7d7, 
    0xefeed9cc, 0x000e7bd0, 0x51bf821e, 0x2b2d663f, 0xe153f8cb, 0xd7b075fd, 0x628fb67a, 0x37ab9765, 0xae906e95, 0xe70fd14f, 0x2a5e9f5f, 0xbfe231f8, 
    0x1ac5f3d9, 0x213e85df, 0x3a689368, 0x159ed8c6, 0xcc1d0f93, 0xc1e67139, 0x21b29d22, 0xc1531938, 0x812038c8, 0x2dc257f7, 0xd7f05f7f, 0x41027fc1, 
    0x5fb1e9a7, 0x96e8d169, 0xd936b7fb, 0x9c749b59, 0x050ec076, 0xf972567d, 0xa2e3eca3, 0x3fee5b4d, 0xa5f9ca27, 0x5bbdda4f, 0x47d6ef4e, 0x63aa78a5, 
    0xcc726569, 0x4fc642e5, 0xf8dcbe26, 0x2f8da57d, 0xb0257ac1, 0xa0ecf2c0, 0xb0331d07, 0xb5bee657, 0xc4d76af1, 0xcda34792, 0xf7695fa7, 0x5214c973, 
    0xaa2e2189, 0x90c72aaf, 0x57585e47, 0xfe1d3fdf, 0xf657f83d, 0x2f75f86d, 0x3947fc88, 0xb6c0088e, 0x1be0d3b0, 0x6f9bbda7, 0xdc4b0cc9, 0x00e8c9f1, 
    0xe72bf024, 0xa9513ad5, 0x4a5e4909, 0xe2cc4bf6, 0xa75625cc, 0xfb752b2d, 0x1ddd54cf, 0xc7afe31b, 0x0afe7b8d, 0x5cf7f17b, 0xd3bd27d5, 0x86cff022, 
    0x6d4ee974, 0x7bb1e7f4, 0x6e3b8d97, 0x3ee69b91, 0x2bec01e0, 0x4d1efe3f, 0x00ff45fb, 0xffc26bd0, 0x3f27f800, 0xbe7b55fc, 0xd1d2a2d6, 0x8a53d638, 
    0x3725ea6a, 0x2dde0cf1, 0x3dfb1df8, 0x2b50cb78, 0x00ffac73, 0x7dba6a68, 0x2373ebcd, 0x50658684, 0xfc01a17e, 0xe0bfd82b, 0xbaf47aa6, 0x3ebdc217, 
    0x2b860c18, 0x2a12ccf9, 0x0473b049, 0xcf7312e0, 0x9cf3f253, 0x788f57fb, 0x5637c14b, 0x8537b15f, 0x9e789e25, 0x6cf146eb, 0xfb9227f2, 0xbc359587, 
    0xbff81180, 0xffb75eeb, 0xbc360500, 0xda860f86, 0x36fbbc05, 0x26f279dc, 0x16f301e2, 0xff8c0b16, 0x7b7abe00, 0x69611e57, 0x767bb867, 0xd93300ff, 
    0x96e326cb, 0xcede8455, 0x7bf9a17f, 0xf023d907, 0x4199cbdd, 0x42dc0dd4, 0xd8fdf638, 0xe7bc49b6, 0xf618ecdc, 0xaf7bb5e7, 0x8be2b3ec, 0x056b7c99, 
    0x0ecbabbd, 0x9734eba0, 0x805c5317, 0x07c006ad, 0xf0b69c2d, 0xe72be883, 0xb92578bb, 0xda282e7f, 0x28003857, 0xd40f20f5, 0xa8d7f881, 0x758d057c, 
    0x2f8d103f, 0xc3f75afb, 0x244752f7, 0x9f8eba96, 0x80cb9919, 0x75d089b9, 0xc0438242, 0xa5a7e0ce, 0x5596b77e, 0x6cab2b94, 0x78edf9d1, 0xbfc842f3, 
    0xdbdafaf1, 0xc974d655, 0xd342cdb4, 0x4ddf965d, 0xb2bbbd75, 0x6bdf3070, 0x190d449e, 0x5e4821c3, 0x8223c828, 0xafd69387, 0x15f0217c, 0x1a0bded4, 
    0xce354cf9, 0xa60561bb, 0x65b92d17, 0xa9d323c9, 0x9e798dfc, 0x78dda8b5, 0xe7c9c5f3, 0xbc196c4f, 0xdab955bb, 0x6a1c4322, 0x79726411, 0xcc928124, 
    0x5ff32449, 0xf0227c64, 0x9eba6bea, 0xc6a66781, 0xf011e17f, 0xe992f3d8, 0xbcbf85d0, 0xc81454da, 0x3b1610e5, 0x381ecbb1, 0x477cf015, 0x5093548d, 
    0x927f37d1, 0x76bb6fd9, 0xb8d14ffc, 0xca582f4b, 0xecd5a4ee, 0xef5ebdac, 0x6dfdaee4, 0x7ca34f6d, 0x91699138, 0x2a8c1845, 0xdc910417, 0xeb7d72e0, 
    0x7e85bfe8, 0x483b0222, 0x635095c3, 0x8a3a9e03, 0x9f0721f0, 0x57c65409, 0xf0b52b1d, 0xe66cb42e, 0x74382682, 0x8c135c64, 0x1cf22bf2, 0x9ad3213e, 
    0x99ed6753, 0xac380ede, 0x7a6a493b, 0x5f14fc07, 0xc78f4de0, 0xc45fd92f, 0x8d6c6977, 0x5a0b3fe2, 0x3769afc9, 0x0c91b96a, 0x8178be49, 0x4a24911c, 
    0x61a1b7eb, 0x2b2a3919, 0x5a07cfe7, 0xdbf08726, 0x964b16c3, 0xac55fa36, 0xb6013c78, 0xe37f5c14, 0xe115fab5, 0xff75f80b, 0xe6080f00, 0x790a9944, 
    0x32e04672, 0x088291b2, 0xf815413d, 0xc587f1e5, 0x0bbe127f, 0x9ef1407c, 0x47aa6391, 0x55278daa, 0x1b4bb7b8, 0x445470eb, 0xc614311b, 0x84320608, 
    0x3ffd7a0f, 0x8e5ea51c, 0x4f76701e, 0x53bf05fe, 0x9abb1cf0, 0x7b52ab8c, 0xdfda7dab, 0xfdd03ef4, 0x69177e99, 0x3c1000ff, 0x87f8a861, 0xd1214053, 
    0x6ec18067, 0xdbe4fd00, 0x8e63868b, 0x771c508a, 0x3f78b5cf, 0xfbe3f7ed, 0x1b9f886f, 0x94e5d361, 0x56f8a149, 0x4da248d6, 0xc77249fc, 0x5f0fa4f7, 
    0x53f499ba, 0xf0875eeb, 0x87f6e35f, 0x76f6a7f0, 0xe3d1f8b1, 0xd5468f17, 0xcb2b0bb5, 0x6e333c58, 0xeeeebecd, 0x0a204a39, 0x723b494e, 0xf503e149, 
    0x24829fe3, 0xe3b1a6f1, 0x1a6b78cd, 0x6db5619c, 0xb7e6e556, 0xcc075eb4, 0xfe3997c4, 0x524fec15, 0x957ca54f, 0x38f1551a, 0xc92ace89, 0xbdfba649, 
    0xf2f5bb95, 0xec05933e, 0xadd65da3, 0x2b4a9276, 0xf5bf376b, 0xdd69e4e7, 0x4ef0695f, 0x258b7ccb, 0x45f605d7, 0xd17dbc90, 0x859f8ee9, 0xa1a9fd43, 
    0x0fcf00ff, 0x00ff83fc, 0xf12aafd7, 0x3d758dbf, 0x96b7c437, 0x2de8647a, 0x0e94cf6d, 0xf7616e03, 0x61bd4f8e, 0xf1c2c27f, 0xa7fcfc1f, 0xf05ffbfd, 
    0x5b86afaf, 0xf765a778, 0x4933559c, 0xfb9bb4a9, 0x627fbe8f, 0x5fd31ecd, 0x7c8200ff, 0xf87bfef8, 0x9f35d3be, 0x794ba28a, 0x36c69c1c, 0xbf3d70db, 
    0x9d00ff78, 0x5cc17f66, 0x1f1624ae, 0x1fc3ad0c, 0x85d4ad28, 0xddefc673, 0x00ffd68c, 0x00ff27ec, 0x97f8f128, 0x646300ff, 0xb9ceca7f, 0x9f2bf8bf, 
    0x1f86affa, 0xf9efcaf5, 0x9fb85cc7, 0xf4501ff9, 0x9c3c937f, 0x6a8afc2f, 0xf600fffc, 0x084fe1d3, 0xc5934659, 0x07e63370, 0x18e720b6, 0xff41e526, 
    0xe647d000, 0x35d7a76b, 0x2eeda88b, 0x820453fc, 0x758e59d7, 0x756b8ab5, 0x8b4d2308, 0x3977a09d, 0x15097d6e, 0xee4bf8cf, 0xaffdfe47, 0x9ed694fe, 
    0x2200ffbb, 0x7ffdf715, 0xb580feaf, 0xda3d9cfa, 0x8bcfad4d, 0xd163c597, 0x3dfc0afe, 0xf58cc7d0, 0x5dd03abf, 0x0ca33b8b, 0x08e7e322, 0xf7f5f4b9, 
    0x1834b1af, 0x508d1596, 0x5000086d, 0x7ff90a3b, 0x8efccfe0, 0x00ff277e, 0xc5fcf3af, 0x7fa3477d, 0xce5fe10f, 0xa356511c, 0x2717e7cc, 0xf0537f64, 
    0xca500a8d, 0x26c5b868, 0xb99bdfd5, 0x345fe8dd, 0x45fef39c, 0x087c7a74, 0xc305832e, 0x8d3f0706, 0xfa0f9a73, 0x5dedf3cf, 0x7cfc8735, 0x75fea80f, 
    0xb368c3e2, 0x23efc6d9, 0xf2830fea, 0x71978db8, 0x6b820323, 0xdef6fbf3, 0xfd4e83b0, 0x1421f5b3, 0xd252574a, 0x556e2e6c, 0x56200df9, 0x00ff388b, 
    0x851f3472, 0x83f0fd7d, 0x57d0b7ee, 0x6fb73fc1, 0xff829efc, 0xc70ad800, 0x964300ff, 0xaea758bf, 0x87aebf54, 0x6c55edf3, 0x54d75fda, 0xbfc5af78, 
    0x78f0690e, 0xc0f0e646, 0xcc399a26, 0x5592e629, 0x0e201917, 0xadcfc0d9, 0x87846779, 0xe313bcd8, 0xcf27166f, 0x2c5b5aad, 0xc849f336, 0x14725889, 
    0xaf98fe76, 0xffc7f866, 0xef052200, 0xfd1f7efd, 0x788dd704, 0x9f48fe7b, 0xe7fa1fc4, 0x23aff217, 0x55546e22, 0x33ea53df, 0x51a276df, 0x3ece43d3, 
    0xd33bfc1f, 0x3ea16dbc, 0x5edca8a7, 0x75e7a97d, 0x03801463, 0x3c95e7d0, 0xffa56bf2, 0xe11b8500, 0xf8f900ff, 0xf2ef3fd4, 0x34f100ff, 0x1f8200ff, 
    0xfa1f25f2, 0xb5e47ff9, 0x35f515e8, 0x498d546b, 0x7c2e2d25, 0x95702a65, 0xec95b638, 0x00d9ff8f, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(ContrastNode, "Contrast", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
