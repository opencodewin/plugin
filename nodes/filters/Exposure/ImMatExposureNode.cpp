#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Exposure_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct ExposureNode final : Node
{
    BP_NODE_WITH_NAME(ExposureNode, "Exposure", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    ExposureNode(BP* blueprint): Node(blueprint) { m_Name = "Exposure"; m_HasCustomLayout = true; m_Skippable = true; }

    ~ExposureNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ExposureIn.IsLinked())
        {
            m_exposure = context.GetPinValue<float>(m_ExposureIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Exposure_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_exposure);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ExposureIn.m_ID)
        {
            m_ExposureIn.SetValue(m_exposure);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_exposure;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ExposureIn.IsLinked());
        ImGui::LumianceSelector("##slider_exposure##Exposure", ImVec2(200, 20), &val, 0.0f, -2.f, 2.f, zoom);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_exposure##Exposure")) { val = 0.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_exposure##Exposure", key, ImGui::ImCurveEdit::DIM_X, m_ExposureIn.IsLinked(), "exposure##Exposure@" + std::to_string(m_ID), -2.f, 2.f, 0.f, m_ExposureIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_exposure) { m_exposure = val; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("exposure"))
        {
            auto& val = value["exposure"];
            if (val.is_number()) 
                m_exposure = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["exposure"] = imgui_json::number(m_exposure);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue430"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ExposureIn = { this, "Exposure"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ExposureIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::Exposure_vulkan * m_filter   {nullptr};
    float m_exposure        {0.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6318;
    const unsigned int logo_data[6320/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfa003f00, 0x4bdadae6, 0x54e2ce97, 0x9eafc975, 0xb2ab6abf, 
    0x7386f7fa, 0xe6c7b9d4, 0xc77aeab5, 0x00ffa38f, 0xe1659785, 0x4012394b, 0xdc5cb296, 0x53096e3c, 0x3c38d5c6, 0xe335cf75, 0xc9e5b5bf, 0x2b3cd7b2, 
    0x522606b0, 0x7eadf831, 0x55728615, 0x3f74fde3, 0x7c1a8475, 0xf8afead2, 0x1885d79c, 0x7c6a00ff, 0x2318e5c7, 0x9336e935, 0x1d0f0682, 0x2ffccaab, 
    0x99f15278, 0xa08e2493, 0xb144aff4, 0x93c156b9, 0x4b826b64, 0x00ff45b7, 0xaabbd63f, 0xf6cc9a5f, 0xa1cb25a8, 0x0d04d7bc, 0x2aeedbd9, 0x2c49eaa2, 
    0x900cc3a9, 0x473bbd0f, 0xbabbb6be, 0x4612c907, 0xfd481470, 0x5eebf4fb, 0x42d7f0ef, 0x8800fff0, 0x683204ac, 0x9ca47c9a, 0x670596b9, 0xcb51e835, 
    0xe6375ea7, 0xb971f148, 0xbf1a3cbd, 0x47be9523, 0x0738dd83, 0xecf5312a, 0x29f19d2b, 0x874e0263, 0xca1d9164, 0xd704087d, 0xff113fd4, 0x391b6700, 
    0x3fb5a974, 0xbdb2a909, 0xd3773682, 0xdc91bc58, 0xeae52763, 0x1980ddca, 0x5a07061d, 0x97c64bf9, 0xdd2d5a57, 0x5aa89bce, 0x16eaa7c9, 0x97d6ace4, 
    0x20d75128, 0x01ac6ded, 0x4890c3da, 0x751a0419, 0x8d705570, 0xd417af36, 0x0bcf3c78, 0xc97e5399, 0xdca34bda, 0x17c20bfa, 0x1b3edb9f, 0x7e98b9b0, 
    0xb1bbc4f4, 0x8ed08aeb, 0xb81b5be2, 0xcb9f2dae, 0xa40e1696, 0x70c583fa, 0x5dbd0cbe, 0x37b6c13b, 0xf261e16e, 0x00623943, 0xd69ad403, 0x75fb5593, 
    0x5e5de8be, 0xd0910107, 0x8afa30e4, 0x8a11b1f1, 0x4d5d9293, 0xfab61d96, 0xd2fe69a6, 0x114f185e, 0xf8496f78, 0x952fa793, 0xea59a222, 0xa18c1371, 
    0x3dc3a862, 0xee2bb94a, 0xce577a18, 0xc6f12e5e, 0xc2eff09b, 0xd523be77, 0x6f67d3fc, 0x5ca04884, 0xddb7b2bc, 0xdc93e941, 0xafe92bf0, 0xd145fc07, 
    0x6ba203fc, 0xdd97f0df, 0x4e785bda, 0xdb0d696b, 0xc590ccdf, 0xdc6ca49d, 0x7c5c2ee4, 0x48321280, 0x89cfc7af, 0xf8b83e1e, 0x432de38f, 0xe9d0cc57, 
    0x97ae3ba9, 0xec672b63, 0x76bfbbb6, 0x6e5b70bc, 0xe6dccddd, 0x85018fbe, 0x6f538259, 0xff7af145, 0x00ffc100, 0xe32ae433, 0xe1739325, 0xc15abb52, 
    0xe9efb3f4, 0xebd499b7, 0xc5efb43f, 0xb954473d, 0x5bfcd2b9, 0xc66ef8a9, 0x9b1e2d47, 0xe198dca5, 0x9f3b7d88, 0x4b357952, 0xe3471afe, 0x9f14fd17, 
    0x73e07f12, 0x16718d7f, 0x46f1099e, 0xd3ba11b9, 0xeaaf2dbc, 0xd32a16f0, 0xb76cdae9, 0xa80eab11, 0x0e034659, 0x54643b32, 0xacf000ff, 0x00ff6f7c, 
    0xbf8b0f42, 0xff3747f0, 0x645f1300, 0xaca2f4b0, 0xe503bfa2, 0x9dbc32de, 0xbacf9ddc, 0x176a033e, 0x37c58f3a, 0xcf94bcbf, 0x2b6f717b, 0x23fe29cb, 
    0x6f957ffe, 0x1325d9fe, 0x2c149ec4, 0x0448cc7a, 0xf8cb8afb, 0xf03f040d, 0xae3121b0, 0xefe4d13f, 0xb6df5bed, 0xe26ba49d, 0x641c080f, 0x757f4f99, 
    0xa294ccaf, 0xfacb8ab1, 0x7a563fb3, 0x9fbda738, 0xc3038ee6, 0xd11d0977, 0x0e147066, 0xf36ad6b5, 0x4b9b2f4a, 0x794bda9e, 0x2cf25022, 0xd4036b83, 
    0x1a843e02, 0x6c273ce5, 0x9ffefab7, 0x77373860, 0x4f025b31, 0xfe853b1f, 0xb45febb5, 0x9d3e8306, 0xbc557bf1, 0xcf0dab40, 0x67431190, 0x77d05dfe, 
    0xd67000ff, 0xd964aead, 0xcd386ab4, 0x7f535d51, 0x24f54b73, 0xbd9df5f0, 0xbabbb085, 0x20757795, 0xe95fec9c, 0xafd700ff, 0x680a3ea2, 0xa843815a, 
    0xacd2a15c, 0x5700ffe6, 0xd7991819, 0xdd4f21a8, 0xe8f3d407, 0x7889d73b, 0xb44f4833, 0x8fdd5d5b, 0x6e195932, 0xf253636d, 0xf60e52a9, 0x9281e9f7, 
    0xd157e439, 0x32f11a5e, 0x29b36acf, 0xf25d282d, 0xcf472f33, 0xe9753b1d, 0xb583415f, 0x980f7dd3, 0x3fdd39ce, 0xb0a70e67, 0x311cc75a, 0x60048d05, 
    0xfbd481f3, 0x295e539f, 0xcefe4efb, 0x7c191f96, 0x67af363f, 0xbff8dbe7, 0x699cb14b, 0x82ea6cef, 0x453382ed, 0x7e60296f, 0xe0392643, 0xc983cd8d, 
    0xf14bf3ae, 0x972f914f, 0xcfdd6f23, 0xe261addc, 0x63632d98, 0x4e8c3c3b, 0xe83e11e0, 0xeb6f073d, 0x941a655f, 0x7b96c3ab, 0x3c7b9b1f, 0xa9a21246, 
    0x8a8fa60b, 0x35703d3c, 0x63a6802f, 0x63fa5011, 0x201824e5, 0x760439ec, 0xf38ae720, 0x5307d83f, 0xcfc56ff1, 0x3cbaea03, 0xdddd355a, 0x862183ae, 
    0xb251622d, 0x44925cde, 0x67384642, 0x0067e05e, 0xf735e38c, 0xddc0d755, 0xd737c417, 0x87665b42, 0x24e9f7c3, 0xe14256b7, 0xac34c983, 0x903c27cd, 
    0x61f4b8ad, 0xea8af18c, 0xefe00dfc, 0xf01a7c0b, 0xefe085a6, 0x271dd90d, 0xde06b644, 0x2c4bccc2, 0x114b06fb, 0x3c6646be, 0xd613cb93, 0x930967be, 
    0x71ac46a9, 0x6bf40d5f, 0xf6a91bfe, 0x9422be38, 0x35784e65, 0x3ddd59ef, 0x2b9fb6b5, 0xb75f8e1f, 0x430dc507, 0xee123fc4, 0xa5981ebe, 0x317cd2b2, 
    0x17f65270, 0xd8173718, 0xaabab704, 0xc9f71490, 0x37afa823, 0x0e3e9ffd, 0xf161fcdf, 0x718cbded, 0x609669b2, 0x41176a5c, 0x85338d38, 0x78ccea41, 
    0xbf9ad803, 0xb27860fb, 0xb5bf883f, 0x429dc44f, 0x73c132c7, 0x3b8c35ae, 0xb37f6197, 0x27f4dbaa, 0x278f988c, 0xed38411d, 0xb1ecc7f7, 0x830f3ef0, 
    0x2d0e00ff, 0x754066ed, 0x9bf6a39b, 0x917692f9, 0x78c17e5a, 0x17520500, 0xadd7eb81, 0xf254b37a, 0xbab41cea, 0x5479e66d, 0xac3557e5, 0xfff957eb, 
    0x3df29200, 0x029ec223, 0xa02bfcd1, 0x8b76e959, 0xba059f2e, 0x5bed6d61, 0x9c73af6a, 0x24796275, 0xff6b4df2, 0x7fd86100, 0xfdefddcf, 0x972b35fd, 
    0xfca6792c, 0x7c72f2f5, 0xb37b72f2, 0x561214e8, 0xe07ff948, 0xfe76bc3d, 0x3f8cc33a, 0x2e7ffb90, 0xddf6536b, 0xe0abdefd, 0xfa6f27c6, 0x6bd50f4b, 
    0xc60de107, 0x60d9277e, 0xf19bb7f5, 0xfda46bf9, 0xa8dda0b8, 0x18273378, 0x95be3dba, 0xadbfa8e1, 0x3ea3ebaf, 0xe9b4abb2, 0x1ecd3ffa, 0x587de153, 
    0xd1253e68, 0x24537735, 0x6da17e5a, 0xa58e2279, 0x875d9523, 0xafbea6e4, 0xae6ca3fd, 0xf5a8b52f, 0x4b2b360d, 0x63593abd, 0x525627f2, 0x5627e2ac, 
    0x9b1db91b, 0xfc96aff2, 0xde93603b, 0x086d7c30, 0x3d392378, 0x81bdc63f, 0xc24fd835, 0x53f80d4f, 0x064150ed, 0xa37b6496, 0xc82a2939, 0x9fe3ced3, 
    0xc747b34d, 0x257b74bd, 0xd563a452, 0x09af093d, 0x4c0cab53, 0xf48bb376, 0xfcf0df7a, 0xf6c41f49, 0xbaa1459a, 0x25fbbcb8, 0x4b7b67a4, 0x3ee6db39, 
    0x424f2c38, 0x8a830e7b, 0x7e16aff1, 0xe26f8dd7, 0x1e6d1bfb, 0x046571ee, 0x525aeedb, 0x1368b763, 0x5b80e30c, 0x30002007, 0x35cf61d9, 0x7e17bfe0, 
    0x333e6b39, 0x7fd990bc, 0xb24bbbc4, 0x80632992, 0x86e565f2, 0x3bc9794e, 0xe49ed346, 0xf7f0417b, 0xf1a18ee1, 0xbcd35baf, 0xb207a135, 0x17bbe5d4, 
    0xa40a1757, 0x63666b8b, 0x0e4790e6, 0x38400849, 0x03e471e7, 0xec72d48f, 0x371d2c05, 0xbcf7ba5a, 0x011f79fa, 0x11cf6699, 0x7a86633f, 0x3cfdbd3e, 
    0x13fca68f, 0x67e38bf1, 0xdb14dfc5, 0x12c05f78, 0xc9add959, 0xbabde78d, 0x1bf64d84, 0x6dc92d76, 0x2f8074e7, 0x9c3ce74c, 0x2bf46b0e, 0x258797e1, 
    0x7486aff0, 0xf0767d9b, 0x5b247e6a, 0xf0fa9268, 0x9c64b547, 0x3260ef2a, 0xe3640b70, 0xfc915724, 0xe14ff81c, 0x43cbd9df, 0xafd24e97, 0xfe4add3c, 
    0x992bda08, 0xe4d279d8, 0x8ca37005, 0x3849b181, 0x7bb547ea, 0x5e94828f, 0x6dba67c2, 0x6f38b6f3, 0x3835f5e7, 0x566ad4aa, 0x4792a251, 0x15623889, 
    0xaea45217, 0xf19063af, 0xe123ed9f, 0xeb0f00ff, 0xd0197e57, 0xc5977810, 0x7bcae7b6, 0xe0f2e618, 0x12325286, 0x4e218859, 0x3d86c239, 0x1f5f338e, 
    0xb57fd47e, 0x173e8837, 0xd6daca5d, 0xf17767b3, 0x48c6f622, 0xe80dbff4, 0x42cfc2cc, 0xe5054247, 0x92b49ccb, 0x19c7c48d, 0xc0e627c0, 0xf6536700, 
    0x857f92b2, 0xc397b67f, 0x7c49ebeb, 0xc8c52b8d, 0x1889e72d, 0x284ffa2f, 0x9deb01b2, 0xfc0afb9c, 0xdd1af1d2, 0x77a9ceb5, 0x3ad73ca9, 0x86e4dd9d, 
    0x2d76e6e2, 0xbce3be23, 0xbf274992, 0x734ac25a, 0x57f45d94, 0xd24cf3ba, 0xa5d1e914, 0x5bb9ab68, 0x3db6265f, 0xf809f6fb, 0x0900ff55, 0xadb1c47f, 
    0xcf96a8dc, 0x19f14d43, 0xb6dc7706, 0xdaf71c42, 0xe2fb9ca1, 0x2d6e4bbf, 0x27aa114c, 0x0f5e3140, 0x307c1bfb, 0x0b5f877f, 0x23999b34, 0x62eed455, 
    0xe056a7f3, 0x20069097, 0xbbba00ff, 0xee35f017, 0x70dc7a57, 0x17ea8eb1, 0xbc7f8781, 0xfcf93a3f, 0x566d5f65, 0xeea1edc9, 0x49a352e1, 0xb952d725, 
    0xb8919495, 0xcf93c68f, 0xce1fef7f, 0x5baa4bab, 0x65652149, 0xd41d7a2a, 0x3d18edcf, 0x15fafe57, 0x7f76d9e7, 0xcfccd971, 0xeb0f3e93, 0xe92f7e25, 
    0xc3cba736, 0x8e1cdcdb, 0xd46b26bc, 0x29fb6d3f, 0x147cd424, 0xcfcd40aa, 0xe62b727f, 0x9d9a80af, 0xf41f9ff4, 0x4e32e448, 0x4b74cb3e, 0xbbbf9060, 
    0x3b7d953f, 0xcd486bfb, 0x9008f8aa, 0x2bfab542, 0xb9da1938, 0xd6e53519, 0x626228a3, 0x38faec96, 0x09a755d4, 0xd1efbd3d, 0x1be1619e, 0xd7c117dd, 
    0x8ed79af7, 0xe185ce2e, 0x96765beb, 0xef9de8de, 0x61143277, 0xcd80501c, 0x9f4a902a, 0x671c37ba, 0xf12b5e83, 0x9f57c73b, 0xa877bc13, 0x90695a5d, 
    0xcbea70e9, 0x6344f21d, 0x1c8b2c2d, 0x64f3016b, 0x11734342, 0xa8e885c2, 0xa22bc673, 0x1f79aff8, 0xed78358a, 0xb566252e, 0x6278b9b1, 0x141a428e, 
    0xbce50289, 0xbb2485a1, 0x2bc77300, 0x98579c9c, 0xffb8527c, 0xe37f8400, 0xb6bdd5ad, 0x6587fda3, 0x4ea45114, 0x71bcad4a, 0x8a1d0318, 0x09195c7e, 
    0xbbc5fbe7, 0x7ed9ebd7, 0x68cb8747, 0x73591bc7, 0xf367db49, 0xcef9a17f, 0x31e29c6b, 0xe0618978, 0x8fdd14ed, 0xb5f3f13b, 0x6d35898f, 0xbdd8e21e, 
    0x00ffbccd, 0x58ed5863, 0x81d44866, 0xc4c1d616, 0x840e2a9f, 0x2b00c410, 0x60f6dff4, 0xfb6f75f8, 0x5d267c38, 0xf3025957, 0xa18a1fe2, 0x09ec6df3, 
    0xc208b453, 0xe56e27a9, 0x72324689, 0x19e3c472, 0xf09f7cc5, 0x00ffe1d7, 0xf15f7c84, 0xeb141faa, 0x823fc931, 0x1b61173c, 0x9d599378, 0xb797ec13, 
    0x32688388, 0x1989e513, 0xc1bd01b7, 0xc9b8f266, 0x03bfea35, 0xdf6b343e, 0xac577c1a, 0x5959bf78, 0x666ead2d, 0x72d24927, 0xd02e8d7c, 0x89b74431, 
    0x05840378, 0x64730388, 0x6c73f09a, 0xad29b977, 0xd5d9fc9b, 0x11abe592, 0xbb098d8b, 0xbfecf4ee, 0xf4bc6fcf, 0xf133bc59, 0xcfd5e23f, 0xfdf16289, 
    0x32a589ce, 0x379aeee9, 0xd48d55f6, 0x3709d3aa, 0x10f232c6, 0xea78e391, 0xaff5c808, 0x772bf872, 0xe0234de2, 0x212d89cf, 0x97785d30, 0x415b9ac3, 
    0x98376e66, 0xfc85745a, 0x77bb71b6, 0xe517b997, 0x80d30e52, 0x88a7d27b, 0x0c176810, 0x89ce8c20, 0xec469bc4, 0x2f2ae86d, 0xb6289e82, 0xdb1f5f96, 
    0x4c6e7749, 0x89292fb6, 0x00831b65, 0xd73382c0, 0x960aafe6, 0x2bda1e22, 0xf5915fd7, 0xfa13acd8, 0x91966495, 0xdedeb271, 0xadbcbdf2, 0xe3aff373, 
    0x47fc88a7, 0xc1cbf171, 0xff5eaeaf, 0x6fcd6a00, 0xc9de59a8, 0x0293c8a8, 0xa69501b7, 0x16233386, 0x1fe02931, 0xedb8d6e7, 0xe24dc04f, 0x6f8ada2f, 
    0x5fc4ee08, 0xa3fd93db, 0x62a40468, 0x3a307956, 0x8a03a370, 0x5f6cbfeb, 0xc527db11, 0x016b7b6b, 0x59a4c912, 0x0eade43d, 0x3723cbdd, 0x081d1bca, 
    0x117b1e00, 0xf0c95eeb, 0x1abce18b, 0xf18deda7, 0xdb73c407, 0x4770d6f9, 0xb2b3ed05, 0x51d74216, 0x636b8724, 0x3b0e031d, 0x1846af31, 0x7587678f, 
    0xf3d96d2d, 0x163cdcb8, 0xba83d331, 0x1fb92f4d, 0xbae8e956, 0x686f9f36, 0xf35a1e87, 0x38ce539f, 0xbd5bd5fa, 0x5bbce759, 0xbb776b6b, 0x8eed94bc, 
    0x63b1d408, 0xa7664a8f, 0x0c678675, 0x5eeb1907, 0xc157f091, 0xfd9db6f0, 0x9a007bbd, 0xb7c9edf2, 0x987c2633, 0x47ae00c7, 0x1d39b905, 0xe6345fb1, 
    0xd5a35aa9, 0x8995f9b7, 0x72701aab, 0x083e0867, 0x1f5597f8, 0xec6c9969, 0x8be5bf5d, 0xbe07724a, 0xffa51901, 0xd77f8600, 0xe6e700ff, 0x37fefecb, 
    0x5f1300ff, 0xc7340b4b, 0x45ea1320, 0xfe23d92f, 0xdc55feea, 0x1fd9bdbe, 0xd8d7f539, 0x8afd75fc, 0x8fed3ff5, 0x2479468b, 0x44c61250, 0x8fe4c43e, 
    0xffe96be4, 0xce2adb00, 0x047ceedd, 0x5a9117b7, 0xdf2eb70f, 0x1bf33134, 0xa0e3e523, 0x0a3cde3f, 0x67f643f9, 0x82af75d2, 0x818e163f, 0xed399de2, 
    0x6b57505b, 0xae725579, 0x83242656, 0xa5be62dc, 0xd474b9fd, 0x9f96f0ba, 0xfc6f4aab, 0x8b3b22bd, 0xc297f8df, 0x19d91492, 0x805cce6d, 0x19f436aa, 
    0x1a1cd863, 0xfd15bdc6, 0x3e561aa3, 0xfd2786e6, 0xd1e5159e, 0x8100ff4a, 0xfcef9ff1, 0x7b42f167, 0xd036260b, 0xa6f7cc35, 0xe9aedce6, 0x23b2f950, 
    0x1d54d9e3, 0xde73069d, 0xdfc18bbd, 0x37fe6c04, 0x2f7a166b, 0x6cafac89, 0x71eb928f, 0xc712c1a9, 0x5a28c435, 0x7228b745, 0x6419ef47, 0x3e0807ce, 
    0xc3dff3b5, 0xf123a99b, 0x1be2953e, 0xd2b4b8a6, 0x6758616e, 0xf10e85ba, 0x89f040e7, 0x0c63d713, 0x49061db0, 0xcff43518, 0xa8517c81, 0x1a16e289, 
    0x2c1ed784, 0x2f791a81, 0x0c917bb4, 0x82d9498a, 0xa9fe11c4, 0x60dc7d94, 0xb85f738e, 0x461ca752, 0xfd605406, 0x67ca8fe4, 0xed15475d, 0xf06cb3a5, 
    0xe297daaf, 0xf1237efc, 0xf013de2c, 0x1ed676fc, 0x3d9eb116, 0x51699af6, 0xdbc4d36e, 0xf9a83c56, 0xe65b30d6, 0xec8c341c, 0xcf8e0938, 0x55f15cf6, 
    0xf60f979e, 0x79aab24c, 0xdf8f617e, 0x7ec0ccf7, 0xf8335f4d, 0xf872c397, 0x652c595e, 0xb9c1f360, 0x5d21a0cb, 0x5047280b, 0xf08c0079, 0xd4110479, 
    0x7e80c756, 0xe9af75dd, 0xcb5cf0d6, 0x0bd73463, 0xac8bbc00, 0x771c7a4e, 0x5fef38e8, 0x37386696, 0x37a98c52, 0xed335fb7, 0xc27b4cf2, 0xd75ee1e2, 
    0xf4534fbf, 0x7d5bbcd5, 0x960c6d63, 0x5b5db196, 0xf926dbb9, 0x30f0b24a, 0xd673da40, 0x8c1f35b7, 0x867fe00d, 0x36a5ce1a, 0x10aca38d, 0xdddc5cd9, 
    0x9bc30d4d, 0x67632d8f, 0x2f000523, 0xf55cd882, 0x2cfcc615, 0xb647eb86, 0x0475d455, 0x3e3216d6, 0x9311b566, 0x7dea81f2, 0xe9f8a62b, 0x1f6b32fb, 
    0x7bc3e7b4, 0xc40b4d5b, 0x961efe96, 0xced66907, 0xbb94dce2, 0xc6a2533e, 0x5294adee, 0x3ced045b, 0x15e3e01c, 0xde0898f3, 0xd0b7b9a5, 0x13effcfb, 
    0x29078d42, 0xfa5ddb53, 0x795f56f4, 0xa96d73f9, 0x50ef78df, 0x7ab14ef1, 0xa6ba974c, 0x63cb9164, 0x3d80db1b, 0x2d7b0087, 0xcefe927e, 0x18be25b6, 
    0x905b7f78, 0x69aa7703, 0x9d2c4d36, 0x48e09858, 0x04fc4f86, 0xff57c3d7, 0x49fc0900, 0xdac43ff0, 0x757c86f7, 0xeaa14ba3, 0x036820a5, 0xc35cf190, 
    0x09320ff3, 0xe722cb07, 0x7890838c, 0xda573c38, 0x8db50b3f, 0x09dfc363, 0x8505197c, 0x11765784, 0x3b75f068, 0xfc726264, 0x5718c676, 0xc35b8fb3, 
    0xc067f4cf, 0x3e959b60, 0xeaebba7e, 0x52c4fbce, 0xd9496b9b, 0x9e50019b, 0xe0577d4d, 0xfe693ced, 0x18a0d218, 0x1c622d1b, 0xbe82fb74, 0x25bed516, 
    0x9aaeeb5b, 0x9637d664, 0x71bc3257, 0xc02d1ec8, 0x20539107, 0xafb0bc8e, 0x7c317eb0, 0xc0e7f065, 0xaec9038f, 0xe198f3eb, 0x6567414c, 0xdc3ddd08, 
    0x8962f9d8, 0x7b329e7b, 0x0a3c0900, 0x42698ce1, 0x6af59c71, 0xe68900ff, 0xa752a5e3, 0x3d753b2d, 0xb9517213, 0x56eff22b, 0x38febffd, 0xdef2776b, 
    0xafe147d8, 0x49cad80c, 0xc59a4e83, 0x338da4ee, 0x8d0b79c1, 0x01e07bcc, 0xe100ff54, 0xff3d7eba, 0xc273d000, 0x7f26f8df, 0xaf5e39fe, 0xf8659fd6, 
    0xbbaaac18, 0x14f99ffe, 0x714f3c6d, 0x9f824fe3, 0x6f8cdfb3, 0xd36a5c76, 0xdddadfdd, 0xe25c9edd, 0xff0170da, 0x7a05be00, 0x2f14fcbf, 0xe11f7d59, 
    0x93114552, 0x0c2fbdca, 0x8cd93782, 0xe4c938c1, 0x773c1967, 0x806779cd, 0xe177033c, 0xe3d800ff, 0x5d5d70c2, 0xa2777145, 0x597792f8, 0xe5183c21, 
    0xe9114c86, 0x5a00fff7, 0xf800fff4, 0x51c46d28, 0xb7b033fc, 0x8a276697, 0x0071d7e1, 0x2e5c58ef, 0xaef9fe33, 0x9bbd6f4c, 0xfdaa6bd1, 0x6560e919, 
    0x269c80cb, 0x0ffd72f6, 0xd009ebcd, 0x7fe25678, 0xb7ec4539, 0x8e50acb0, 0xe4083044, 0x98f79f24, 0x0edc9122, 0xfebb577b, 0x97307ecc, 0xb20df154, 
    0xd7d679db, 0x4dd22cb2, 0x8620f73c, 0xadde2e84, 0x47e19d9c, 0xcf577bd0, 0xdf534cfa, 0xb42290b4, 0x83a14e97, 0xe0369c01, 0x07e840aa, 0xf45a1f38, 
    0xd25680ef, 0x96a65fdf, 0x3b7cef6f, 0x5ab2a42b, 0x9629d9df, 0x8919e34d, 0x2addc7e3, 0x50076e24, 0xe9d7d4a7, 0x1a477df9, 0xf1b174a9, 0x7434d715, 
    0xd377fc2f, 0x4b75d6a2, 0xebdbb429, 0x74686a4d, 0xbabd63d9, 0xb70a60b4, 0x3096a5da, 0x296548e8, 0x4710220b, 0xb59e3c55, 0x00ffe06b, 0xbc2eef82, 
    0x50e77514, 0xb15bef1a, 0x930bd38a, 0x473248f2, 0xbcca9fd7, 0x2fd65e9f, 0x43fc23fe, 0x044db236, 0x37b4954b, 0xc3900840, 0x6624c817, 0x928158ea, 
    0xbe26c9cd, 0xa259f8ca, 0xe8dfac47, 0x67647a96, 0x0f5f11fe, 0x64b9f4ae, 0xb66e6f21, 0xf53c06ed, 0xec8e0544, 0xa5e3b160, 0xe29e7d7e, 0x74949cd2, 
    0xffeedf4d, 0x877e3600, 0x5e2578c3, 0xb257f27c, 0x7e7df5b2, 0x8500ff4a, 0x43e73db5, 0x3412ec58, 0x644b1508, 0x1d3875e0, 0x3edceb7d, 0x259f6b1d, 
    0x008861b4, 0xd4f11ca0, 0x5eac8c57, 0x5127646c, 0xf8d5958e, 0xb2365543, 0xca701bc3, 0xd7fb3aca, 0xe9aed0c0, 0xf43329cd, 0x1c0ddbac, 0x3a92064d, 
    0xe0dfdb4f, 0x7f183fcc, 0x4f12af66, 0x253e006b, 0x9aace5f0, 0xa37291d6, 0x21f18af7, 0xae072269, 0xed328c24, 0xfcc34ee8, 0xc29fbc22, 0x78a4a9f6, 
    0x8bf6c30f, 0x6dd36092, 0x31c603d0, 0x4a3fae12, 0xf7c347fb, 0x301a6b71, 0x42651559, 0x194724bb, 0x47e8080c, 0x607e4570, 0x2ff1527c, 0xf814fe8f, 
    0x6d5ac5c7, 0xa71ea18e, 0x4fa89dfd, 0xc35e590a, 0xb361f9f2, 0x0172dc16, 0x6b7d8442, 0xd5c971ef, 0x36a446a7, 0x4ffdd27f, 0x540eb0c7, 0xba27adfd, 
    0x7de89ffe, 0xc01ff053, 0xf1325e16, 0x7eb5f635, 0xe5d2cb83, 0x0308c388, 0x833b97e7, 0x8e36e813, 0xbcdae73b, 0xf1caf673, 0xfe8dbf85, 0x2b65432c, 
    0x0d9f3489, 0xbb44badb, 0x38867bb8, 0xd1eb8190, 0x6b7dec33, 0xf153f8b3, 0x77f84bb7, 0xe2c716f0, 0x74558bbf, 0xcefa525d, 0xecf014e6, 0x2eee590c, 
    0xaaaa4252, 0x733bb13a, 0xbe1a8a9e, 0xd52c1e3a, 0x2eab677c, 0x3f46a9a9, 0x872b35b5, 0xe9551b9a, 0xcf7127c9, 0x927bec65, 0xaa20e66b, 0xc1c92b62, 
    0xe7a7cd5a, 0xf76c7ed1, 0xaa11aab0, 0x49bbd5ea, 0x7faf3e5a, 0xb9d2cceb, 0x628ab2bc, 0x5cb288b7, 0x796c5b70, 0x3a7dd803, 0x1ada7f54, 0xfff1fc47, 
    0xfd5fc800, 0x1b0ff37a, 0xd358c378, 0x6b7345bc, 0xd90f49a5, 0x6079c420, 0x781f9618, 0x17d6fbe4, 0x2a9e27fc, 0x909e00ff, 0xfe2bdf7f, 0x0f4bf415, 
    0x1246b514, 0xcfeecec6, 0xfdd03ef0, 0xf1606c90, 0xe23dec07, 0xfbf49beb, 0x21def644, 0x9cd88545, 0xc0401ea0, 0x3abf1dfc, 0x8200ffc4, 0x9ac85ca7, 
    0x70bbc33f, 0x932445c4, 0xe1f55c96, 0xb15f7445, 0xa798fc3f, 0xec00ff8d, 0xb6fd5f63, 0x0afe63ae, 0x1e00ffa1, 0x00ff0d3f, 0x00ff9fdf, 0xfe57a565, 
    0x3f3df446, 0x6f387946, 0xaf9e0af7, 0x3e6d00ff, 0x9fd6f048, 0xc0bd3d0a, 0xb557250c, 0xdec706c3, 0xfff45cba, 0x667e7000, 0xea107fba, 0x57d616d7, 
    0xad80277e, 0xab1cb1be, 0x28d11c6b, 0xe442885d, 0x9e9c3b00, 0xf860cd7d, 0x5f44fd73, 0x00ffd9ef, 0x786955e9, 0x1b44fe9f, 0xfdfa00ff, 0x6b05fd4f, 
    0x0b69b8f4, 0xf1e7e4a3, 0x35f8af33, 0xb541dff0, 0x2488c7f1, 0x2477317b, 0x4d1c8d17, 0x53ecf373, 0xf5f98183, 0x685a5feb, 0x042ab1e8, 0x0080421b, 
    0x3fe7ab1d, 0x39f2df84, 0xbffe9ff8, 0xd7a200ff, 0x415fbad1, 0xdef357f8, 0xb3a45677, 0xd9c9a90a, 0xbcd11f3b, 0x729c4a39, 0x6a452dda, 0x1c69d791, 
    0xd86ecdc9, 0x0872abc6, 0x3f073918, 0xff68618d, 0x7e6beb00, 0x073efecb, 0x762c57d4, 0x762b5e47, 0xd2f0037d, 0x92ba3046, 0x8bafc048, 0x0b6b00ff, 
    0x6abf6c38, 0x601cd16b, 0x679bfead, 0x86dcea3c, 0xff79347c, 0x5163be00, 0xdfd957f8, 0x3fd53f0d, 0xffc657d0, 0xfcdfb500, 0xf67f349d, 0x00ffb307, 
    0xd1afe5d0, 0x2200ffe3, 0x3f74fde5, 0x32f27f18, 0xf2d8f597, 0x157a89cf, 0xb8195e8c, 0x650930ba, 0xe6498c49, 0x645c841c, 0x1c673b80, 0x6ff89cd7, 
    0x3ec20ffd, 0xfc32f12e, 0xbab5b5fa, 0xc8af0cc7, 0x01e4488d, 0xad00ffdb, 0x47f1ab5e, 0xbfbb44fe, 0xfa3ffafa, 0xd12aaf09, 0x91e400ff, 0xb9fedff8, 
    0x23aff2a7, 0xbbd26d29, 0x71267dee, 0x7649d4ee, 0xefe1db3c, 0xc737edc3, 0xb61a1e5e, 0x5edb35a9, 0x6886334b, 0x7e0fdaa6, 0x97aef798, 0x876f14fe, 
    0xffade77f, 0x7f04fe00, 0x067ea9f5, 0x0f85c87f, 0xe97f77fd, 0xdb5e835e, 0x8f349f7a, 0x0000d9ff, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(ExposureNode, "Exposure", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
