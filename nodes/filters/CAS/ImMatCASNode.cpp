#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "CAS_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct CasNode final : Node
{
    BP_NODE_WITH_NAME(CasNode, "CAS Sharpen", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Enhance")
    CasNode(BP* blueprint): Node(blueprint) { m_Name = "CAS Sharpen"; m_HasCustomLayout = true; m_Skippable = true; }
    ~CasNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_StrengthIn.IsLinked())
        {
            m_strength = context.GetPinValue<float>(m_StrengthIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::CAS_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_strength);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_StrengthIn.m_ID)
        {
            m_StrengthIn.SetValue(m_strength);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _strength = m_strength;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_StrengthIn.IsLinked());
        ImGui::SliderFloat("Strength##CAS", &_strength, 0, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_strength##CAS")) { _strength = 0.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_strength##CAS", key, ImGui::ImCurveEdit::DIM_X, m_StrengthIn.IsLinked(), "strength##CAS@" + std::to_string(m_ID), 0.f, 1.f, 0.9f, m_StrengthIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_strength != m_strength) { m_strength = _strength; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("strength"))
        {
            auto& val = value["strength"];
            if (val.is_number()) 
                m_strength = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["strength"] = imgui_json::number(m_strength);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3e9"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_StrengthIn = { this, "Strength"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_StrengthIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_strength        {0};
    ImGui::CAS_vulkan * m_filter {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 7729;
    const unsigned int logo_data[7732/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0xe33e2d4b, 0xb2dab857, 0xe572223b, 0x712438db, 
    0xf3f99a81, 0x12babbf6, 0xebe19f78, 0x5f731748, 0x018ec126, 0x35d72bde, 0xdf461acf, 0x038f3416, 0x21194cd9, 0xf6f29ab3, 0xdf192448, 0x320e1580, 
    0x0c8b2557, 0xffe215f6, 0xcf8db600, 0xf0417cd8, 0x461691e9, 0x130c6afb, 0x46e00e82, 0x1cf2eb3d, 0x7abc6a2a, 0x5fbe7e37, 0x3dfba9d7, 0x520e466b, 
    0xf0cc587a, 0x1df174d9, 0x8ab890c1, 0x2b535715, 0x96536597, 0x6e965b62, 0xc5e9c99d, 0xa6727677, 0xacb216c4, 0x07269690, 0x1c1b5019, 0xe29f808e, 
    0x5ee99fe4, 0x9b5fa477, 0xe2fa5a0d, 0x08b20468, 0x7fb696cb, 0xdac16833, 0xe5012a17, 0x9f3bdc79, 0x2dcd7b4e, 0xa5a9dffe, 0xb34ee3b4, 0xbaa40546, 
    0x6ac75c9d, 0x0ccc70a0, 0x13b60083, 0x1c645e39, 0xa5aa879e, 0x7ffaecd4, 0x77e8bfc0, 0xef424952, 0xf5bfe5b7, 0xde1a6be7, 0xcd4c9569, 0xb950b721, 
    0xb09c2333, 0x00062e00, 0x3b067020, 0xb557cdf7, 0x92d3febf, 0xe99258de, 0x9b243a4b, 0x77cebdfc, 0xe0414e00, 0x4dc701e0, 0xd224f5a0, 0xd44ca769, 
    0xe9d060b5, 0xe48152a3, 0xbb650b8a, 0x9a671eb8, 0x311b89ef, 0x06188922, 0x738fab42, 0x73bde29c, 0xe195cee1, 0x20e913df, 0x0ee90e1f, 0x13e53b24, 
    0x39d2c6d8, 0x3d07493d, 0x713cd771, 0x80a5ee8a, 0xa4a6689d, 0xfbf2f695, 0xbf7ddfda, 0xbc38f9cd, 0x2d1a9eca, 0x4f6f37a8, 0xf6fd7bbb, 0x796e3cf2, 
    0x5aae8962, 0xf98cc40c, 0x310c40c9, 0xcb68cc16, 0x3f8c0496, 0xabfd3d23, 0x4e57c617, 0xd6b73a7c, 0xda5279d2, 0xef9fcae7, 0xecb60372, 0xdb937161, 
    0x9fe82bb6, 0x76cf7e19, 0xeaf2d97f, 0x3b820b7e, 0x37de461d, 0x3769b491, 0x50d005cb, 0x1d12315b, 0x50a893e2, 0xa3fc94a1, 0xb7f97a6f, 0x7da126e2, 
    0x59ddd9a6, 0xd9f2e95e, 0x6ea5c25f, 0x8a98cbf4, 0x3e8414cb, 0x6d402ac6, 0x2495a0ae, 0x0086f12e, 0xc2550167, 0x17bdc2d4, 0xfdaeedba, 0xfcf1dbb4, 
    0xb870bd3a, 0x976036fc, 0x8fae7ab2, 0xcf7cfd47, 0xe3c4f07a, 0xd21a5ec4, 0x3f840bb5, 0x12647b68, 0x70827395, 0xfefb7a0e, 0xadef3f15, 0xc696206f, 
    0xa478266f, 0xddb88857, 0x788e0787, 0x6b621ffa, 0xcb84f08f, 0x4417f8a4, 0x00ff09d4, 0xf34d7b44, 0x3200006e, 0x806ee646, 0xbd6acf77, 0x49726aa9, 
    0xfd66a30c, 0x4512cb33, 0xc83a3f3c, 0x3de754bb, 0xae23090e, 0xbcd2a732, 0xcd614cac, 0xb36ba529, 0x71765278, 0x48fb4747, 0x153f7a78, 0xf8425ff8, 
    0x6a13a6ad, 0x1f2dd22e, 0xff00875f, 0xa4581900, 0x1c63780a, 0xab7cafa4, 0xf9c87364, 0x2bdec4eb, 0x816ef0b1, 0x598778a8, 0x74d3e069, 0x3bda48d6, 
    0xe7591a40, 0x43e09893, 0x3292948f, 0x02a08d5c, 0xa3af3839, 0x407c1c7e, 0x591bbed3, 0xc7d39278, 0xe0ed1617, 0x5359abdb, 0x92e99254, 0x6ded4b18, 
    0x178c4cbb, 0x29500032, 0x19039661, 0x1fcbaf39, 0xe3c27819, 0xcef53ac7, 0x7b4bbeb1, 0xe931761b, 0xfd603336, 0xd938cc8a, 0xaee04cc7, 0x2726fef7, 
    0xcbd96b9e, 0x1b1beff0, 0xcfdfa2b7, 0xeeab9eae, 0xbe663ef5, 0x546e652d, 0x8bf7ae62, 0xe9f867e9, 0xdb754fb2, 0xfb755baf, 0xbd59fc40, 0xd1b9b8bb, 
    0xf8ab513c, 0x569a4e5b, 0x0ebdf478, 0x0e6fc3f4, 0x056e3c4f, 0x249bd59b, 0xf83f6a9e, 0xff1b3f5f, 0x78a5e800, 0x0600ffbf, 0x8b00ffa7, 0xf0b43faf, 
    0x40bc894f, 0x78a7798f, 0x62d55f5b, 0x69f2ca2e, 0x2cdd53fa, 0xbb310f6e, 0xdd71386d, 0xff54647b, 0xbcabf000, 0x4200ff6b, 0xf0bf8b17, 0x22fe7f9d, 
    0x8451bdbe, 0x6315a355, 0xa98865e5, 0x3b29cd27, 0x81cfebb3, 0x9f17f737, 0x3bf52d18, 0xa87791cb, 0x49dc59de, 0x2b837275, 0x2486842c, 0xab0cf81e, 
    0xf98e02e8, 0xc3edf726, 0x3e8b371a, 0xc398f91d, 0x59c5486a, 0xe6fdeef6, 0xd55e0f30, 0x2d08c10f, 0x382dc50f, 0xfd0921da, 0xf4a9e39e, 0xe43e39ce, 
    0xf67f35fe, 0x2f8ab7e9, 0xc039fc14, 0x1d0575ce, 0x15bc1f4f, 0xeb4b8af0, 0xff65cb4a, 0xf4b3b600, 0x6a4aae79, 0xb77e5bef, 0xe2167d39, 0xdeeed415, 
    0x208ee54b, 0x6dc43484, 0xd87240d8, 0x05c0dd18, 0xded713bb, 0xa75935b7, 0xe9eb1df1, 0xba1f7e57, 0x62a4cdd3, 0x012e894b, 0xc2334947, 0x49c17810, 
    0x1cf5b915, 0xa68b3574, 0xbbe625da, 0xc6408415, 0x3e4d666e, 0x5bc17327, 0xc185a189, 0xe78071c6, 0xbf631c07, 0xa5fd557f, 0xbf72337c, 0x2c99351f, 
    0x59f5eec7, 0x55abfc6d, 0xc9968f61, 0xc82d6501, 0xbc9fdc6f, 0x3270c6d8, 0x192f2d45, 0xe9c896b6, 0x619c36a7, 0xb5dfcd1e, 0xba2d5d9a, 0x7db488fc, 
    0xdcd2d23a, 0xf4c5daea, 0x92c6765e, 0x16879046, 0x58326e56, 0x182d8fe0, 0xb9db00ae, 0xd98e4cde, 0xfa83aff6, 0xea12e835, 0x0d0fda52, 0x7d24b7e9, 
    0xc550d19a, 0x9501d170, 0xc4641329, 0x3ec300ac, 0xa3908c5c, 0xf893873b, 0xef8a415b, 0xa8fb5b56, 0x04f1e799, 0x260de2a9, 0x23111bdd, 0xf6c6cac2, 
    0x9283f8e3, 0x311a11d1, 0x18f3de5f, 0x1eee09c1, 0xf657f11f, 0x0cbfb98d, 0x9be575cf, 0x0091979b, 0x21fc362b, 0xf9867120, 0x4ab7efbe, 0xf7d670f6, 
    0x5f7f7b5b, 0xe100ffad, 0x79cc9f8f, 0x35249ffd, 0x3bfde1bf, 0xdaec91af, 0xc6dad034, 0x591a6fa9, 0x35e61d23, 0xc721cd62, 0xe3c99324, 0xfd32aff1, 
    0xbb67bfa5, 0x1c9e8d1f, 0xf9f4d6b8, 0x00fff4ae, 0x6c5a691c, 0x58f2e9f1, 0xf0d4a032, 0xcf59d18c, 0x26437e90, 0x94611cd0, 0xad790033, 0x2dc43b3d, 
    0x23953f6b, 0x82f38309, 0x1c184fbd, 0xcbadb963, 0x8f3e1c7f, 0xce48bb13, 0xc8c6fbc8, 0xc981f2c1, 0x1b679c03, 0xd557fa7d, 0xc7ea74c2, 0x031f7b96, 
    0xd5f0752a, 0x345a5a15, 0x2be1a97c, 0x806fb5a8, 0x32904cb1, 0x218d2ec5, 0xbae1e5f2, 0x62875536, 0xc48e2008, 0xfb675e11, 0xefe2c90f, 0x0e00ff8a, 
    0xda0f2fb5, 0x9a5a17e8, 0x87216e68, 0x82237255, 0x07113770, 0xd779df9a, 0x01ce8527, 0xec6bc6c9, 0x69107e58, 0xc8fdd57a, 0xc3cbe636, 0x35cd5057, 
    0xb6b39cce, 0x76a62ef9, 0x31dfb269, 0x76f2fb08, 0x2e3fc1b8, 0x81d75dd1, 0xfc0b3f74, 0x39bcd01e, 0xd0061de1, 0x932a3ae9, 0x1e686363, 0xf3aeb649, 
    0x2c772923, 0x12dc0cd8, 0x7ca5cf73, 0x532e1bde, 0x7462588d, 0x5eb3328f, 0xf3eb765d, 0x2b4e7dee, 0xd339953a, 0x56d685ab, 0x349dae6d, 0xf9b956f5, 
    0xf85dfb45, 0xf85efbfe, 0x57e0778f, 0xd34d97b6, 0xef783b7c, 0x5436dba8, 0x326c6adc, 0x1ac9bfc7, 0x90e310e1, 0x355b700b, 0x7e059fe7, 0x57fcde16, 
    0x8e3684f1, 0xc42a0d1e, 0x75a5e62d, 0x718c411c, 0xd438b693, 0x31230d67, 0xe57a1a09, 0xd1c8c1c9, 0x617caefd, 0x00ff8f0f, 0x9a895f69, 0x6cf398a5, 
    0xcb100f75, 0x4a91086d, 0x10008b34, 0x9ff10c0c, 0xfb38872d, 0xfb769cc0, 0xf87af62f, 0xafc2173b, 0x4dd8d087, 0x91d9fe18, 0xf1f4d585, 0xf41a5dcc, 
    0x38b70b29, 0xfc89231b, 0xc7929cbe, 0xbd5af9e6, 0x68e0a849, 0xa5dfd172, 0xfceabbf5, 0x7542e7d9, 0xadee3a33, 0x92e49f7f, 0x03fd3bf2, 0x866ffac2, 
    0x2e4d6bb4, 0x454b5dd6, 0x894db5b7, 0xc95ea461, 0x20f75014, 0xbee611b2, 0x64232d49, 0x019c27b1, 0xb4631f5a, 0xcfa000ff, 0x6df0bf89, 0xc500ff71, 
    0x698772d4, 0xd99e9358, 0xabb19be2, 0x33c6aae4, 0x7782939b, 0x81bfa6eb, 0x9224a8ed, 0x049fcf47, 0xe2db56ad, 0x69171972, 0x1c31566b, 0x95c1068e, 
    0x4f825cc7, 0x5bf9ef38, 0x5dc0bbfd, 0x33abe173, 0x5dfb43f9, 0xe3fb4f46, 0xcaf0a18a, 0xfa8b1fec, 0xb3390936, 0x80e004ba, 0x4fc74848, 0x6f3fb5c2, 
    0x9fea4368, 0x0712c30d, 0x03e3c2f6, 0x9a2bc43f, 0xfe42bc09, 0x71e833ba, 0x5dcafd32, 0x00fffa6d, 0xfa68c091, 0xe6dae8ba, 0xf314ad9b, 0x28b5b2bf, 
    0x268ca42f, 0xcc0d970f, 0x3fe83873, 0x88fc3782, 0x997eea38, 0xedb4a4fd, 0xfdf15673, 0x3487d79d, 0xd15a2fed, 0xac8db865, 0x7912dfe7, 0x45d602b7, 
    0xe4bed370, 0xfb240845, 0x504072c8, 0x9d8f6141, 0x7f580bf4, 0xca9c26e1, 0x6645cac3, 0x2494ebda, 0x187946e5, 0x27461e50, 0x01400119, 0xfae81589, 
    0xcfb5d917, 0xf0131e82, 0x455a5e52, 0x3169e9a6, 0xa5f192bd, 0x9b12b8b4, 0x865489bb, 0xcd364e05, 0x1cb8db10, 0x7e15e364, 0x18a954c9, 0xe65b8dbe, 
    0x56ba4d74, 0xdc861faf, 0x4aab4baf, 0x796bcbef, 0x7d24ba6f, 0xd5cace7e, 0xb8541baf, 0x59bbb4d2, 0x6faef5d6, 0xee6ec2f6, 0x2ed9b636, 0xae88d4dd, 
    0x28160165, 0x502ae4fe, 0xf95001bf, 0x6abf8977, 0x348c1731, 0x4a8d34e8, 0x3bab34e5, 0x9fe72581, 0x7da741e6, 0x34493c8e, 0xf2e62178, 0xaadae5ce, 
    0xa4cc7256, 0x3c0669b9, 0xc67fe273, 0x57c673dd, 0x1b61714f, 0x9d7e3a69, 0x36d4bd2d, 0x26599ec5, 0xd9a1c87c, 0x3b232da4, 0x7694a2ba, 0x6798f763, 
    0x1b78b19d, 0x169f37c0, 0xc33fbdf5, 0x4f9310da, 0xfbbce4d4, 0x6618cf6b, 0xedec9616, 0x649095e6, 0x2992194c, 0x8c013817, 0x6c2b2487, 0x82030bfd, 
    0xab8b84a7, 0x6fdd7b55, 0x2cf8c8d3, 0x12f1647e, 0x9f7d58f6, 0xffd1af5e, 0x3d8b5f00, 0x3fc100ff, 0xfc34fe14, 0x1e24f145, 0xba5cf014, 0x0257b465, 
    0xc5533727, 0xd6e9db1d, 0x96285c8e, 0xf7423a5f, 0x93e4230a, 0x6de667e6, 0xdb7e2c83, 0xff8916f0, 0x89a60800, 0x73b10e61, 0x41e2a3fd, 0xdede7104, 
    0x4eb22a84, 0xab8c4415, 0x275f4692, 0x3be82b19, 0x5bf8359f, 0xbfc3c7f0, 0x34593402, 0x4de8029d, 0xd136eaa9, 0xdfeebcbd, 0x00ee33e9, 0x3772114a, 
    0x898d2380, 0xce64c9c0, 0x8f3d507e, 0xda77fac0, 0x49d4a491, 0xd1806437, 0x984ec1b8, 0xf2787f24, 0x2b7d7d4e, 0x326a553c, 0x6849a3aa, 0x218e4270, 
    0xd352cec1, 0x2f39f2fa, 0x9ad07e12, 0x7bb5860f, 0x30680fbf, 0x61bc8aaf, 0xed99fd03, 0x6941e412, 0xb850706b, 0xc1ede286, 0xc7aa7255, 0x806eee62, 
    0x325f91e0, 0x1f5fd17e, 0xf7f055fc, 0x245e3755, 0x3eae2cd7, 0xbc58de23, 0x3484473a, 0xfcd37527, 0xab8c8e3e, 0x2fe7767d, 0xbcb9cb34, 0x76039b98, 
    0xbb002024, 0x4b69bfb7, 0xff859f7b, 0xc3d7b600, 0xcc699bbb, 0x3c8c571a, 0x0ce179ab, 0x7cce4511, 0xf76f9bb4, 0x77672c83, 0x40cea9aa, 0x58ddceaf, 
    0x8d5ad6ce, 0x9a67a8de, 0x41f6fefe, 0x66317573, 0xcc24db91, 0xdc1d8bc5, 0x22cfeb06, 0xb27ccea2, 0x779e2e5b, 0x45682417, 0x5e5f2dc1, 0xe5edb5b6, 
    0xb707f87f, 0x0f1fc57e, 0x21be894f, 0x3dca718d, 0x659e80ae, 0xcdb94ab3, 0x1f11eee3, 0xbc22b6f6, 0xf4803ecc, 0x75e97dcd, 0x638d216a, 0x5035228b, 
    0x1c274faa, 0xffe3757e, 0xc3b7b200, 0xfc1f7ec9, 0x1d2ed235, 0xe25a4d22, 0x2909f722, 0x559997db, 0xf80307e4, 0x6710f223, 0xf5f4f1be, 0x2b6edd9b, 
    0x366a3147, 0x8b7c1af7, 0xaa7924c1, 0xc38d730e, 0xc42bfde9, 0x665554c5, 0xcad3f6ec, 0xf3f655fd, 0x9eb6f3f3, 0x2a7b19b6, 0x90ba2e69, 0xed8ce419, 
    0x04bee30c, 0x6b1f058c, 0x7ff2fb97, 0x9ba8d6df, 0x69778650, 0x6d242922, 0x1cce1b82, 0xa4793df0, 0x00ff52fb, 0xfaef3f75, 0xfb2b0fd7, 0x00ffa50d, 
    0xb6f8ef5e, 0x2f3ff375, 0xdd7ce6eb, 0x9251cff0, 0x1bfe8c0f, 0xb66b71b2, 0x2dd75b4b, 0x338ea90f, 0xee8a27c7, 0x3aed6ebf, 0xe1678d6b, 0x1b5568a4, 
    0x580e55fb, 0xbc5e3212, 0xd5e5e027, 0x1ed07efa, 0xa4e1861f, 0xbeb665b8, 0x172aeccb, 0xc9c8c0e5, 0xdf2b40c7, 0xa94b6e7f, 0x17feb53f, 0x498ce63e, 
    0x4c13c5ad, 0x5dcabfa9, 0x20697bdf, 0x91e03a36, 0xfe5c519f, 0x0411c3cd, 0x53777fb7, 0x59a38cde, 0xbeb6575e, 0xf8c119bd, 0x0f5df47d, 0x7cd6b852, 
    0x353c7c77, 0xbc6da8e1, 0x75e65beb, 0xe209b591, 0x82a19d68, 0xd42573d9, 0x73a2192c, 0x6dcc9788, 0x7c60f8a5, 0x8f5fe38f, 0xde8d5f75, 0x3535d530, 
    0xe3de12d3, 0x3875f25a, 0x4bd696e0, 0x288e27b9, 0xa689d4d2, 0xee94b988, 0x638db084, 0x171b0938, 0x071d081b, 0xfcad79c6, 0x1dcdab47, 0x1a2cb3d4, 
    0x9dcdd51d, 0x8f0897a4, 0x12696f6d, 0xddd6b947, 0x7b167104, 0x40b60299, 0x8c45bc00, 0x1f73058e, 0xfcecef1a, 0x6a49fb21, 0xa6569a56, 0xb4b01bbe, 
    0x4bde5248, 0x0c6b4167, 0xc2ae682d, 0x195c3825, 0xf978f259, 0xe8d7fb99, 0x8e9e2cf8, 0xab62455f, 0xa345cb2b, 0xeed3bbf2, 0xcd32073e, 0x3aeb622b, 
    0xf64a7631, 0xffeff9f2, 0xf2dc0d00, 0x911c00ff, 0x5a8b78a7, 0x0b2d2fd1, 0x34ca59de, 0x0e6e96ed, 0xb0da62f8, 0x4c1c7cec, 0x01022202, 0x00652405, 
    0xec37e857, 0xa8e000ff, 0x2ffc01be, 0xadb2961a, 0xc50ff17d, 0xb1b597d0, 0x5840828c, 0x6dcb7b44, 0x8cf196dc, 0xe74e626e, 0xc5c9ab6d, 0xfbf0e57c, 
    0xf1131ec0, 0x3528c67f, 0x71cd58fd, 0xe9069fe0, 0x78149fd0, 0x6dd16886, 0x8722af2f, 0xc498a4bc, 0xa6c8caae, 0x84b9cb47, 0x3b100b90, 0x17df84df, 
    0xfe8abff5, 0x5f7cd726, 0xd1f6c4aa, 0x1ae94bca, 0xa591cf58, 0x8b8c79d9, 0x013c086b, 0x00728188, 0x3300ffdc, 0x998dd764, 0x4f192d63, 0xbff9b7ec, 
    0x75e0bff2, 0x5f1518e5, 0x77321a15, 0x9f97a7eb, 0x9d79da9e, 0xf181dee5, 0xd7d5e227, 0x88cff48a, 0x74fac3c3, 0x166f69f2, 0x22bd7480, 0xabcc78ee, 
    0x6900f82e, 0x200c2b24, 0x29cb0009, 0xd5fbe34d, 0x6e039fec, 0x7ca54bfc, 0x8945f120, 0x51bc2e48, 0x59303de1, 0x66c1a559, 0x0309ed8b, 0xd9f09d98, 
    0x3b456e31, 0x65048311, 0xb0c9b801, 0x87c720fe, 0x3e42dcef, 0x790b6fd7, 0xca059573, 0x96bfe885, 0xe033ab7d, 0x20ed8a47, 0x5b29bed4, 0xb7e9ab4f, 
    0x1ba277ef, 0xecda2ecf, 0x234a913c, 0x3cd7512a, 0x47b0bb48, 0x5ee9816c, 0xdac36b34, 0x5fdfa545, 0xfbd0f597, 0x5319b80a, 0x7b8ad5c2, 0x76abcb25, 
    0xe5ed95f7, 0xccd7f766, 0x4fe35bf8, 0xf1a17589, 0xab8dc187, 0x58620d5f, 0xf92b1b35, 0x9d237975, 0x114aed5f, 0xa58960ee, 0x6e04da3b, 0x2707e314, 
    0x739eba05, 0xfe043ec4, 0xafa7fdd6, 0x8b2415bc, 0x88b7bd1d, 0x65b9232f, 0x5c88ec00, 0x3bcc2c4b, 0x0ea0a81d, 0xb7c21f3a, 0x5afd6a7f, 0xc121bedd, 
    0x37b66967, 0x8bdb74d1, 0xde6d31e6, 0x8afcbb92, 0x7621dddf, 0x636c0f90, 0xf0c95e83, 0xeb70c0ef, 0xc41fb61f, 0x5a5d12bf, 0xacb0d6ac, 0xd41b943a, 
    0xd0d748b2, 0x9154c5a4, 0x060e948c, 0xa127873a, 0xb2c2e835, 0xb77d0e85, 0x999f8e7f, 0x11caf8f2, 0x2e4eb758, 0xb92f4df1, 0x7f23431f, 0x9e0dc166, 
    0x4b2a3c76, 0xb13b3a82, 0x2e3b5e76, 0xed41bfed, 0xa6b5ae54, 0xed28f686, 0xbebd66ad, 0xf6768c9d, 0xce5b4691, 0x0388a16d, 0xd31304bf, 0x6aa61919, 
    0xccbb4477, 0x96cf5d65, 0x98f9b06c, 0x439f9360, 0xbd627b9c, 0x8497e01f, 0x3cc5fe16, 0xe76f7545, 0xedccde5d, 0x3f8b6764, 0xd04e8163, 0xb3f291c9, 
    0xe88125e3, 0x2b800314, 0x615567e7, 0xee2dad92, 0x5b7a75bd, 0xa6fa6be5, 0xd45b97d6, 0xcc73a769, 0xffd92f35, 0x28bec400, 0x7fae6f9d, 0x2b57b4b3, 
    0xd9ac5ab4, 0x2d487221, 0x9e1b70b5, 0x9faa7846, 0xefbacbf0, 0x7fac05fd, 0xf17febef, 0xe812f635, 0x951bf816, 0x7a00ff5c, 0x7f69bc4f, 0xffb61fe1, 
    0x7e519e00, 0x29be0eb5, 0x8113e3ea, 0x52741463, 0x6fc90ffc, 0x6d5103d9, 0xbd2de353, 0x6b24d3d4, 0x14f0941e, 0xcae5141d, 0xc00180f1, 0xebfc793d, 
    0x27db3fe8, 0xef9eb64d, 0xd6b565e1, 0x8fa565ab, 0x27d268ed, 0x774c59bf, 0x62016f32, 0x182dd8fd, 0x2021736e, 0xcdd73a2e, 0xcd34017f, 0xc5afe06b, 
    0x15dfe191, 0x495892e9, 0xda92eea8, 0x7215d058, 0x4e593690, 0xdfb7617e, 0x1fd2d71c, 0x0e85e6b6, 0x0fcde1b9, 0x54f59d51, 0x3aed0b5d, 0x6300ff9a, 
    0xc63bc5da, 0x9384e5d1, 0x38565d19, 0x7c030f86, 0x2154c98d, 0x29f53d5b, 0x1042fb47, 0x97fefa6b, 0x31f47be0, 0x67fbc216, 0xbffeb7be, 0x2724e513, 
    0xa6137fc6, 0xe998b3b4, 0x5dde53b6, 0x366af36a, 0xd02c3342, 0x8ab9b9b9, 0xe4e321e0, 0xfc160189, 0xf58bbb46, 0x3cd66b72, 0x3f86f033, 0xfae9f28c, 
    0x257c8b27, 0x343268af, 0x21fe1c4f, 0xede90afb, 0xf28c6c75, 0xdb4083a5, 0x22cd5f99, 0xca84307f, 0x10dc06c4, 0x007ee1ed, 0x68af4386, 0xdefbe5da, 
    0xdd15da69, 0x979776b4, 0x329171f6, 0xb5278b8b, 0x61c3e1f3, 0x98a56c8c, 0x24169c01, 0x74af386d, 0xfc895ff0, 0x14b91e51, 0xc7e55dda, 0xda213e89, 
    0xd585dac0, 0x3f7585ef, 0x24d748b2, 0xcc129ffd, 0x2d026ade, 0xec903e1e, 0x841bcb23, 0xe9d5af99, 0x72b03542, 0x37a99ea4, 0xdafc58f7, 0xfbab56a5, 
    0xff6eb357, 0xbfca3300, 0xdf8a3f69, 0xb824fedb, 0x6f8dfef0, 0x7278a665, 0x617178d2, 0x355b6ca3, 0xd258069a, 0x783f2a05, 0x97c9abb0, 0x92e7b553, 
    0x11ec1459, 0x00ffe905, 0xcb7e6d67, 0x8d4efb4d, 0x88348224, 0xbb67e5cb, 0xa1badb25, 0x794e02f7, 0xede72bee, 0x00ff456f, 0xedd97a84, 0xb6248998, 
    0x4067a78d, 0x491b6d44, 0x0c448a00, 0x9ec90003, 0x65150408, 0x699c7223, 0x5d5e4078, 0xb475fa6b, 0x5ed83337, 0x67b6764b, 0xa0e18850, 0xe36b0397, 
    0xa8113918, 0x7902a323, 0x71cfafc9, 0x8c5647d8, 0xf3f337a9, 0x556e7dee, 0x545c788d, 0x2f7fa56b, 0xc77de95f, 0x8ec77de8, 0x4f132d75, 0x4ccbfa82, 
    0xdcc99eb7, 0xbbb938c5, 0xa16e3cd9, 0x89557448, 0xfc188283, 0x7bf0d0a7, 0xc200ff6a, 0xdff0b9e5, 0x505bcdc3, 0xd7c21f4d, 0x5d5ad196, 0x5b93ea5d, 
    0xd49b336a, 0xdaa45581, 0x19aadbc0, 0x16317948, 0x638ca9ee, 0x00bce49a, 0x6f3d7c6e, 0xa1969a2c, 0x6b6fb716, 0x3a9abccb, 0xe176ec44, 0xeb613e08, 
    0x1f702786, 0x7cd11598, 0xf59ffd62, 0xe193da8f, 0x8b0e9fb6, 0x0e5f3be2, 0x31172598, 0x11da5cd8, 0xb210e11d, 0x6d3c5224, 0x8cdd29f2, 0xce6923ed, 
    0x9faf000e, 0x7acef2c1, 0xb9eb7fcf, 0x7a9d99f7, 0x7eeeb054, 0xbb75edca, 0xbeb6a2df, 0xba9d9fbb, 0x00ffed6d, 0x8ef1e78c, 0x5ef37fa9, 0x9229f1ea, 
    0x0cd02e53, 0x7a8c2ad3, 0x18a84a80, 0xbeda83e8, 0x6d19f8f1, 0x4d2bfc2f, 0xd5995f0f, 0x1bcd35ef, 0x40499e4f, 0xd22a8fcb, 0x3e56552b, 0x1fc442a0, 
    0x7eaec746, 0x6bf8b84b, 0x7e832fe2, 0x860ff12c, 0xcda36dfc, 0x8bf26aa1, 0x04222a2f, 0x2c657bc2, 0x29d2b60c, 0x0b275502, 0xb11b3995, 0xa1bee2c1, 
    0x78aa73f8, 0x4bf8438f, 0xad7408e0, 0xd256d312, 0xa2ddf0a2, 0x774c99b2, 0x6619234f, 0x2b3fd8fd, 0x0fa8ac2a, 0x8ae7a823, 0xb78931f6, 0x9faeed28, 
    0xf031fc77, 0x29786778, 0x597d3daf, 0xde9d78d7, 0x09d546d3, 0xb2c99391, 0x00bff195, 0xe73fd7f1, 0x7f7dbda7, 0xc300fff0, 0x56f04ce3, 0x98da0089, 
    0xbc1d80b1, 0xf7d8fd28, 0x0b7ccdf7, 0x968a0fe2, 0xc695ed5a, 0xaf46da90, 0xac526aa4, 0xed0d7329, 0x86249aa1, 0x986da85b, 0x4e7088ac, 0x711d17e9, 
    0xbe06479e, 0xf1d1f8e0, 0x00bfc3a3, 0x6d750abc, 0x8144d86d, 0x08fbb46c, 0xecc5bd54, 0x449170c1, 0x2e3f9683, 0x2701604f, 0x223e5e81, 0x65e1549c, 
    0xfff8af76, 0x00ffc000, 0xa9932a33, 0x8ed5e034, 0xfd6f4bf4, 0xc000ffec, 0x6f9b4733, 0x9000ffeb, 0x591ff3eb, 0x327ebffd, 0x77cd176a, 0x2fe1a516, 
    0x0f5c5a07, 0x9b4adf32, 0x23d97b4e, 0x6929248b, 0xe3c47c77, 0x8ad303b0, 0x0d00ffa3, 0xfe97f1e5, 0x7f07af87, 0x00ff81e0, 0xf6eaaaf8, 0x3e8cee73, 
    0x64f451a3, 0x97225e17, 0x3f05dfc5, 0xdf165f67, 0xef6addb2, 0xdc59a97f, 0x3632b7de, 0x3fc0662d, 0xba3d8e82, 0xde7ea557, 0xbf68f37a, 0x2686a20c, 
    0x126a5b98, 0x2f243379, 0xb922f2e5, 0x6e24e70a, 0xf3c277c0, 0x39a6c79d, 0x357c18f2, 0xd82fe173, 0x5cd2c2bb, 0xd73545dd, 0x335dbc87, 0xab6c2189, 
    0xaab43dc3, 0x648e7ba5, 0xaed75c1f, 0x26a6de7e, 0x5aa77df8, 0x754710c8, 0x66a9d315, 0x8e88f900, 0xf41f1913, 0x577bbad1, 0x66733156, 0xdfda5a74, 
    0x8000ffa3, 0x8e5be077, 0xbc4f555d, 0x80cfe497, 0xb9b6e46c, 0xcbcdedf0, 0xb777044b, 0x0cebd617, 0xed2d0e38, 0x23675384, 0x54c6bcf8, 0x6dab978d, 
    0x572063c3, 0xfeccfeb6, 0xbcd5be38, 0x91fd6153, 0x5a69a871, 0xdc93c4d5, 0xda576adc, 0x10b5c1e0, 0x8979f898, 0x8b8af9cb, 0x47503e9e, 0xd30e9f63, 
    0x49a9d13e, 0x6b1a0a2c, 0x6e5d51f9, 0x5f56de00, 0xd58d6231, 0x9d140878, 0x3cfe08aa, 0xa3471ee0, 0xd796ce7e, 0x69abb63a, 0xba6b59a5, 0x9fa483bf, 
    0xd44f93ce, 0xbde4b874, 0xf90513b8, 0x4e1592e0, 0x3fb3c650, 0x230499ca, 0x7db58c11, 0x546d0afe, 0xfa5b5be5, 0xcacaf8dc, 0xe39bd0f1, 0x25fc9735, 
    0xe9737617, 0x89bfa53a, 0x92428fe6, 0xc9fe420d, 0xeddb68fe, 0xcb0acf92, 0x18229113, 0x3251cc6d, 0x46c8f0b2, 0xff54ef5b, 0x2f7c0d00, 0x09e07d7b, 
    0x095446fc, 0xa34bbc2f, 0xa4a864c3, 0x729963b6, 0x6e647bca, 0xe9819ce7, 0xeaaf655e, 0x6fc487ba, 0xcf33f91c, 0x4b65106f, 0x213eb73f, 0xfbc1b34f, 
    0x4ec82bb1, 0x5e50954b, 0x39c93b47, 0x575f8324, 0xe0d13b7c, 0xa1a916f1, 0xfff96859, 0xc33b8400, 0xa706c924, 0x502f1fe5, 0xc39831be, 0xf00d18c2, 
    0xde46a6c2, 0x40ec0e40, 0xf1352824, 0x4625c699, 0xef152d4d, 0x6ff77cf7, 0x24cf3ef5, 0x72b2aac2, 0x9e2f6b97, 0xbf2bd1ef, 0x1e5b5b5b, 0x9f266fbb, 
    0xc7daf062, 0x26bcb505, 0x81a4dde5, 0xf964e946, 0xcb339937, 0x989b7048, 0xaff6e0f5, 0xb436f063, 0xe448b798, 0x09a3817d, 0x7f3b8093, 0x85abf24a, 
    0xc48ddd1a, 0x1aad1030, 0xf728bac7, 0xc0b2b949, 0x81202f9c, 0x9173a6bb, 0x7cb602cf, 0xa3adab27, 0x11b9dadb, 0xf64809cf, 0x03c4ca3f, 0x3d234080, 
    0x6bceb9be, 0x945529e2, 0xfe77535a, 0xd20f3dbd, 0x5675f8b1, 0x7fd5928d, 0x67fadfc3, 0x3fdb7ea4, 0x30bead08, 0xfddaccfe, 0xfe43bce5, 0x5a0b6f12, 
    0xf7e8adc9, 0xa1de0f51, 0x104f0b8d, 0x10c9763d, 0x854c4770, 0x19af403d, 0xd0222dd3, 0x5aa025bc, 0xadbcb9c1, 0x56cbcb26, 0xb4c58b60, 0xdca7aa48, 
    0xd4a75fa7, 0x0de093fd, 0xd355df4a, 0xb32a3704, 0xe59822c3, 0xa40eb98d, 0x841e8161, 0x73f32b12, 0xc4df9ac7, 0x21de845f, 0xae8d4df1, 0xbab606bb, 
    0x6075af46, 0x64b166fa, 0xac481cad, 0x7513111a, 0x80786108, 0x03bb7304, 0xaeafaf38, 0x323aa5bd, 0x00ffd28b, 0x7eea57f0, 0x124e4559, 0xffc21fa9, 
    0x7de87f00, 0x783ffb2b, 0x67e2d706, 0x4f5d358e, 0xd3264f51, 0xb016f7c3, 0xa4aa68c7, 0x203170cd, 0x50413b66, 0xa1b78336, 0x79853d38, 0xe37fed57, 
    0xfc1d1fcb, 0x385f9c6a, 0x125ec39b, 0x04d8a6d3, 0x96d334a0, 0x2445280b, 0xb788e472, 0xc7ef420e, 0xf0535724, 0x8f0ee3ab, 0xf5e0cff0, 0x131fc687, 
    0xa9069ac4, 0x697b617b, 0x092d860f, 0x49bebb67, 0x2455280a, 0x92e4b1b3, 0x03b8aa70, 0xfbe4e79c, 0xf15a770d, 0xeaa6a10e, 0x37c9b6d7, 0xe77bb589, 
    0x51d3489f, 0xb9945780, 0xc76d693f, 0x61e7e198, 0x4892343c, 0x5e4184dc, 0xbe56211c, 0xab4b7322, 0xb7f4cd4f, 0xf0f5d04f, 0xcd07a5d2, 0x6f25d93b, 
    0xfdf3eb5b, 0x78a9a359, 0x2fd24693, 0x42f1b764, 0xfcaf7b41, 0x69d076af, 0x31717c5e, 0x372a4450, 0x18638da0, 0x618c228c, 0x0ac4ea01, 0x789cf0df, 
    0x177cfe23, 0x030400ff, 0x578f00ff, 0x00ffe211, 0x449ff814, 0xcf74eed7, 0xd111cf07, 0x59b648ac, 0x9165de09, 0xf2257778, 0x27cf63d9, 0xbfb1e28c, 
    0x9ff83be1, 0x113f00ff, 0xff31df7f, 0xf17b8500, 0xebca4ea1, 0x3cf06bf1, 0xeeca98da, 0x7f7a964f, 0xf4917f85, 0xa6e9ec87, 0xf693f8da, 0xfac4f10e, 
    0x6d792284, 0xc21a49fc, 0x80319bc5, 0x730ac06d, 0xe73712d3, 0xe000ff56, 0x2e32b7a7, 0xd4daf099, 0x25c91039, 0x24f6b2c3, 0xc0f1a790, 0xfb9bd6eb, 
    0xc900ff2b, 0x00ff7883, 0xfe54c6fe, 0xf8cf9476, 0xfa00ff29, 0xef3f869f, 0xa100ff4f, 0x8dfc97d3, 0xf32f2fa9, 0x00ff0a23, 0xafa73ee1, 0xe8341ff9, 
    0x2d2b6c7a, 0x262ec0ad, 0xe110a753, 0xd4cc23c8, 0x9e2337f6, 0xd881a996, 0x398cfab3, 0x6ba96dbc, 0x350c00ff, 0x79f2894f, 0xb52f7e16, 0xd2325dbc, 
    0x0821caf2, 0x79f783b6, 0xbe730708, 0xe124b14c, 0x021867d8, 0xaefe8bc6, 0x3fe1fedf, 0xaeb876fa, 0x00ff4463, 0x3fd74e93, 0xfbbf38ec, 0xc9d5be46, 
    0xc9c746c5, 0xa77ee24b, 0xf833fcae, 0x1ffde16d, 0x26263ec7, 0xa6cd6fc9, 0x37e06da4, 0x126293b8, 0xcf7400a7, 0xd2eb79cc, 0x9ab587be, 0xbbba9844, 
    0x8e6c902c, 0x0fee0736, 0xbfdb7194, 0xc183bcd2, 0x783cf29f, 0x1fc3fecb, 0xe57a45fc, 0xffb8dfbf, 0xff89ae00, 0xe257b200, 0x925aa599, 0x4f4ed4c7, 
    0x76fa6d47, 0xa8c8793f, 0x8b068ed3, 0x5fc75a51, 0x2d3cebbc, 0x1be4d495, 0x55ef6a9b, 0x03ca8f1b, 0xfcf40026, 0x18e65e2b, 0x082ba186, 0xdbca7dfe, 
    0xf26c31cb, 0x497d9273, 0x7f0c8fac, 0xac6f4ec8, 0x7514fa9f, 0x00ff75b3, 0x537df31f, 0xfe3257f9, 0xffd7650c, 0x7667b600, 0xd0aff82b, 0xb2863ff7, 
    0x58db4ebc, 0xcdc048e1, 0x53fba77c, 0x00ff683a, 0xb1aafeb5, 0x6ab11441, 0x71935e5a, 0xbdcb0c75, 0x221e7224, 0x9fa8ee71, 0x57d4838a, 0x7e0e3fd5, 
    0xf347fdfb, 0xed9ff215, 0x2700ff79, 0x0bec7f7e, 0xc9e87fa4, 0x6b29ef6b, 0xc4263f83, 0x70b6f62f, 0x31bc161f, 0x0bbe68a6, 0x6a93b5d6, 0x5213ef2f, 
    0x6c1f4f93, 0x24106566, 0x0880ca7b, 0x7200f2c6, 0x39755830, 0xe01dd724, 0x047f7bb7, 0xf3f141fc, 0x261ed748, 0x82b4b0b6, 0x986fe6de, 0x46d11c41, 
    0x15bd88cc, 0xa3aaed46, 0x0e005585, 0x8e6ff4b9, 0xf54af2bf, 0xdc0ffbef, 0x39e900ff, 0xaff038af, 0xc4ef9bfc, 0xd3f5fa9f, 0x1a9ef43f, 0xe586f2f2, 
    0xaf968b86, 0xa727ca4f, 0x45fbc998, 0x3f8efcf3, 0x5dc1d7e0, 0x83b7e20f, 0x2ed75e17, 0xc9b74ff5, 0xb5312271, 0xf4d4f2ba, 0x9c07e36c, 0xafbbe6b1, 
    0x05bf64f8, 0xe6cf00ff, 0x8100ffb9, 0x8dfd00ff, 0x7f28fb4b, 0xfe8725c9, 0x00ffe4be, 0x92bd52d0, 0x67b51abd, 0xc999b419, 0x5339954a, 0xffd4718b, 
    0x000000d9, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(CasNode, "CAS Sharpen", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Enhance")
