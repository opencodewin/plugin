#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "DeBand_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct DeBandNode final : Node
{
    BP_NODE_WITH_NAME(DeBandNode, "Deband", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Enhance")
    DeBandNode(BP* blueprint): Node(blueprint) { m_Name = "DeBand"; m_HasCustomLayout = true; m_Skippable = true; }
    ~DeBandNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ThresholdIn.IsLinked()) m_threshold = context.GetPinValue<float>(m_ThresholdIn);
        if (m_RangeIn.IsLinked()) m_range = context.GetPinValue<float>(m_RangeIn);
        if (m_DirectionIn.IsLinked()) m_direction = context.GetPinValue<float>(m_DirectionIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device ||
                m_filter->in_width != mat_in.w || 
                m_filter->in_height != mat_in.h ||
                m_filter->in_channels != mat_in.c)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::DeBand_vulkan(mat_in.w, mat_in.h, mat_in.c, gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            m_filter->SetParam(m_range, m_direction * M_PI);
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_threshold, m_blur);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ThresholdIn.m_ID) m_ThresholdIn.SetValue(m_threshold);
        if (receiver.m_ID == m_RangeIn.m_ID) m_RangeIn.SetValue(m_range);
        if (receiver.m_ID == m_DirectionIn.m_ID) m_DirectionIn.SetValue(m_direction);
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _threshold = m_threshold;
        int _range = m_range;
        float _direction = m_direction;
        bool _blur = m_blur;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ThresholdIn.IsLinked());
        ImGui::SliderFloat("Threshold##DeBand", &_threshold, 0, 0.1f, "%.3f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_threshold##DeBand")) { _threshold = 0.05f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_threshold##DeBand", key, ImGui::ImCurveEdit::DIM_X, m_ThresholdIn.IsLinked(), "threshold##DeBand@" + std::to_string(m_ID), 0.f, 0.1f, 0.01f, m_ThresholdIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled || m_RangeIn.IsLinked());
        ImGui::SliderInt("Range##DeBand", &_range, 0, 128, "%.d", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_range##DeBand")) { _range = 16.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_range##DeBand", key, ImGui::ImCurveEdit::DIM_X, m_RangeIn.IsLinked(), "range##DeBand@" + std::to_string(m_ID), 0.f, 128.f, 16.f, m_RangeIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled || m_DirectionIn.IsLinked());
        ImGui::SliderFloat("Direction##DeBand", &_direction, 0.f, 4.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_direction##DeBand")) { _direction = 2.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_direction##DeBand", key, ImGui::ImCurveEdit::DIM_X, m_DirectionIn.IsLinked(), "direction##DeBand@" + std::to_string(m_ID), 0.f, 4.f, 2.f, m_DirectionIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::TextUnformatted("Blur:");ImGui::SameLine();
        ImGui::ToggleButton("##Blur##DeBand",&_blur);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_threshold != m_threshold) { m_threshold = _threshold; changed = true; }
        if (_range != m_range) { m_range = _range; changed = true; }
        if (_direction != m_direction) { m_direction = _direction; changed = true; }
        if (_blur != m_blur) { m_blur = _blur; changed = true; }
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("threshold"))
        {
            auto& val = value["threshold"];
            if (val.is_number()) 
                m_threshold = val.get<imgui_json::number>();
        }
        if (value.contains("range"))
        {
            auto& val = value["range"];
            if (val.is_number()) 
                m_range = val.get<imgui_json::number>();
        }
        if (value.contains("direction"))
        {
            auto& val = value["direction"];
            if (val.is_number()) 
                m_direction = val.get<imgui_json::number>();
        }
        if (value.contains("blur"))
        {
            auto& val = value["blur"];
            if (val.is_boolean()) 
                m_blur = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["threshold"] = imgui_json::number(m_threshold);
        value["range"] = imgui_json::number(m_range);
        value["direction"] = imgui_json::number(m_direction);
        value["blur"] = m_blur;
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf75b"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ThresholdIn = { this, "Threshold"};
    FloatPin  m_RangeIn = { this, "Range"};
    FloatPin  m_DirectionIn = { this, "Direction"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[5] = { &m_Enter, &m_MatIn, &m_ThresholdIn, &m_RangeIn, &m_DirectionIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_threshold       {0.01};
    int m_range             {16};
    float m_direction       {2};
    bool m_blur             {false};
    ImGui::DeBand_vulkan *  m_filter {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5863;
    const unsigned int logo_data[5864/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x2f696b5b, 0x50723825, 0xc36b7272, 0xa34b697f, 
    0x13a0b92e, 0xf303b1d4, 0xd71ae915, 0x00ff638d, 0xe1698785, 0xd515499b, 0xda799e2d, 0xc6830437, 0xafa70301, 0xb57fe535, 0xd764bf34, 0x1c17383c, 
    0x15f307b9, 0xc919def8, 0xd0f58f57, 0xb450bafd, 0xe135675b, 0x0e7e2dc7, 0xae180072, 0x51c009ea, 0xf779c583, 0xdd76ee87, 0x23715712, 0xaced6ab7, 
    0x2b9707e7, 0x7a92e31a, 0x7e27f40a, 0x4bd11b6b, 0x67594397, 0x81070952, 0x8a17a1d6, 0x0407a7ee, 0xbc4c97e2, 0x1fb8b9b7, 0x001edfb9, 0x7ebfdb01, 
    0xbcd86b9d, 0xba68a307, 0xf48998e5, 0x720e299b, 0xcc2a64fe, 0x0696b66b, 0x8ff99555, 0xc399172b, 0xd9a0ae0c, 0xc9b893e3, 0xacb147c6, 0x4473734d, 
    0xc9764692, 0x7e9fca19, 0x8d47f4b5, 0x5edb02be, 0xf85fd269, 0xf4bd4d5d, 0x77dacc2a, 0x074e22cd, 0x56562f3f, 0x740400ec, 0x9baf75e0, 0xde255dfc, 
    0xa773798b, 0xe9b2366a, 0x2612f0f7, 0x9242b9b5, 0x6b07472e, 0x418ee060, 0x68106420, 0x86a984a9, 0xe34e6b77, 0xf8f063c3, 0xf5663ff8, 0xb73df7ec, 
    0x5543b7c2, 0x94e76cd0, 0x03c4f47e, 0x7915bf63, 0xaed3256e, 0x72b7b8e2, 0xd1e1c292, 0x573ca88f, 0xb13be119, 0xd256f8a7, 0x7cd8cee9, 0xe058ccb0, 
    0xd29aeb01, 0xb0375397, 0x42838986, 0x1cba72c3, 0xe4b53e82, 0x72e68ad7, 0xeca45a47, 0x90f69bce, 0x2a7edcf0, 0xf18baef0, 0x2a5f4e3f, 0xd5b05446, 
    0x39192762, 0x5ccf30c2, 0x881d4736, 0xfc9caff4, 0x0fdbe24b, 0xef6ef803, 0xc3fcd45d, 0x6315066b, 0xc8d27289, 0x4c0fea7e, 0xfa8ae79e, 0xc4e7e14f, 
    0x1ac01fbd, 0x8b0fbf6e, 0x063f82e7, 0x2fc8dadd, 0x1aa9dc45, 0x82c26967, 0x7d7357e5, 0x241909d0, 0x7c2bbf62, 0xbc39e377, 0xedabe275, 0x60c5324b, 
    0xadd3b892, 0x3dfb3924, 0x7a90efbe, 0xeec91867, 0xb0cbd86b, 0xf6ac16cf, 0x9100ff5b, 0x4ff1f5f2, 0x95a2722d, 0x7ff4f1de, 0x9f7a74e4, 0x12f10bed, 
    0x9bb850f7, 0xa336f14d, 0x92bbd9a0, 0xc1751a96, 0xf5c7288e, 0xaaf5a43e, 0xfebef0bf, 0xd000ff29, 0xffaf00ff, 0x7f63e000, 0xbe56728d, 0xad16f114, 
    0xf0b0b819, 0x42a9b5f6, 0x1b5b0649, 0x6e452609, 0x301c48ea, 0x54dc23e3, 0xf880f0df, 0xef84febf, 0xe000ff13, 0xaff05fa6, 0x452954b0, 0x361f4559, 
    0xbbdb75f1, 0xf8be3e93, 0x7d717d33, 0x6eaf19f1, 0xcf5d33e4, 0x842c8d0c, 0xbf5be37d, 0xc4137eb5, 0x82071b3e, 0x8af8815f, 0x1c33f8ca, 0x05f0c667, 
    0x7f12f91c, 0xaefdde2a, 0xff7555ad, 0x739c0b00, 0x15f7f7bc, 0x5832eff9, 0x567fd9b8, 0xf6574c3f, 0x00ffef7a, 0x3974e104, 0x2d092ed5, 0x5d53c785, 
    0x8224a51e, 0x40f3e9f0, 0x3360bcf0, 0x1ea48dab, 0x41e863a0, 0x50c377ae, 0xca6add0b, 0xb8b9a1cb, 0xfb4f008e, 0xd7fa176e, 0xd174fca7, 0x2afed325, 
    0x1028b7ea, 0xb5933f43, 0x58fe6743, 0xe9feef20, 0xca5c9bad, 0xee3519e1, 0xa21bd72e, 0x0067435b, 0x7291b8b8, 0x00ff2039, 0xc7bde20a, 0x7a8d2ee1, 
    0x835cdf14, 0xfe4bdaa6, 0x3a933eae, 0xf753c8f5, 0xfa3cf541, 0x9ee4f50e, 0x4d50d316, 0xdcc8d505, 0xbac545ee, 0x9c4ae129, 0x9c7e6fef, 0x577a8e64, 
    0x201ee8b8, 0x2913a0f3, 0xee8d2a2d, 0x3c1bbdcc, 0xed955e7f, 0xd974ade1, 0x379fd9f3, 0x9e3a2427, 0x0dcfa3cb, 0x22b06abc, 0x8a3b21db, 0xe39c652b, 
    0x79ad27a9, 0xf01fedc7, 0xd3f84d07, 0x8bb5d9e1, 0xc6d79a66, 0xc284551a, 0xa35d4bc2, 0x3423c4ed, 0x7de4d256, 0x370033df, 0xea1d0950, 0x43e29bee, 
    0xbc1d9b04, 0xafe0dccd, 0xb915cb5f, 0xd366e36d, 0x163bb310, 0xc642b90d, 0x0ed4c10e, 0xf5f59e7e, 0xd13a9d30, 0xc0c79ee5, 0x357c95ca, 0x8d9e5245, 
    0x93e8221f, 0xc100ffad, 0xae8c2973, 0x23cb3ded, 0x7270108c, 0xe19ad30f, 0x7c59627f, 0xc263f157, 0x698f969a, 0x43dfdda3, 0x2d8a39a3, 0x64d8864d, 
    0xedb07cea, 0x19f438c3, 0x5f71c6c0, 0x77f04961, 0xed0df148, 0x6d63fbde, 0xef46dea1, 0xb6b36673, 0x4c7225e9, 0x2bc4fc9c, 0x0cc3c96e, 0x71578c67, 
    0x780e2fe0, 0x85e6e05b, 0x4057f8a1, 0x472b6db4, 0x5b6bf45f, 0xb649326f, 0x2c88c58d, 0xeaa99be5, 0x9daf794e, 0x4a8a65c3, 0x5f1b31a4, 0xc5ac8f46, 
    0xa783b2e7, 0xacbc2a3c, 0xd374baee, 0x87f263e5, 0x81f8bff6, 0x427cab7d, 0xc323f0b9, 0xe19f8e2d, 0x9057ccb9, 0xd7b43648, 0xf69fe498, 0xef291c54, 
    0xf38a7b92, 0x9f8200ff, 0x273eef0b, 0x441bcef8, 0xd73e5d46, 0x05dcde13, 0xcacf44c8, 0xe089d5a3, 0x6fada90f, 0x90c5c3da, 0xa7fd437c, 0x966a233e, 
    0xbcb6a43b, 0x83b725d7, 0x222eec7a, 0xd98e23c4, 0x5e5fcff2, 0xec0ff6d5, 0x1f96f0ef, 0x8205fe85, 0x561d5409, 0x92f7f7e7, 0xa5d5a5a4, 0x007000e7, 
    0x9e0ea40a, 0xa9d77abd, 0x1e0d0c25, 0xf3367d5a, 0xae4ec83c, 0xadd65965, 0x2f00fff3, 0xe7f0bb43, 0x0ecf7483, 0x7dbad6e8, 0x0c65c9b2, 0xdd86852b, 
    0xe7faaab6, 0x937a4e1d, 0xb2bfb4d6, 0xe700ff6c, 0xfefeefe6, 0x968b911a, 0xf3f57c34, 0x939bf792, 0x9504953d, 0xf87c3e92, 0xe3451231, 0xbcf70f35, 
    0x56f9db97, 0x3684edc7, 0x6e149eea, 0x7e3dbd9f, 0x85efb9a2, 0x0de263f3, 0x860132a6, 0xaee5c75f, 0x87c7f69b, 0x3ee1a176, 0x987f4ec0, 0xf52711af, 
    0x5d00ffb8, 0x4a93ad0f, 0x3cf5d30b, 0x989ac3c7, 0x1ffd75d1, 0x23f36554, 0xe982bdb1, 0x915477d4, 0x6b40bf59, 0x16dabfe9, 0x75ed5bda, 0xadd8f46f, 
    0x65d9b46e, 0x52b9c88f, 0x99883ba4, 0xd9e96e58, 0xaff92abf, 0xae49b443, 0xb0317288, 0xb7d7119c, 0x6d55aff5, 0x173e297a, 0x02c373f8, 0x4b836078, 
    0xa5e11af3, 0x34e649ca, 0xf439b8f3, 0x560c32db, 0xabb497ee, 0x4e99e91e, 0x9daadaf4, 0x1af3cf96, 0xd3b620fe, 0x6be2da2d, 0x215bb3af, 0x424ad2dc, 
    0xb8716cef, 0x1df6849e, 0x497ccbab, 0x3e344dfb, 0xd2b7b326, 0xb01666ee, 0x9076becb, 0xb8c28094, 0x0eb63b2e, 0xb2610040, 0xdf78ad47, 0xda8bcfc4, 
    0x5c6e8aa7, 0xe9a07fda, 0x891c8fd6, 0xcbc9e409, 0x27cf7372, 0xfddc0703, 0xc34ff021, 0xfa8aeffb, 0xa3838ebd, 0x24d4b586, 0x4e1317b9, 0x016f9114, 
    0xf420cc27, 0x01524862, 0x803c39c7, 0x0b2efa71, 0x070b4f05, 0xcfd7aa56, 0x1f1b3ef2, 0xf6f33a99, 0x5e9f7d58, 0xf8bf87fe, 0xc57fe24b, 0x23de899f, 
    0x00fff0b7, 0xd8d6de82, 0xae69145c, 0xfd1222ee, 0xc92d0692, 0x8073c76d, 0x27cfb9be, 0x77fb9a03, 0xfe86eee1, 0x9dfef01a, 0xfd71b106, 0x8205e2a3, 
    0x0bbabb34, 0xa3605ab5, 0x5bb60379, 0xcc2bae27, 0x35fc16be, 0x6906fed0, 0xb7695812, 0xecfd655e, 0xca53b431, 0x2093cdc3, 0x91710006, 0xa94f82f2, 
    0x1eedd51e, 0xd84bb309, 0xdfc6ebfc, 0xedc11133, 0xaca99fd3, 0x4aa955f1, 0x91d554a2, 0x258ec6e7, 0xb49472d3, 0xfc114f39, 0x39bcd07f, 0x3a685daa, 
    0x5ec46334, 0x4df98429, 0x70f99268, 0x12322ec1, 0x1c208859, 0x634f5076, 0xf683f98a, 0xf5a3fd8f, 0xcbde01cf, 0xdaaab52e, 0xeaf6f8dc, 0x7cd3e2cd, 
    0x1631a53f, 0x9532329a, 0x49b63317, 0x51e20679, 0x637e320e, 0xfdd43980, 0xe19ba2a9, 0xe071ed87, 0x7c699bcb, 0xc8c437ad, 0x101a4bb1, 0x15e5bfbf, 
    0xbc9debf1, 0xfefc0afb, 0xb9c105d7, 0x9e6f2ed4, 0x6eeeef59, 0xc43ccf9c, 0x3beebbb3, 0xf7e42489, 0xd4d958eb, 0x5df49571, 0x4a37ee3c, 0x25b87818, 
    0x93afed76, 0x36f69b3d, 0x00ff75f8, 0x868f3709, 0x2d893aad, 0x19dd85b4, 0xb6d39d71, 0x007c9f42, 0x5ff17dcc, 0x616e4f7b, 0x017a558d, 0xecef78c5, 
    0xbcfdf0b7, 0x4df3f00d, 0x6fd5489e, 0x66f323ee, 0xe0ccc70d, 0x76d10f12, 0xaed7c08f, 0x19a9eadc, 0xc21b71d9, 0x0a37bec3, 0x3d55f1f1, 0xb6274bad, 
    0x4a87a787, 0x91bb3495, 0xe420c1ef, 0xeac13c1a, 0x2ea72a7f, 0x2a3913a1, 0xc4628751, 0x1fdd7e53, 0xae985fa4, 0x771d794b, 0x00ffcd67, 0xff33f50b, 
    0x4c3f0b00, 0xf80ef9b6, 0xe1753c27, 0xfb935e33, 0x6a3b5a63, 0x0303113e, 0x45fc7533, 0x67f0fb7c, 0xe393bb51, 0xcfac9246, 0xc935fb28, 0xf28133de, 
    0xf62bfa1a, 0x549b91bd, 0x852051f0, 0x7156c56b, 0x9391d1ce, 0x526a555e, 0x75092a86, 0x4595923e, 0x7f7e3756, 0x18bee6a1, 0x2d7cd2b9, 0xf8aa7579, 
    0x8db4e5be, 0x9206de12, 0x3577820b, 0x8255aacc, 0x91164024, 0x847f2548, 0xd7e0f564, 0xf1417c94, 0x2fc4cf85, 0x5b5d5f19, 0xf1e9f0e9, 0xda1d4bea, 
    0x706442a1, 0x319fb088, 0xc6dc90d4, 0x15feb870, 0xb915e339, 0x3fea1ef1, 0x6d69ea10, 0xf6d68c3c, 0xa351bc73, 0x6a2cd190, 0x18cb2717, 0x0f609753, 
    0x152767d4, 0xe710dfe7, 0xc1f8c5fe, 0xdf170c71, 0xc69116d9, 0xab921b8b, 0x4398710c, 0x5c7eaa1d, 0x27f12717, 0x829f7ebd, 0x29e028ca, 0xde571747, 
    0xffe6df6e, 0xfcf34300, 0x89af35c7, 0x76102aad, 0xe311678a, 0xf67a3616, 0x6fcfa5a5, 0x7e19e2be, 0xb0dbb1ca, 0x8fc0a0cb, 0xf8e1606b, 0x318cd051, 
    0x01fd0a00, 0x0dfc9efd, 0xe123f06f, 0xb07aeaa2, 0xfc8d4ffb, 0x7b7b1147, 0xeec7a92c, 0x374e82c2, 0x93314a2c, 0x15279693, 0x7c8067f3, 0x139fe117, 
    0xc487587c, 0x3749aa3a, 0x672b7c84, 0xa4da6b1b, 0xbb669faa, 0x061844b9, 0x18097642, 0x09cc0de4, 0x938c2f6f, 0x8bf08f5e, 0xf1b3bee2, 0x9fdac45f, 
    0x7b55358a, 0x27e5697b, 0x7cf2d24c, 0x31d43a9d, 0x78208254, 0x472c281c, 0xcd936cde, 0x2f9ed978, 0x375b72dd, 0x4e399dfa, 0xc6c45601, 0xdbf7dd94, 
    0xd0a5eec8, 0x4bfc203e, 0xf1e2d7b8, 0xa695ceb5, 0xe93ad8b2, 0x77f6d93f, 0x244aab12, 0xe4e51add, 0xfec62321, 0xb51e19e3, 0xaf071fed, 0xe12ffd35, 
    0x84a0881f, 0xe8af7745, 0xd782711a, 0x33632ccd, 0xdf512e2c, 0xb997cfe6, 0x1ca4ca07, 0x90de031c, 0x028d50eb, 0x46bc85e5, 0x93e513e1, 0x748cdd68, 
    0xfc049f14, 0xe21b6a51, 0x16d7b405, 0x9269e7ed, 0x5ccc8fb8, 0x31860187, 0x7835bf9e, 0x5409af70, 0xb14ffc8a, 0x2c9583ad, 0x961e453d, 0xf8a896b7, 
    0xbb06e33b, 0x5e7cdcae, 0x17ebbbf0, 0x4353da9f, 0x25776b7b, 0x2b288bf4, 0xc7d22a30, 0x188b9119, 0x5e7fe0c1, 0x1eeacbb5, 0xeddf3a0d, 0x41862f09, 
    0xf2da7fc4, 0xe503d8f9, 0xe03b2341, 0x2b46e174, 0xf5a8fda6, 0x3ce217d8, 0x6a795930, 0xddab65fa, 0xca6dd148, 0x63036eb9, 0x9f07c0a1, 0xf0a35e51, 
    0xea90c0cf, 0x8d17b53f, 0xf360d975, 0x6e48a16d, 0x90a572a0, 0xe76accb5, 0x063ac669, 0xf4eafde9, 0x87925be1, 0x974fdd3e, 0xc582d0c5, 0x4977703a, 
    0xe823f7a5, 0x2e5d24eb, 0x38651bca, 0xfa9cd7f2, 0x6755719e, 0xa55b1ad4, 0x6bb7b6b7, 0xd40e999b, 0x63c93582, 0xcb737f49, 0x5eeb713e, 0xc15bf095, 
    0x0dd9dc71, 0x4bdcea6a, 0xc0e47475, 0x269fc7d2, 0xe40a7030, 0x8f3c4f70, 0x5527f06a, 0xefd15e50, 0x598d4a73, 0xf8e2e1dc, 0xe41be249, 0xd68aa5f3, 
    0x299f9fd5, 0x7c0fe4a4, 0xf8efb40e, 0xfcef1a53, 0x00ffb4f4, 0x2bfc87bf, 0x60d0c4e9, 0x4faa32da, 0xfea575ab, 0xe4feb7c2, 0x15677d74, 0xb65f1ed9, 
    0x94fcdca7, 0xff2f94fd, 0x253eb500, 0x04d49d99, 0xd93e75b4, 0xe8abfce9, 0xdacadabf, 0x4bc19f06, 0xeb76d43d, 0x78b7b1f6, 0x1f39cc27, 0xea331d2f, 
    0x2ff31578, 0x56373dc0, 0x2bf14bf8, 0x36c41bfb, 0x556f6c4f, 0x721519da, 0x243656ae, 0xbe62dc83, 0x6cb2fd91, 0x7ac3e792, 0xbc21a376, 0x3dc7a5d9, 
    0x6a14fadf, 0x6da976e5, 0x148058ce, 0x1ecba063, 0xd75a83c3, 0x0abfbea4, 0x0dab3e76, 0x6400ff88, 0xcfecb2f6, 0xe29bc793, 0x593388af, 0x138231da, 
    0x7866b73c, 0x1f22dd48, 0x7b6c4532, 0xa0938f2a, 0xa8d77bce, 0x35e15f78, 0x52adc5af, 0xedd74ad7, 0x940fad6e, 0x0ca136cb, 0x89663962, 0x69837549, 
    0xaf723ece, 0xc64f749c, 0xd7c04fbc, 0xd3209e0e, 0x9a86bbb5, 0x259e4ddb, 0x97886b8a, 0x2d6c1ee7, 0xdaf57410, 0x830e5846, 0x7cdf2bb6, 0xe51be21f, 
    0x5fb13f9e, 0x2189374b, 0xf4ee9956, 0x452a8fbb, 0x62c1ec24, 0x5600ff08, 0xc871f8c3, 0xf5fa35e7, 0x0ebe4638, 0xebfda254, 0xb24e991f, 0xcbda238e, 
    0xed077966, 0x3539f111, 0x0d5f7acd, 0x9f05a9e8, 0x4d266d87, 0x441bd6d6, 0xd5ce5826, 0x04f3814c, 0x171cb905, 0x5cc06166, 0xcfb35f75, 0xe874ed88, 
    0x64b300ff, 0x33cf2e90, 0x09efbf67, 0xf06af203, 0x9342773d, 0x94bdf2c3, 0x6ed13c84, 0xae90eb62, 0x80639785, 0x8f1dc179, 0x2bea0842, 0x6b9fc14b, 
    0x616cd6b8, 0x252d7986, 0x5c846592, 0x3d36d6c7, 0x9d4ebf0f, 0x76ccf3eb, 0xa994ce15, 0x99f5b1b7, 0xf1e1314e, 0xf96bad51, 0x4da09f7a, 0x3bcbbbe2, 
    0xded29e78, 0xed1c983b, 0x65953b90, 0x0e8e60e0, 0x00ff6a6b, 0x3b78abe2, 0x7ba9d6e1, 0x88a49526, 0x7be2d292, 0xcd99a2a9, 0xf88cc0c6, 0x600b4039, 
    0xab3d17b6, 0x9774f890, 0x5e00543a, 0xa8a8a6de, 0x106c2d47, 0xd7d403f4, 0xf673f14f, 0x00ffd579, 0x5b01af68, 0xf6eba241, 0x31b01cda, 0x80276d91, 
    0x5b3ebaec, 0x9f3aa32a, 0xc9d81294, 0xe2d08307, 0x15077fbe, 0xcf2d67cf, 0x30f1ccbd, 0x4d2e0785, 0x35a8ce4f, 0x5f18cf0b, 0xbb538778, 0x0cf5ee25, 
    0x9b6eb1bb, 0x1cf481db, 0xbbafa00f, 0x965a07fe, 0xeaa27df8, 0xa87383cf, 0x23adb669, 0x0a29498e, 0xe07f32c6, 0xd448be26, 0x87f818be, 0xf588dfe0, 
    0xcff80eaf, 0xd4469749, 0xacd0c2f6, 0xc5733c84, 0x19f27ef3, 0x78aec301, 0x38743cc8, 0x1e3eaaaf, 0x89a67aea, 0xb0c2dbf0, 0x73c7d9d9, 0x0f991e65, 
    0xe5248753, 0x308cedb8, 0xbe185faf, 0x1e7ceeca, 0x7e0eb711, 0xec2cfeba, 0x8b3cc9f5, 0x02368b69, 0xdff535a1, 0xa7217480, 0x8f483f78, 0x22d22685, 
    0x83eed371, 0x1de16bfd, 0x6b90c74b, 0xb67cba0e, 0xc8933697, 0xe3811ce9, 0x546700dc, 0x9abc8ee0, 0x17e34bfb, 0x7c0f7fc6, 0xd520f009, 0x892a8675, 
    0x59d9da1a, 0x52d7cca0, 0x2fa2c205, 0xa04fc673, 0xc62b3dc9, 0x43a928c4, 0xa3cad4ab, 0xc7c23ba9, 0xebc5e67d, 0xd14ca8c7, 0x7feac7e6, 0xccafd8ef, 
    0xeef657bd, 0xdfacd1f8, 0x7c64774b, 0x39dbe13f, 0xefe93009, 0x1a0fd762, 0x6121dd76, 0x5501f893, 0xbeb6e13f, 0x77d07f39, 0x27f8bfc3, 0xebec00ff, 
    0x68a796ab, 0xbb0cac99, 0x20ded698, 0x097fc59b, 0xa2780afe, 0x94fa6cef, 0xf7b637d7, 0x71c43f37, 0xff332e6f, 0xf58a7c00, 0x55a3db1f, 0xcce12f6d, 
    0x79d24431, 0x70e24577, 0x58feb78d, 0x197932ca, 0xf31d4fc6, 0xbfe0635e, 0xbfe8dc06, 0xe286efb2, 0x7b8eb8b8, 0x995e279d, 0x143ce395, 0x8f312992, 
    0xaff5effb, 0x66bafd4a, 0x58013f8e, 0x4ddc2643, 0x88bbec1c, 0x808d301f, 0x6bf4fdc7, 0x69ae19a7, 0x8c7ef945, 0xacc9c0eb, 0xf664acba, 0x083ef46f, 
    0x874799b3, 0x51cd9b26, 0x4bdc2577, 0x2a9f431c, 0x3f498e10, 0x47aa10ef, 0x62af3970, 0x51fc9ffd, 0xdbada126, 0x059bbfad, 0x2cafacdb, 0x1864dcb2, 
    0x9c53c780, 0xd047c19d, 0xb0e98a57, 0x255e78cd, 0x032cf70c, 0x3b380306, 0x071daf82, 0x7aad0f5c, 0x799bc10f, 0x4f172f2f, 0x1c7a9737, 0xbd3db28e, 
    0x8ff9aaed, 0xb23163bc, 0x0e95ee63, 0x9f421d78, 0x0513fd7a, 0x5da2c651, 0x65557c2c, 0xf85ce878, 0xa91665c3, 0x61cb5aa8, 0x4bab6d77, 0xdd918415, 
    0x05305bdc, 0x4812ed5b, 0x54909081, 0x41884ca4, 0x6af2541d, 0x0a0fc3c7, 0x4c78dc5c, 0x1b800ceb, 0x3bce5a9d, 0x597e0e6c, 0xf3fa4806, 0x6b9c57f9, 
    0x8eefa51a, 0x34e46f7c, 0x2d3244b1, 0x763fd0be, 0x287f54be, 0x20493d76, 0x93e4b164, 0x3bfc525f, 0xbd5453d2, 0x106c6dd2, 0xabe80e8f, 0x48192ebd, 
    0x761b7717, 0x8aea9982, 0xc9b13b09, 0x8aaf743c, 0x492931ce, 0xbf9be8a8, 0xdb67fedd, 0x5a4538e4, 0xd357d25c, 0xe4d7574f, 0xe2d1648f, 0x42d1284b, 
    0x2481a500, 0x7bbde37a, 0x8df58017, 0xca816c8b, 0xce00c880, 0x505e5107, 0x85a979b1, 0xbae2391d, 0x26ea0c4f, 0xb85548da, 0xf5739421, 0xaa34f115, 
    0x3329c9b8, 0x82c24cf4, 0xefd849ab, 0x7f6d00ff, 0x00ff9684, 0x8f663f18, 0xc25b5d10, 0x0d5fe2ad, 0xa5b13edb, 0xe2fd205c, 0xb174d798, 0xc66bd703, 
    0x29d46318, 0xe1215eed, 0x3cd375eb, 0xafdaa21d, 0x09844d3e, 0x8c1aed83, 0x7ff6957e, 0x3508f580, 0x7241286d, 0x295234ab, 0x90db588e, 0x230846ca, 
    0x9b5f83d0, 0x8fb5125f, 0xf130fc1a, 0xbbb4897f, 0xdfefd86b, 0xb726d44d, 0x7c519716, 0x9b1203bb, 0x0a05c871, 0xafaff591, 0xd2e99cae, 0x313f7694, 
    0x5409cda3, 0xfd9b3e8b, 0x591cbe9f, 0x57c5ebf8, 0x04fead7a, 0x98b05c1a, 0xf27e00e1, 0x3981db4d, 0xf1e736ec, 0xb0fd2aaf, 0x8e0769bc, 0x768b2cfe, 
    0xf049337f, 0x23140dfc, 0x38310d77, 0x3cf58091, 0xf5017d2e, 0x3fe19fae, 0xe13bfdc5, 0x5fdbc1d7, 0xdb263e8a, 0x5677eaa4, 0xa0435077, 0x7b9ec5c2, 
    0x02aa62a5, 0x27d727e7, 0xa27c0d80, 0xf8a8493c, 0x465d52ab, 0x63e23ffd, 0x15cb337f, 0x7792fbba, 0xbe1ef61c, 0xa79eafb9, 0x52f1950a, 0xd7265a9a, 
    0x38e8f5cc, 0xed54f341, 0x9a5feaa7, 0x2224d5e2, 0x7f9304e5, 0x07f25811, 0xfb4ce1b7, 0x00ff9d5e, 0xfafd0f3c, 0x67f13eaf, 0x3d4bf589, 0x397d7b72, 
    0x583cfbe2, 0x2c09b64c, 0x1f6b9e3a, 0x110f13fe, 0xfb1f7e7f, 0x7d857fe4, 0x6a1ba112, 0xe562298e, 0x5b7d6677, 0x43d931fb, 0x5ec87ead, 0x8fbcb829, 
    0x5ddf9acf, 0x9cd88944, 0xc0501ea0, 0x8dbe00ff, 0xc100ff67, 0x5d242e48, 0xe196c03b, 0x66e6948f, 0x2b70ee2b, 0xff4ff65f, 0xf13a9300, 0xd387fd8f, 
    0x566800ff, 0x8714fc27, 0x7f8047fd, 0xa8f4afed, 0x2300ffa9, 0xf28f3e4a, 0xfe172e67, 0x7fbdf545, 0x4083f9c8, 0x195a89b1, 0xf65022c0, 0xd67110e0, 
    0x00ff73e1, 0xd7cc8fa0, 0x53eaad41, 0xf85cdadb, 0xeab01282, 0xe9b6c891, 0x62176a2c, 0x1f03b910, 0x63bdcf53, 0xeff13fe8, 0xb574fd1f, 0xe2d100ff, 
    0xfe8378af, 0xfadfcb44, 0xb5e45ffa, 0x3ad2f0f7, 0x892f251f, 0xdfc23f9d, 0xfed66802, 0x6ba4d62e, 0xddf07251, 0x7cdc8c14, 0xe3c101fb, 0xb4a4aff3, 
    0x0aec11b5, 0x00001430, 0x6df80daf, 0x572300ff, 0xf3eb3f88, 0x9e7b2dfa, 0xd287f79d, 0x6acd16bf, 0x89da584e, 0xa6fb99bd, 0xc0114e47, 0x8e6e69d2, 
    0xf9e74dab, 0x4aacbd56, 0x41700425, 0x34b22207, 0x5f00ffde, 0xbf565be9, 0x5ce107eb, 0x387ae851, 0xeea1df9d, 0x74260d5f, 0x623c8661, 0xacfd59be, 
    0xfdb2e16c, 0x1c21f5a7, 0x85ed6d63, 0xe406f39c, 0x9f29ec33, 0xaff217c9, 0xf51bfea8, 0x2fe6abfc, 0x4efef3da, 0x05fb4f82, 0xec00ff59, 0xff10f7d5, 
    0xe5477400, 0x19df7f95, 0xd13d1ee5, 0xfcf023ed, 0x242106d7, 0x378d2989, 0x937115f2, 0xc335db81, 0xbee83f68, 0xbe36f119, 0x6fa536bf, 0x7ea44808, 
    0x001d2942, 0xf18d5eed, 0x5b45fe0b, 0x3ff8fa9f, 0xce790dfa, 0x2400ff97, 0xeebfc5cf, 0x1caef227, 0xd99ddeb5, 0xec7ee6ea, 0xe00747d2, 0xf858059f, 
    0x961a44bf, 0x5dcb2da1, 0x31062b49, 0xfe1eb4cb, 0xffbff59e, 0x438b0a00, 0x979e00ff, 0x00fff7bf, 0x4bad00ff, 0x44fe87f0, 0xb3ebbfd8, 0xed4a00ff, 
    0xf06cd76b, 0x00d9ff4f, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(DeBandNode, "Deband", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Enhance")
