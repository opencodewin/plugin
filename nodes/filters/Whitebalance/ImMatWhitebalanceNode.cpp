#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "WhiteBalance_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct WhiteBalanceNode final : Node
{
    BP_NODE_WITH_NAME(WhiteBalanceNode, "White Balance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    WhiteBalanceNode(BP* blueprint): Node(blueprint) { m_Name = "White Balance"; m_HasCustomLayout = true; m_Skippable = true; }

    ~WhiteBalanceNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_TemperatureIn.IsLinked())
        {
            m_temperature = context.GetPinValue<float>(m_TemperatureIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::WhiteBalance_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_temperature);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_TemperatureIn.m_ID)
        {
            m_TemperatureIn.SetValue(m_temperature);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_temperature;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_TemperatureIn.IsLinked());
        ImGui::TemperatureSelector("##slider_temperature##Temperature", ImVec2(200, 20), &val, 5000.0f, 2000.f, 8000.f, zoom);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_temperature##Temperature")) { val = 5000.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_temperature##Temperature", key, ImGui::ImCurveEdit::DIM_X, m_TemperatureIn.IsLinked(), "temperature##Temperature@" + std::to_string(m_ID), 2000.f, 8000.f, 5000.f, m_TemperatureIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_temperature) { m_temperature = val; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("temperature"))
        {
            auto& val = value["temperature"];
            if (val.is_number()) 
                m_temperature = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["temperature"] = imgui_json::number(m_temperature);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf2c9"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_TemperatureIn = { this, "Temperature"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_TemperatureIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::WhiteBalance_vulkan * m_filter   {nullptr};
    int m_temperature       {5000};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5917;
    const unsigned int logo_data[5920/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x2e696b5b, 0x54e2cee4, 0x17afc975, 0x4caea2fd, 
    0x4f84d69a, 0xc5fc7852, 0xe3af167a, 0x8400ff34, 0x76c3d3fa, 0x5baa2b92, 0x6ebcd3bc, 0x038c0709, 0xd7bc9e8e, 0x53d3fe98, 0xf05a937d, 0x2f0940f0, 
    0xf357d48f, 0x624911f6, 0xc83f7f21, 0xb330fafd, 0x01dd39bb, 0xe8b9db8f, 0x98b7b72b, 0xed783010, 0x7383065c, 0xb992e4b6, 0xcaae7624, 0x5f7070d2, 
    0x63392e62, 0x52a557d0, 0x603bd6fc, 0x37738d95, 0xba2ace19, 0xbc8e2cdf, 0xfd34b81e, 0xe6dee632, 0x22a17c70, 0x773b1470, 0x7bbdd2ef, 0x8d469ac0, 
    0xa408daad, 0x24a4acd2, 0x2b918ce5, 0x788aae31, 0xe7d25539, 0x61cc8b8f, 0x6ce45785, 0x76dc09f2, 0xb12200ff, 0x957cc275, 0x8fd74e95, 0xbee23e95, 
    0xc0aff184, 0x3abd7b7b, 0x2b0cef4b, 0xac44df5b, 0xd2fca7cd, 0xfc0ce024, 0xb05b59bd, 0x81d31100, 0xb1f8395f, 0xcb6bf4ee, 0xb5503b8d, 0x02fec296, 
    0x845b5b56, 0xc191eb28, 0x111cc0da, 0x820c24c8, 0x95f05c0d, 0xb436ed30, 0x1f0f56ee, 0xf7c3c786, 0xeed1556f, 0x2e86377b, 0x59a1a906, 0xe7fd28cf, 
    0xfb600396, 0x9634e155, 0x6c4f5117, 0xc38925fb, 0xe420f4a1, 0x7be11d57, 0x8be161a1, 0x456ca64b, 0x4e6286e5, 0xb4e61e00, 0xe48dd465, 0xd060a23b, 
    0x0e5905b0, 0xf15a1f41, 0xb929412b, 0xc9bee62e, 0xf69b8eea, 0x7eecf087, 0x8fbef028, 0x5f4f2ff1, 0xb154462a, 0x192722d5, 0xcfb0c239, 0xd047365c, 
    0xc4e7f98a, 0xf0b02ede, 0xf5ae863f, 0x36cc4fdd, 0x215561b0, 0x7e8eb45c, 0x9e4c8fea, 0x2ffa8ae7, 0xc400ffe1, 0x5ac0238d, 0x8b17bb6e, 0xf0e32dee, 
    0x82acdd7d, 0xa472edf7, 0x00a79d69, 0x37772117, 0x929100dd, 0xf8587e45, 0xf8b3c6f7, 0xba37c5f3, 0xc18e659e, 0xacd37526, 0x3dfb39e4, 0x7a90efbe, 
    0x7b32c66e, 0xe5d0d79c, 0xf88e3758, 0xff1dbb9f, 0x9af9c800, 0xa995d7f8, 0xbc77ed61, 0x00ff597b, 0x7a74e297, 0xf10bedaf, 0x9e51fb12, 0xb7c43b7d, 
    0x8c9c0dfa, 0x7c1a764c, 0x7f8c22e5, 0x5a4fea53, 0x0b00ffab, 0xfd97e2ef, 0xfeefba0f, 0xede39a05, 0x2de223bc, 0x6171335e, 0x536bcde1, 0xb60c9284, 
    0x8a4c1236, 0x1cb0d4dd, 0xc53dee30, 0x0a00ff4b, 0x00ffc5fb, 0x9ff825f4, 0x120500ff, 0x7d8500ff, 0xe2e1c3e2, 0xf86354b9, 0xb8f12e1f, 0x33b93b99, 
    0x37848fec, 0x417cdeb3, 0x19329737, 0x4686a66e, 0x46fc4392, 0x426abfb6, 0x73f8afab, 0xa1931977, 0xbeb3e23e, 0xf119c310, 0x3f063b9c, 0xabfdfd72, 
    0xb6adf66b, 0x337cd745, 0x5f7f7ec6, 0x73985f71, 0x978d8e25, 0x5bfdd04f, 0x15475eaa, 0x39a9cca2, 0xd631b025, 0x49460dba, 0x96b0d905, 0x01e38507, 
    0x07c1389c, 0x10fa18a8, 0xd0c3036b, 0xca62cd0b, 0x89f671cc, 0xfd2783e3, 0x6bfd0bb6, 0x68367ed2, 0x00ffe9f2, 0x843bf513, 0xe44fb10a, 0xff7350ec, 
    0x77542c00, 0xd67400ff, 0x49e792d2, 0x94d4a496, 0xe8c66617, 0x40dad0d6, 0x1b246e2e, 0xdd4f90ba, 0x85eff65a, 0x1fe0351a, 0x4e07b86d, 0x47ee97b5, 
    0xb95e67d2, 0x3ee87e0a, 0xde419fa7, 0xfac297bc, 0x5cf0f96a, 0x39f20d5c, 0xf080c013, 0x6fee1ca4, 0x8e649c7e, 0x68b7577a, 0x9b00ff1a, 0x65129400, 
    0x97d9bd51, 0xf9c7b3f8, 0x9a61e815, 0x3ef44de7, 0x70e63463, 0xd95387e4, 0xb7a27974, 0x5b14568d, 0xc0762765, 0xa9e35c72, 0xd779ad27, 0x17f015ed, 
    0xe1cbf84e, 0x567bb5e9, 0xfac5d79a, 0xc6c2845d, 0xeda35d4b, 0x563423c4, 0xdd7de4f2, 0x80ba01f8, 0xd35bad4f, 0x97604a3c, 0xbb99b763, 0xfceb159c, 
    0xc6d776ab, 0xce424dc7, 0x72bbcdec, 0x0e764085, 0xbda79fc3, 0xf42ac57d, 0xaf92c36b, 0x2a777ec2, 0x552d8c58, 0x1f8d9656, 0x8bb36824, 0xe68300ff, 
    0xd65d1943, 0x8271940d, 0x1d410e0e, 0x4fb8e688, 0x157f9ed8, 0xa6f0597c, 0xe85aa4a3, 0x68d177f7, 0xea5179d2, 0x2fc1364c, 0xc70e2352, 0x19b8e30c, 
    0xaf38c1c0, 0x3ff824b0, 0xfa86f8a4, 0xb6b9b5e8, 0x7923efd0, 0xed042d2e, 0x4b72e5bd, 0xd90ac9f3, 0x670cc3c9, 0xe06f578c, 0x5ff80e2f, 0xa185eee0, 
    0xb44157f8, 0x5f472b6d, 0x6f5b6bf4, 0x8db64932, 0xec2c88c5, 0x27f5d4cd, 0x60cdd73c, 0x35caa8f2, 0x2ed28a61, 0x5d7fcd4a, 0x67c6ad4f, 0x3ca78bf2, 
    0xbab3bb2a, 0x55fc747b, 0xda2fca8f, 0x05e200ff, 0x06f1adf6, 0x0c8fc0eb, 0x867f5ab6, 0xc1de31e7, 0x5ed3da20, 0xd97f9263, 0xbea77050, 0x802bee49, 
    0xbef025f8, 0x8c87e2f3, 0x6444b4a1, 0x3d71add3, 0x115ec0ed, 0xf5a0f233, 0xea037862, 0xb1f6576b, 0x103f64f1, 0xdf6900ff, 0x86a5da88, 0xd7bcb6e7, 
    0x7a87b724, 0xc4222eec, 0x9ff18c23, 0xedf5f52c, 0xcf7e615f, 0xf861093f, 0x2d48e061, 0x4b7540a5, 0xc98bf683, 0xd3ea5256, 0x00c0db76, 0xf574e02a, 
    0x7abdd6eb, 0xe195a7f2, 0xbffc2854, 0xa5947956, 0xebac3357, 0x89fef957, 0x87d71d79, 0xf8a6237c, 0xd3b64677, 0xa0ec95ed, 0xc0b07085, 0x9cebab70, 
    0xbda73e75, 0x5a667f69, 0xcfc5cf7f, 0x2335fcfd, 0x3e692c6e, 0x3e69f86a, 0x67f7e466, 0x8996a2bc, 0x86f00b1e, 0x00c68b14, 0x36e50d3f, 0x3fb5cadf, 
    0x53936f6b, 0xb713b3f0, 0x8afa1133, 0x376bf8c2, 0x98b657fc, 0xff97613d, 0x87ae4100, 0x758bbbf6, 0x728500ff, 0xf08f8b71, 0xd79f64ae, 0x00ffe861, 
    0xdd7c7d26, 0xd44f1fa5, 0xea0f9ff3, 0xb4d74743, 0xba94499d, 0x72415e59, 0x48aa3bea, 0x6b407fac, 0x8f00ffe8, 0xeb5ed2b6, 0x47a77b6b, 0x49a7736d, 
    0xc24d7e24, 0x89304390, 0xd9e91981, 0xdff92abf, 0x6e49b446, 0xdadd3758, 0xf35fc778, 0x6b7b7acd, 0xcff0cbb1, 0x131bdec3, 0x6e3a04c3, 0xe5d270f3, 
    0x691af364, 0xb6e973dc, 0xa9b5e254, 0x1aac9e4b, 0x56a47edd, 0x558d124e, 0x7fd3cfb6, 0xd66b63d0, 0xb8b165da, 0xd6ece79a, 0x251977c8, 0x62b7773b, 
    0xb027f4c4, 0xe2575eed, 0xec6bda4f, 0xb7b326fe, 0xfb66eed2, 0xb8ef322c, 0x0c480969, 0xbbe38229, 0x0600e460, 0xd77a241b, 0xf84efc8d, 0xaaf8aac3, 
    0x9bc5fee5, 0xe2d13a1d, 0x64ea2291, 0x794e86e5, 0xfb60e0e4, 0x047fa59f, 0xf8bd3e7c, 0x6859abb3, 0x4beb3e3a, 0x3317b9f7, 0x6f9114ce, 0x08f3496e, 
    0x1492183d, 0x4fce7180, 0x857e1c20, 0xe169cb81, 0x1662eb60, 0x58f091bf, 0x9fd6d1fc, 0x7e6bc3b2, 0xa00ffdbd, 0x43f127bc, 0xefc4c7e2, 0x7bf8db11, 
    0xd5d266c1, 0x5df32867, 0xfb2544dc, 0xa95b0c24, 0x0b3877de, 0x3879aed3, 0x3fdbd71c, 0xf047f40f, 0xc1a781de, 0x430d5cac, 0x4b23585f, 0x559ba0bb, 
    0xb0370aa5, 0x38d9b21d, 0x3ecd2bce, 0xd037fc17, 0xcf6806fe, 0xf9dca661, 0x46b1d797, 0x7e2bcfd1, 0x18804cf6, 0xca47c601, 0x57a43e09, 0xd52678b2, 
    0xbbce932f, 0x1c31d36d, 0xfa39dd1e, 0x6abdca9a, 0x49a1aa32, 0x96ae7924, 0x9473d321, 0xc4678eae, 0x3f341f5f, 0x5a77ea0e, 0xf1188f16, 0xfd218a07, 
    0xbea45adb, 0x4648305c, 0xc8294942, 0x27971d07, 0xfff215d7, 0xfb1ded00, 0x037e6b48, 0x634d96bc, 0xf1bab554, 0xc59bd5ed, 0x5b1ae8a6, 0x23a36b11, 
    0x76e60229, 0x7183bce4, 0x3f198728, 0xea1cc031, 0x3729d4fe, 0xd3da1fc3, 0xd23697c1, 0x896f5af9, 0x682c4390, 0x00fffe42, 0xaec75795, 0x2becf376, 
    0x5b5df7f3, 0xdca87393, 0xeab3bcdf, 0x674e3717, 0xec2c669e, 0x49e28efb, 0xd5fa3d39, 0x4aeb9cc2, 0x5ddd4f2e, 0xd3c1ee3c, 0x2c9f1a86, 0xf5badc15, 
    0xfeb347b3, 0xbf0ebfc6, 0xe7f124e1, 0x89c2bdf6, 0xdd84742d, 0xd39d7119, 0x7c9f42b6, 0xc87dcc00, 0xb7e6bcaf, 0xe8552031, 0xec077905, 0xfcfdf0bf, 
    0x4cebf00d, 0xd455449a, 0xa6f3232e, 0xe02cc10d, 0x76d10f12, 0xd66be0af, 0x893535ee, 0xd146dcb6, 0x7c45fc30, 0xeb5f63ce, 0xa2678718, 0xd1b0f5d0, 
    0xaea86954, 0x189990ba, 0xc68f641c, 0xef6fcd93, 0x92a0ce1f, 0x417207fa, 0x6f7a1f04, 0x5ff521db, 0xbbbceafb, 0xd965c72e, 0x6dc3aff3, 0x9dc46f4f, 
    0xc3ecdc36, 0xafe331c1, 0xfb895e0b, 0xea3b5a5c, 0x4050141e, 0x7f00fffd, 0xf800afa8, 0x49dea83f, 0x8e4b9bf1, 0xb30ff342, 0x38d81d5c, 0x0b7d2d1f, 
    0xcdca58fb, 0x9038f8a9, 0xabe2b542, 0x32da1930, 0x945ea539, 0xa529e3a9, 0x4e4d1fd5, 0x4bc96aa4, 0xef3cf4d7, 0x4f9ab7c3, 0xb5aeae85, 0x9d5c175f, 
    0x81b7451f, 0x9de086a4, 0xed2a73cd, 0x0288233b, 0x5f0902d2, 0x9e2319e1, 0xc41f790d, 0x7cdd191f, 0xf47df141, 0x5a7cdaf6, 0xc7925a74, 0x99508878, 
    0x272c221c, 0x372475cc, 0xdf2e9c31, 0x319e53e1, 0x2e139f5b, 0xa23ac4d3, 0x1b234f5b, 0x28de397b, 0x9668c8d1, 0xf2960b35, 0xec9214c6, 0xcea8cf01, 
    0x7ecf2b4e, 0x5f34cc22, 0x4110b78c, 0x6991fd7d, 0xbeb1481c, 0x338e6055, 0x4fb56308, 0xfee482cb, 0xd2aff724, 0x1c4d19f0, 0xa98a3525, 0xe75f9aac, 
    0xd9e747fe, 0x115f6da6, 0xed20545e, 0xc61bce14, 0xdaebd964, 0x053c959e, 0xec9b20ee, 0x0cb31d8b, 0x7b042eba, 0xc20f075b, 0x8861848e, 0x1fe85700, 
    0x5be0f7ec, 0x0c1f817f, 0x0faba5c6, 0xc4db78b5, 0x59907951, 0x763f4ee5, 0xb8711214, 0x3919a344, 0x5f716239, 0xc10bf837, 0x37f1183e, 0x457c98c5, 
    0xe1cda3aa, 0xc6590a2f, 0x6556ed75, 0x5d5eb34f, 0x42668c22, 0xc8090976, 0xbc25dbf9, 0x7a4d32be, 0x8a3fc237, 0x7fc5cfda, 0x285e6a10, 0xeded55d5, 
    0x4c2726ae, 0x9d7c32d3, 0x5431d43a, 0x18783082, 0xf7110b0a, 0x99d7249b, 0xa9dce29a, 0xd7454739, 0x7ffeedd5, 0x9751ae71, 0x4aa5b8aa, 0x3bbdfb6e, 
    0xefdbf32f, 0xfcd0a73b, 0xe722f17f, 0x97c68f5e, 0xc99c565a, 0x7fa5eb62, 0x48dcd967, 0x749328ad, 0x42c8f36b, 0xc6dd8d47, 0xd86b3d32, 0xebdd10fe, 
    0x8fc277da, 0x930f4311, 0x3a68af75, 0xcdd78679, 0x2c3363dc, 0x6e98514e, 0x3ec8cdce, 0xe0e02055, 0xedcff41e, 0x708586a8, 0x3d3fdec2, 0x8d368913, 
    0x4b41c7d8, 0xf6c45bf0, 0xb73edeaa, 0xf3767b9a, 0x475cd9f4, 0x00870ce6, 0xe6d7638c, 0x88a59aaf, 0xfac6ea8c, 0x8ffcfa5a, 0x6561c4ae, 0x45510d4f, 
    0x6a796b6d, 0xf8153eb6, 0xb7ebaec3, 0x287c171f, 0xd4d0bdfa, 0xd6fa8665, 0x59e74bee, 0x56c15941, 0xc52e2496, 0x1fe3608c, 0xba72add7, 0xbb4e8387, 
    0xe14b44fb, 0xfb8bd89d, 0x3136535e, 0x9d91a0f2, 0xa3703af0, 0xd47ed315, 0xf109f43a, 0x3f7b0b16, 0xb44c5f2d, 0x221ab97b, 0x6d58ae32, 0x00878e0d, 
    0xd46b7d1e, 0x12f81a7e, 0xda00ff1b, 0xecfac68b, 0xd0b679b0, 0xbbd50dc7, 0xae852c95, 0x4e3b5723, 0x4e37d031, 0x31ec5ecd, 0xed0dc71e, 0xfc1b6d2d, 
    0x9ccffc74, 0xc58351c6, 0x26dd4138, 0x177d04bf, 0x59a68b66, 0xeea76ec3, 0xb55e7f2f, 0x4d83fa0c, 0x0341b072, 0x76c8dc5c, 0x2cb948a4, 0xf9cb947e, 
    0x018359f0, 0xfca2d7f8, 0x5c72f01d, 0xe6628dd9, 0xcbd52d01, 0x8fa5259f, 0x8c634c3e, 0xfa0447ae, 0xc9f86a8f, 0xd25e524d, 0x35f3df5b, 0xb61825ab, 
    0x257c20ce, 0x2700f5d7, 0x19ad2d95, 0x4993e5bf, 0x14f81ec8, 0xd698c27f, 0xb5e700ff, 0x3ffcfdaf, 0x264c5fe1, 0x95510081, 0xad5b7d52, 0x0f06fb3b, 
    0xa95b47ee, 0xc723fbe2, 0x3ff7c878, 0x6500ff27, 0x5bfb434d, 0xdd9d31e2, 0x43474b40, 0xfe484eec, 0xfd87be46, 0x37a12daa, 0xee590d1e, 0x6b1fb6a3, 
    0x4fc07c1b, 0x5e3e7298, 0x7aea033a, 0x005fcd57, 0xe15bbdb4, 0xd176c427, 0xf662453c, 0xf0ac7acd, 0xe52aa34a, 0x7b902463, 0x7fd1578c, 0x5ca205b6, 
    0x52c76a78, 0x349bed93, 0xffbba7b8, 0x5c8d4200, 0xb92dc4ae, 0x8c0210cb, 0xd8631974, 0x17b76b70, 0xd3697f49, 0xf5a1db82, 0xb0456cb8, 0x69f4b4ca, 
    0xb0289f3b, 0x119fc59b, 0x63b4b166, 0x6b9e096f, 0x1b0171b3, 0x48e643a4, 0x51658fad, 0xcf1974f2, 0x0b2ff57a, 0xf8b5257c, 0x69dba8b5, 0xbbb3205e, 
    0x2c533eb4, 0x88318cda, 0x25159ee5, 0x38a702d6, 0x71becaf9, 0xbcd607d1, 0x1297c047, 0xddb48827, 0xb6a7e572, 0x628967d3, 0x3b15e69a, 0xc40b9bc7, 
    0xb0763d1d, 0xb6db01cb, 0xe0037d0d, 0x79df11df, 0xd93b8bd1, 0x0a4d3c6e, 0x695ed234, 0x14290277, 0x8805b393, 0x2f5bfd23, 0xce91e3f0, 0x458ef56b, 
    0x41e90a53, 0x9a1fc9fb, 0xdded657b, 0x3cdb6c59, 0xf88af67b, 0xbde69a9e, 0x44748627, 0xb6c3d382, 0x7beb2673, 0x9a16a21d, 0x2013da36, 0xb780ca7c, 
    0x9be58223, 0x9f755ca0, 0xad88d7b3, 0xa671fb74, 0x664c813c, 0x00ff9e42, 0xe40762bd, 0xbdeef3d5, 0x2487bfa0, 0x7948397b, 0xd4c5dca1, 0x9785ae10, 
    0xc1798063, 0x470ebd1e, 0x47f0d76a, 0xbb752edb, 0x96b82118, 0x586659d2, 0x581fd37e, 0xef38f4d8, 0xf87aa7d3, 0x4f0d6edc, 0x455fe90e, 0xf5b9cfd7, 
    0xd0394619, 0x57abc6c5, 0x3ef596be, 0xdd136ffe, 0x2545dbd9, 0x3077bcad, 0xdfe1dab9, 0x04032f6b, 0xc5d61c0c, 0xe023c5f7, 0x7a8700ff, 0x569aeca5, 
    0x4b4b2294, 0x8aa6ee89, 0x151b3767, 0x40e5c819, 0x5cd8822d, 0xe153aef6, 0x70e973f4, 0x5dbcbda8, 0xb38c5049, 0x8127855b, 0xf8a36bee, 0xea3dfbb7, 
    0x803fb4df, 0xb5d1b6e0, 0x580e7deb, 0xb3b6c858, 0x9f5c76c2, 0x9951952d, 0x6c09ca4f, 0xd0830767, 0x073fbee2, 0x2eaaba18, 0xf3ee335a, 0x543a454c, 
    0xd72eb95c, 0xda777ee6, 0xca78dedf, 0xa57ac4f7, 0x51eb5ede, 0x748bdd05, 0xec01dcde, 0x5f411f38, 0xb5107c78, 0x44fbf02f, 0xb40f5cd5, 0xadb6e9df, 
    0xa424f523, 0xffc9182b, 0xf99a8000, 0x97e1f722, 0xf80d3e88, 0xeff05b8f, 0x7499f48c, 0x2d6c4f6d, 0x3b1ebe0a, 0xe661be88, 0xd7e12043, 0x3a1e643c, 
    0xa7fa1a1c, 0xa9a5eee1, 0xfc0ddf68, 0xa49d0d2d, 0xe9711677, 0x7238f590, 0x6cc72d48, 0xd97b8561, 0x3b92abae, 0x1f4b4f5f, 0xa9bc820f, 0xfc77f5f3, 
    0x4e6bd959, 0x9394b760, 0x5a4fa88d, 0x7ac0c7fa, 0x96f0b010, 0x9b0b9994, 0x41c78958, 0x6bfd83f2, 0xc743fde1, 0xb6ceea50, 0xda5c5a12, 0x382223cf, 
    0x1900f768, 0xaf2338d5, 0xf8c3be26, 0x4193f1bd, 0x6fe01bf8, 0xca5d4ded, 0xd6b6a8c6, 0x35336876, 0xa87081cc, 0x93f1dc8b, 0x4a4f32e8, 0x31c2d9f9, 
    0xf5ae2e9c, 0x597bc531, 0xcf2d4da5, 0x8fc11240, 0x0df89fbd, 0xbf1e741e, 0x697ee5f8, 0x27b77fea, 0xf6627dc6, 0xe123bb5b, 0x590f00ff, 0xc28649c8, 
    0x78b8264b, 0x0be9b6d3, 0xc5f4930c, 0x8600ff55, 0xffe3f8d1, 0x0ecf4100, 0xa0e000ff, 0x75f100ff, 0xfed5f2eb, 0x97fdc9e9, 0xf1b2c754, 0xf82cfe0c, 
    0xc547f04d, 0xd4677b37, 0xb7bcb9a6, 0x783fb9b9, 0xbf6edee2, 0x4aafc8f7, 0x6675b8fd, 0x241cbed2, 0xab3c9971, 0x4738f1bd, 0x4619d6db, 0x4f3d234f, 
    0xbcceeb1d, 0x9dabe00b, 0xf05ef60f, 0x113717d4, 0xeba473cf, 0x47bc32b3, 0x26479282, 0x7d00ff31, 0x5fe8b5fe, 0x47d114b7, 0x29cefef0, 0xa768e236, 
    0xf940dc65, 0x3f064cc4, 0x8c55a3ef, 0x436f96e5, 0x73f86f97, 0xb236c1d3, 0xdb9b91ea, 0x083ef49b, 0xe17f99b3, 0x356f9e1b, 0x7097dc45, 0x7c0e51ac, 
    0x243942a8, 0x42bc00ff, 0xe7c01da9, 0xec2f7bb5, 0x7589e2f5, 0x5bdc7e0d, 0xba5db0f9, 0x35cdf2ca, 0x0ba221c0, 0x9d9cad8e, 0x57d047c1, 0xcdb16989, 
    0x56145e78, 0x30d4e192, 0x90833360, 0x75d081a0, 0xa1d7fac0, 0x92b7157c, 0xe334f9f6, 0x4aa1797b, 0xd79624eb, 0x93648ab6, 0x6463c678, 0x1c2addc7, 
    0x3e853af0, 0x1955faf5, 0x163e565a, 0x7fb17657, 0x7a841de3, 0x2d69a3ae, 0xafb6e585, 0x917c5a24, 0xb05adcdd, 0x64da3704, 0x48c83092, 0x44112965, 
    0x79aa8e20, 0x6fe16f35, 0xf0672e85, 0x405dd691, 0xcd5a9d6b, 0xfc1c802d, 0xf5910cb2, 0x33aff2e7, 0xdf3bb5d5, 0xece3f81e, 0x2e312ccf, 0x00b8b145, 
    0x7f54be46, 0x493d7628, 0xe4b16420, 0x7c555f93, 0x5353d23e, 0x6c6dd2bb, 0xbac32323, 0xd949ee2a, 0x1b771748, 0xea998276, 0xdd1d0b8a, 0x7ca5e3c9, 
    0xf688716e, 0x9b68956b, 0x6cfeddbf, 0x0a83ccfb, 0x92d4cdab, 0xd5cb4aba, 0x9e2bf9f5, 0x59aaa4bf, 0xab5028a2, 0xe78e24bb, 0xef7aad03, 0x828d7581, 
    0x329003d9, 0xd4f10c80, 0xbc089657, 0xab5e88e8, 0x3e74058e, 0xbc4dd419, 0x65382191, 0x6bfc1865, 0x71d4c8f3, 0xfb3ebb92, 0xd2aaa030, 0xfb7f4776, 
    0xb7257c69, 0x34fbbdf8, 0xdee682f8, 0x78126f15, 0x8df5d96e, 0xef07e126, 0xa5bb4603, 0x5dbb1e88, 0x857a0c03, 0x3cc6ab3d, 0x67ba6c3d, 0x656bf483, 
    0x606cf2c9, 0xd4681f4c, 0xb1aff463, 0x41a805bc, 0x0b4269ab, 0x91a25985, 0xdc46724c, 0x41305286, 0xe7d7e01e, 0x639dc437, 0xbc0cbfc6, 0x366de257, 
    0x422df2d6, 0x68fe3a4d, 0x5fd4a505, 0x4dd9c02e, 0x520172a4, 0xed6b7da4, 0xe87591b1, 0x3f3694d0, 0x42f3c135, 0x5af76055, 0xf49900ff, 0x877fc0a7, 
    0xf1379e96, 0x7da7d63d, 0xb1643ac4, 0x7e00e118, 0x04ee4cf2, 0xe5b50dfb, 0x8cbfb5df, 0xc5cff160, 0x93b80351, 0x6861d04b, 0xa6e119a1, 0x7ac00e27, 
    0x409fbb9f, 0xf8a36b7d, 0x4f7bf157, 0x82f07df8, 0x8977e2d7, 0x9d3ae942, 0x11cca5cd, 0x67b15068, 0xaa58e59a, 0xf59c3a80, 0x5f03e0c9, 0x75892f2d, 
    0x29ea141f, 0x3fc65fa8, 0x69e62fb4, 0xea53b762, 0xb0e7b873, 0x9aaf79fe, 0x6cad4aa1, 0x9196e64c, 0x8ffc7c6d, 0x1ac90d73, 0xd94ba58e, 0x42533f2d, 
    0x29d2eee2, 0x7920dd4a, 0x646a8bbf, 0xa5c36f0f, 0xa6a1fd47, 0xfc1fcf7f, 0xe2755e87, 0x966a15ef, 0xb6c5f53a, 0x9a7df19a, 0x822d931f, 0x9aa70e4b, 
    0x8400ffc6, 0xdf9fc4cf, 0x1ff9fe87, 0x1c535fe1, 0xe6d0d225, 0x4e4a3e9e, 0xab3ef0cf, 0x22ad97fd, 0x4f64bfd6, 0x275e5c13, 0xe21a349f, 0xe5c44e2c, 
    0x0f0c1100, 0x4fd6e8fb, 0xe26e14fc, 0x0dfcd245, 0x77226200, 0xf0fab294, 0xc9fe6d05, 0x7e67f23f, 0xb000ff2d, 0xed00fff2, 0x00ffc01a, 0x00ff8e82, 
    0xff809fc7, 0xfa97de00, 0xfe523556, 0xfcf3a1da, 0x9be1e499, 0xebabcdfe, 0x5acc47fe, 0xf04a8c05, 0x2b12014e, 0x8e83605b, 0xfd9f0bb7, 0xba667e00, 
    0x9e53731d, 0xc4ebcede, 0x54839550, 0x8eb7458e, 0xc42e9458, 0x3e067221, 0x58739fa7, 0xa8fa0fda, 0xb4de00ff, 0x8ad200ff, 0xf92fe2bf, 0xeb7faf12, 
    0xd7923fed, 0xca872edf, 0xb7ce46cb, 0xb4804fe1, 0xeb154f5b, 0x73519b72, 0x23455724, 0x609f8f6b, 0x7d7e3c38, 0x31fde86b, 0x46816a44, 0x3b068002, 
    0x35fc8857, 0x979100ff, 0xfaf51fc4, 0xb7d7927f, 0xf1abfde9, 0xe7a4deac, 0xbd339f8c, 0x4bb6fb99, 0x52c0114a, 0x3aba56e5, 0x7f92338d, 0xda6aa5cf, 
    0x4060a2c4, 0xb2e620e7, 0xfca7beb4, 0xb7c556fa, 0x57c4dffa, 0xc4ebd895, 0xe1bf3df5, 0x701bcf9c, 0xcc578cc7, 0xac35b53f, 0xceb47f56, 0x8b4123a0, 
    0x79ce3edd, 0xf619f294, 0xabe4cf14, 0x7fd357f9, 0xfcf1be0d, 0xda9fe62b, 0x654efec3, 0x6715ecbf, 0x57b300ff, 0x00ff52dd, 0xbafe7a91, 0x98ed971f, 
    0x77bccb33, 0xa0c7daa4, 0x1262704f, 0xd71892c8, 0xe32ae4cc, 0x7bb60327, 0x1fa10dd7, 0xc467f8b2, 0x9b5f20de, 0x4780b753, 0x45c88f14, 0xab1da023, 
    0x7f207ed1, 0xff75adc8, 0xf2cf5d00, 0x3fd339af, 0xbb7899e4, 0xf2a7b9fe, 0xb7b93cae, 0x00ff5e4b, 0x96d97be4, 0x70ec5693, 0x3df0073e, 0x31748c87, 
    0xdd32eaa9, 0xb092d435, 0x41bb1c63, 0xf51ed3ef, 0x9ec27fd0, 0xa5e7bfd0, 0x00fffdef, 0x52eb00ff, 0x00ff1dfc, 0xfa2f2e91, 0xd200ffec, 0x6af67abb, 
    0x49939254, 0x17230c9e, 0xff3fda14, 0x000000d9, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(WhiteBalanceNode, "White Balance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
