#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <ColorInvert_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct ColorInvertNode final : Node
{
    BP_NODE_WITH_NAME(ColorInvertNode, "Color Invert", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    ColorInvertNode(BP* blueprint): Node(blueprint) { m_Name = "Color Invert"; m_Skippable = true; }

    ~ColorInvertNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::ColorInvert_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3b9"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::ColorInvert_vulkan * m_filter   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5875;
    const unsigned int logo_data[5876/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf1003f00, 0xed989b6b, 0x19d0c623, 0xb95760ba, 0xc256cd7e, 
    0x035f0b3d, 0xfa390790, 0x1b7df31a, 0x00ff2fc1, 0xc4eff20a, 0x34b291f7, 0x09040997, 0xf30a1022, 0xa6d73392, 0xfd54af38, 0x66fb6196, 0xe442e287, 
    0xd01f1480, 0x9598ecd7, 0xd75f4217, 0xce18f153, 0x2f1d49f2, 0x677fd488, 0xc13539f0, 0x2441c0dc, 0x8b5eeff5, 0xd65d1be2, 0x07c007a0, 0x455cebb8, 
    0x840cbbe5, 0x856723df, 0xfffca75e, 0xe1f34a00, 0x56985b6e, 0x10c6986f, 0x6ac685e4, 0xe378b0c9, 0x9a81576e, 0x3d67a76e, 0x691eb9b5, 0x512c1947, 
    0x5eeb767b, 0x63cde33d, 0x3cefd05a, 0x63afd5d4, 0x73046100, 0x2aaea832, 0x76d1e8b8, 0xe1eab9e5, 0x5de2d932, 0x863dd2b9, 0xc7fb09dd, 0x5bd700ff, 
    0x660208ba, 0x93e4c685, 0xe2c41e86, 0x4ff076be, 0x4d9babc7, 0x140f3b4a, 0xccd8dc32, 0xfca8abca, 0x9c04bc91, 0x9715dd7c, 0xd48324b9, 0xa4aff4e4, 
    0xa615237c, 0xa96d67b3, 0x6a51f769, 0xd1801316, 0x78385b5d, 0xb99107db, 0x82071949, 0x8a203801, 0xe2e9e229, 0x61afaf55, 0x9c18b062, 0x5ab4d704, 
    0x211e5b77, 0xa463bbe2, 0xf1b6f7eb, 0x0909dd1f, 0xa07a8f5c, 0xb4508b60, 0x37e9de96, 0x701432c5, 0x6b30823b, 0xa15df1b5, 0x79553cd4, 0xbc99ab68, 
    0x6414a8d2, 0x3a2bec93, 0x4f59301d, 0x3a2b55b6, 0x308eac92, 0xaf57fa41, 0x45954f42, 0xb9aa8e9c, 0xdecd7ecc, 0xbec29325, 0x17bed62a, 0xc6e64dea, 
    0x54faf7ac, 0x190367a0, 0x95e93875, 0x3eb8e7c1, 0x8667f4b5, 0xe37f23bc, 0x685a128f, 0x2e96675a, 0x9234cba7, 0xc72816b6, 0x81eb73de, 0x365f73d8, 
    0x69f844fc, 0x00ff78ac, 0xf026d053, 0xe3c9137c, 0xcdb84b2b, 0xe489b491, 0x24196e7c, 0xbfda6620, 0x000e9078, 0x1fd5af39, 0x1f327802, 0xcb5af802, 
    0x5f52c44c, 0x8dda28bc, 0x681f63e4, 0x9ff3dbb8, 0x1d38675c, 0xccc62b86, 0xee082b71, 0x997f7bb7, 0xab3014f5, 0xddac5133, 0x5ff5d296, 0x5f9a73e6, 
    0xeaf0f9ec, 0x0d824fcb, 0x763ac347, 0x051a79bd, 0xdc46fd7b, 0xfa872c49, 0x553a400f, 0xbf50f8af, 0x41e83f0b, 0x09f03fd0, 0xfbbac27f, 0x7bf8169f, 
    0xdf5b9048, 0xd3468b78, 0x15110026, 0xbb70fcf5, 0x4f0a662f, 0x8d7d7d2a, 0x0b00ff45, 0xf45fc203, 0xff67f839, 0x7ff10600, 0xaf7b7c8d, 0x4cee4e52, 
    0xa08445fa, 0xf1519495, 0x6bc600ff, 0x871f7b0b, 0x106b650b, 0xa309d286, 0xc21fe358, 0x51f6072b, 0xf11efe0c, 0xd7c9de26, 0x7eb5c61e, 0xf0284f33, 
    0x7fcec14c, 0xebbd9d7e, 0xb946f607, 0x4f3cd077, 0xb7a330ce, 0xb9d0afb1, 0xef4ac25b, 0x9bf9b9fa, 0x5abab4b7, 0xad3bc07f, 0x707b1676, 0x3db1a4aa, 
    0x22d39c2b, 0x428dd98c, 0x9064d219, 0x20874295, 0xeae7848e, 0xc48bae08, 0x8d96b593, 0xfb797a7b, 0x404e1234, 0x0b6100ff, 0x1ff34a7f, 0x5ad47a81, 
    0x2eadc28f, 0xd034cbd9, 0xaed8c579, 0x1ebbe53f, 0xc50aefdf, 0x04bbf245, 0xfbbe9fa2, 0x75b776d8, 0xdae6ec35, 0xa0b733de, 0xafe67d20, 0xacb5f80d, 
    0x361616d9, 0x71576ac4, 0x7390ac7f, 0x164c370a, 0x418f781f, 0x5eeda9c7, 0x49ade2b9, 0xaded89fc, 0x18d0c88e, 0x588e1c2e, 0xed8b8d11, 0xc7039cd7, 
    0x7fddf05a, 0xe64cfec3, 0x27620116, 0x55b72a62, 0xd7e43fc7, 0x9abd898b, 0xbce5d047, 0xe8f3fcbc, 0x0cb3d678, 0x4e3312d7, 0x6de074ef, 0x060157de, 
    0x573a007a, 0x1fce7ea4, 0x822fb51f, 0x488722de, 0xbc2e58b9, 0xc2dfaa1f, 0xdcbae36f, 0xaa0bc27e, 0x0f1673cb, 0x4af2f2de, 0xda0324f4, 0x1b5eeaa8, 
    0x17bdc313, 0x43c6dbcb, 0x58f3fc74, 0x5d083e77, 0x2aa2c24d, 0x5eac5da9, 0xe79e3742, 0x7cb5af8f, 0x8c52e1ac, 0xf7b9a1b9, 0x1343a9d1, 0xd5d4d94f, 
    0x6eadeb33, 0xd0f8b006, 0xdb061223, 0x391d26a8, 0x20186e04, 0xba2b1efa, 0xf0e2b6fd, 0x157fc2a7, 0xdec5da69, 0x366369b1, 0x745982b2, 0x8ba63bd5, 
    0x284af3a0, 0x38f5a1ca, 0x5f33cec9, 0x2dc6a71e, 0x76b6c35f, 0xce456ebb, 0x252267bb, 0xbb40e3b5, 0x09008923, 0x2e0bcac7, 0xcea90cdc, 0xfe70cd39, 
    0x8a1ff13d, 0x9aeb317e, 0xebb58ae7, 0x8675d5b5, 0xb9ba691f, 0x7187e3f2, 0xa81014da, 0x4007bdaa, 0x1e7dc531, 0x74713327, 0xdade87e7, 0x3e74fda7, 
    0x4691094f, 0x4e31a46a, 0xafcfeaca, 0x3f777e5d, 0x6400ff57, 0x1af6870f, 0x5fdbc347, 0x5fd1a41d, 0x80241e6a, 0x673c6749, 0x789e0d2b, 0x23a6fd03, 
    0x0e603b2c, 0x1b1fe8d5, 0xfc59283e, 0xd76cf030, 0x85daea6e, 0xb7b260d6, 0x3ebecb2d, 0x078a3e66, 0x6405fd24, 0x12dec9fe, 0xece7e19b, 0x4be3f0c5, 
    0xcd1ddbbf, 0xc415879e, 0x53781bdb, 0xe33c662e, 0xa783799c, 0xfbf87aa7, 0xb7f888f6, 0x00ffc437, 0x1371cf1d, 0x8f5ba591, 0xf1c4d9b3, 0xb98b6504, 
    0x304b923c, 0x4ea7af27, 0xcfc5e595, 0xaf9a5b1d, 0x4e8ffc5d, 0xd196a570, 0xbffc6854, 0x279cf9cd, 0xaa63fc88, 0xba598b78, 0x3b5a2ed4, 0xb46ca6d9, 
    0x8fb90bd7, 0x18f48c61, 0xcd4a07e8, 0xffbdd6fe, 0x4f7b9f00, 0x252af6fb, 0x4e711408, 0xe2e86bf9, 0x3c8a52b9, 0xdbdd3667, 0xcdf8803e, 0xc2e0cf3b, 
    0x93f39553, 0x3f59e777, 0xa5cfefb1, 0xf67ead78, 0x35f40722, 0x834f7cd0, 0xdeed2dfe, 0xfe174f7b, 0xeccf5c85, 0x3fdd2e71, 0xcc1998c5, 0xf61af903, 
    0x25d597b9, 0x4a3e75fd, 0xe7b7b929, 0xe29d1efa, 0x5aeb302d, 0xaba5af06, 0x29eb7b04, 0x668f51ed, 0xfc41d978, 0x7f99afc8, 0xac989b67, 0xd4b02634, 
    0xd4b5bae5, 0x3e4f8aa2, 0x880283d9, 0xb7535665, 0xce5f39af, 0xefd693be, 0x2b551b1e, 0x730e8bf7, 0x8af30f8c, 0x24d0a5f2, 0x888fe28f, 0x9a604efc, 
    0x2d3ff579, 0x6858846d, 0x0482b5fc, 0x85ee7a3c, 0x5f15acf9, 0x9a5d4a67, 0x896aa734, 0x75ef6ad2, 0x025d0ef9, 0x16b953e7, 0xa6fddad0, 0x1cd1c6e5, 
    0xcfc57643, 0x07ea4021, 0x4fbdde73, 0x2ab37fc3, 0xcb9be1cd, 0x13da528d, 0x205b3477, 0xc479c058, 0xb28790cf, 0x4e9260e4, 0x57fa0057, 0xf8337cb2, 
    0x5678a543, 0xfadf05d5, 0x9276a176, 0x1174f346, 0x1c03a7f0, 0x8f9c0c60, 0xc69bf561, 0xbe2c10df, 0xda176914, 0xeb56b0f6, 0xdbd88e4f, 0x0d6001c3, 
    0x2c0fe0c4, 0x0540d511, 0x603c2381, 0x9d3f2375, 0x31b5b1e3, 0x3da95453, 0xee33bf3c, 0xa16a19b0, 0xdd886b0f, 0x7ceaed74, 0xdfe200ff, 0xbe091f86, 
    0xe3767819, 0x4b343ec4, 0x750093ab, 0x53ded686, 0x50e7da17, 0x36da05bc, 0x8ce92da1, 0xaf783270, 0x6b21fe88, 0x105fe269, 0xd6e8136a, 0xfed900ff, 
    0x7be4691f, 0x99db524b, 0x29762c61, 0x1db8f03d, 0xf19b5e33, 0xb956e247, 0x8e57cff1, 0xf2b552fb, 0x91a62cec, 0x3e258265, 0xa9247854, 0xce0fce63, 
    0xfb801e40, 0xde788bd7, 0xf2a4ecf5, 0x2864d76c, 0x5ebf230f, 0x0baf823e, 0xb769b446, 0x849edd51, 0xd49461ab, 0xab4e1d63, 0xfeb39fc3, 0x2e3de2bb, 
    0x64d65ed7, 0xb4f01d3e, 0xb75bbddf, 0x789acc8b, 0xa178c181, 0xbb672418, 0xd78c3b10, 0x87b33fd4, 0x78a1e3ec, 0xb428c6f2, 0xdbea2e5d, 0x89b756c0, 
    0x0de2a32e, 0xeb5d4355, 0x6d022b32, 0x23155ea0, 0x1977403b, 0x4946f9c0, 0x59f62be3, 0xff891f96, 0x8c3fb200, 0xf362aeed, 0x3b0c2f75, 0x0b8e144b, 
    0x6487e37e, 0x7137a6cf, 0x0bf46bee, 0xb7656b43, 0x52acadd3, 0xad2d2c28, 0x2a044190, 0x8d361515, 0x3b3000a0, 0xa9aead74, 0x5fad45a9, 0x55092b5f, 
    0x6d4a229e, 0xe6e92bd9, 0xb2fd188f, 0x00ff227e, 0x13e033c2, 0x3bc6c0a4, 0x48b65dad, 0x0b6ce310, 0x24dbc382, 0xd76c8faa, 0x79dc50c1, 0x49ddccce, 
    0xa9fd62af, 0x8e27203e, 0x566a227e, 0x7ddaece8, 0x2c549ebc, 0x48a880bc, 0xc76df107, 0x36e415f1, 0xa1ca53da, 0x9459e4ed, 0xbda6fbf6, 0x653f2d8c, 
    0x53dff64e, 0x5637c4cc, 0x84897da3, 0x0f708661, 0x8fe44be1, 0xacca8fee, 0x88cea747, 0x3a022b03, 0x0cfb4ef1, 0x1af98dde, 0x8eeebbed, 0x2fe9235b, 
    0x7e5efa89, 0x0357ea18, 0x0778527e, 0x2bfe3e3d, 0xab633fcd, 0xc5375db4, 0x0f7172ac, 0xa1afa16f, 0x5ad8323e, 0x565ff047, 0xfb110974, 0x910bb04d, 
    0xf98af393, 0x8942f6d7, 0xa0f14b53, 0x992d0b52, 0xe3c69960, 0x747ac583, 0x6978466a, 0x9af9d0b7, 0x5929ddb4, 0xa4a77e79, 0x56d39af8, 0xae9d45f1, 
    0x610be195, 0x13776bac, 0x81db73ac, 0x60a22db5, 0x9292bcc0, 0x06043616, 0x74b423fe, 0x7cac57e4, 0xaf75f03e, 0x5807dfc3, 0x126a5cdb, 0xad6932ea, 
    0x1c48a325, 0xb4bbd008, 0x0046cbc3, 0xb60c12af, 0x3986897f, 0x37fc61cd, 0xdac393b5, 0x1ac1dc63, 0x09e4c5ad, 0xac808e2c, 0xc01623ad, 0x61580ef3, 
    0x38f49114, 0x0f7acdc0, 0xb63fc8c3, 0xcddb0fbe, 0xbdf68f3d, 0x483b92dc, 0x244d3380, 0x73a36282, 0x00219b0f, 0x5fed00fc, 0x7a736398, 0xc2b2fad8, 
    0xbf52f752, 0xfdd42ff9, 0xa8ca2e07, 0xbcc6a861, 0xdcd1e4d5, 0xde453578, 0x90eaa683, 0x78de164e, 0x72cfd4be, 0x93ed08a7, 0xcac8e526, 0x39a8c772, 
    0xf9354950, 0xf842fbf9, 0xbfe3e3e6, 0x69a6c3c4, 0x07beec27, 0x2ea1e4f0, 0x3fc3702f, 0x19402cbc, 0xceb1d2da, 0x0c140606, 0x3e9ed2d7, 0xbc89a7f1, 
    0x6f9ef033, 0x1c4f690f, 0x55f12e3e, 0xe9a08be4, 0xa6fd3371, 0xe7dcd9d2, 0xc6bc8111, 0x52ed04a3, 0xe09cf902, 0x8b8ff30a, 0x6f340abf, 0xd3191e85, 
    0xb2a52f3c, 0x10c15c5c, 0x81a79e1a, 0x45376ae7, 0x91f23c43, 0x5088e5c9, 0x0ee0ea7e, 0x30cbd92b, 0xdd8bf29e, 0xcde6d02f, 0x1a8eceb1, 0xb6ad6055, 
    0x160b67fe, 0xe1fbf0bf, 0x2f81bea5, 0x5db56d82, 0x1bfd5a49, 0xbcd1fe56, 0x23968db7, 0x091bd91e, 0x76262f18, 0xf4c13976, 0xc3f817af, 0x9f6aa067, 
    0x3c3b3c17, 0x81a66dde, 0x6b22eaaf, 0x902824af, 0x75a0d242, 0xf601b753, 0x1198f9b9, 0x503b9291, 0xbf8e5934, 0x51e2866c, 0xee31bf03, 0xa69e733b, 
    0x8567e397, 0x02f88aee, 0x957b1be6, 0xe33875f2, 0x824d7932, 0x71cea984, 0x72afe5d3, 0x49182574, 0x51c707fe, 0x22ae46c6, 0xdf5b979b, 0xe57d46cf, 
    0xd0427ff0, 0xf810fead, 0x4f7b34a5, 0xb266d8ec, 0xc58eb4b9, 0x121a221a, 0x41966219, 0x1112851a, 0x2b9dfec9, 0x64fcd3a8, 0xf5ec1fba, 0x99b18917, 
    0xf222b23f, 0xccb99173, 0xfc9e896a, 0x3f73cdb1, 0x7085e6b2, 0x9ee60ddf, 0xd464ccf3, 0x35d692ee, 0x050a7697, 0x8c7aaee4, 0xaff43892, 0xe399f82e, 
    0x00ffb4b9, 0x3ac177d9, 0x57f95314, 0x93d63c53, 0x16ae60a0, 0xb84146da, 0xf54a3d67, 0x9379edfe, 0x935fcfa3, 0x61d4877e, 0x55e1cd2b, 0x9b36ab49, 
    0x8df3d9fb, 0x5eaa8df4, 0xfdc372cd, 0x418f7163, 0xa76d4fc5, 0x71cd3624, 0xda5a3a71, 0xce3c3746, 0xf51905c0, 0xfbf6e9a7, 0x7952a982, 0x5ff34ac7, 
    0x92343e8d, 0xb6e8f4d6, 0x6d6d98b3, 0x0ceb7950, 0x3ca4f398, 0x813cd890, 0xe8eb7de8, 0x7ed74d21, 0x23bf3dce, 0x58dd693a, 0x1fc64fef, 0xc1c4690f, 
    0x2a5edd13, 0x55cb00ff, 0xb27d828f, 0xc27f527a, 0xe7bfd0ef, 0xfbfddf85, 0x2f5fe31f, 0x6239bb36, 0x458f3243, 0xbbfd49e9, 0x3d00ff71, 0x5cf5a524, 
    0x8a7a762f, 0xebc74e8d, 0x615fed5f, 0xd3f097fd, 0x25368ec9, 0xb887d1ee, 0xebfc0304, 0x2ed93fe7, 0xf1b765ea, 0x256b41b3, 0xdd21fbc9, 0xb13c90e5, 
    0xd473f383, 0xbed6418f, 0xa9f9f89a, 0xbe165f69, 0xc3670d1b, 0x2c70c9b7, 0xd8681699, 0x00a4a1f2, 0xd71c3b02, 0xb100ffcd, 0xf85ae3b5, 0x63d35293, 
    0x52fd1efb, 0xd33f2d48, 0xbd0d6464, 0xa040ed82, 0x4e3dc792, 0x8a3c7714, 0xf55785ca, 0xa7bed409, 0xff70e2ca, 0xca7eed00, 0x1fd6473e, 0xc3aff0b9, 
    0xd72e6fe8, 0x0d4198cf, 0x716082a0, 0x362e8f1b, 0x7db3fb5c, 0xaf18a7fe, 0xc547f12f, 0xba84af9b, 0xa0abd665, 0x8fdd5a5d, 0x3e1d5a35, 0x43910c69, 
    0x3e8d002b, 0x81fc8ce1, 0xffea1993, 0x677b8500, 0x7fe36d8e, 0x253aea0f, 0xa973c3ba, 0x0d4b2b41, 0x1f36acbc, 0xa394652a, 0x0a076efa, 0xaff97e4f, 
    0x8787f102, 0x7d320cac, 0x7c28c6b6, 0x292c3337, 0xf95baa69, 0x7e03b0b1, 0xfa0f8242, 0x9ec53fc5, 0xc8af180f, 0x71544e6a, 0xee25ab91, 0x3436fddc, 
    0xcafeb05c, 0xffd7a33b, 0x868f6700, 0x31e8a12f, 0x795a9378, 0x77453cef, 0xbfb9ed0b, 0x481166dc, 0x9fe03337, 0xc10bb994, 0x3c5520e4, 0xfb2bcf96, 
    0xeb6e7843, 0x4afb9351, 0xf26fcb38, 0xed7efbf7, 0xd79a3f41, 0xea1ae8be, 0xbc348678, 0x36434a8d, 0x2cd808d5, 0xa1b7158e, 0xe9838c23, 0xacf760d4, 
    0x92fd19cf, 0x9abe46df, 0x8abb2368, 0x6b635a28, 0x75144927, 0x0a7fdd1e, 0x8a030ffd, 0x891aab50, 0x6d9e7c6e, 0x2c8c5883, 0x7ededea8, 0xf8e2e787, 
    0xe6f6ce56, 0x24eeee58, 0xe8069db5, 0x5bb947ca, 0x464e9093, 0x8735563a, 0x97f1a5c2, 0xc92e6dc4, 0xca585d35, 0x5af076f7, 0xf62934c3, 0x32d5e57d, 
    0xc885e430, 0xd73bb65c, 0xed19f15f, 0xb1c969b5, 0xdc2d6db2, 0x4b6e951f, 0xa04fbc8f, 0x1fe163ae, 0x7ea40ded, 0xb93cbece, 0x2ed0599f, 0x51a7d875, 
    0x38c15d13, 0xc53c6adf, 0x1f467566, 0x80731b31, 0x19192347, 0x49c6a0af, 0x8f1d69f2, 0xd530cb81, 0x9f475d27, 0x7b56f443, 0xd9073f0b, 0xb44c7778, 
    0xf8e95ac2, 0x76bd5044, 0x79ea272f, 0x075f533f, 0x03bc717c, 0xa4b50ee2, 0x4fdb22a1, 0x3496aed4, 0x9a7900e8, 0x00ff8143, 0xc6f51502, 0xc33bf199, 
    0x393c19df, 0xc18bf8a2, 0xd65abc9a, 0x9965ba97, 0xbc252993, 0xe6ee2fbf, 0x8e8df28c, 0x463d4770, 0xf1b17c45, 0xf5d24b0b, 0x2a3e89bf, 0x4bf2f69a, 
    0x3935d96b, 0x03a00cba, 0xe57ccf0b, 0x3718794d, 0xef639ff6, 0xf22949b1, 0xe2087e7a, 0xfbfc28f4, 0x965c4098, 0xc8573a70, 0x7fd73e9e, 0xab633cb4, 
    0xee62cbc9, 0x7eea0150, 0x7da53f62, 0x0af8a6df, 0x501f1d7d, 0xeedaee8a, 0x8ce4d108, 0x2a499bac, 0xf420f88c, 0x9fc557e0, 0xf80b7e07, 0x8fbfe383, 
    0xa0a3970e, 0xe6da1969, 0x21cef5f6, 0x59b68cb6, 0x700ebbdd, 0xaf004e3d, 0xe3e40e67, 0x4a438b3e, 0x3b2d9c6a, 0x7c8e099c, 0x0efcc7f4, 0xd39fca93, 
    0xaf1f00ff, 0xf62f5dd3, 0xa32df810, 0x7c69c5d8, 0x15f120be, 0xb50960ec, 0x755bbe04, 0x8cedfb91, 0x521fc029, 0x31fcdf6a, 0xfacfc01f, 0xff87f800, 
    0xfd1f0700, 0x53f37285, 0xfcfa35f3, 0x0f9fab4d, 0x8b5fe1c3, 0x2d3c1b1f, 0x360dba69, 0x8b2b6b1b, 0x46f7616b, 0x1fc9226e, 0x2eafd1f7, 0x95b485fd, 
    0xcd223ed5, 0x363fa22c, 0x97b124d0, 0xdaf2df5d, 0x1dc78123, 0xe9d53e07, 0x9df134de, 0x51fbb5b6, 0x7b5b92f8, 0xd5b62079, 0x92551874, 0xe578c851, 
    0xfbf5398f, 0xaf79a5bf, 0x920c2bec, 0x9a50fb78, 0x5886d93d, 0xf909b015, 0x7f4e8a0c, 0xd85c91ef, 0xc9aa323d, 0xc751fdf7, 0x8d798a8f, 0x6f6f4529, 
    0xf2defbd4, 0x86233e16, 0xa48d291f, 0x92b49276, 0x8bd93c9e, 0xba7f00a0, 0x893d300b, 0xf673bce2, 0x7ac4f080, 0x6e70897e, 0xa3da530c, 0x15459144, 
    0x9c9408be, 0x6d605cf4, 0xbda67e2c, 0x1b9252ab, 0x2a3b9330, 0x2b15a35b, 0xb160649c, 0x93e9b907, 0xf83faff4, 0x76763ccd, 0x3b0ba86d, 0x6834724d, 
    0xbab2b8e3, 0xa73d2e6f, 0x3f5f9138, 0xc9413178, 0x577b58e8, 0x6ada78e7, 0x73ebdb54, 0x4bbb68ed, 0xebc19f52, 0x3abd34e9, 0x3bfb2bee, 0x6f29269d, 
    0xded692e3, 0x7e0549e5, 0x15721ccf, 0x79b00a70, 0xf420b843, 0x7cabd261, 0xad5df14e, 0x8cc68abf, 0xd2b6488c, 0xc9b9246f, 0x8043e6e3, 0x757e9c7e, 
    0x993e1ae9, 0x045fe065, 0x598a848b, 0x5be4061b, 0x9b37e693, 0x4751cc27, 0x03c00960, 0xb37c0580, 0x7d5617f1, 0xb956cf2e, 0xc27f90bf, 0xc7b6ad47, 
    0xad0556b7, 0x216ef72d, 0x85d8d1f1, 0x1cc0731b, 0xc9b5aff5, 0x39c5cdf0, 0xfffcd26a, 0x7cf8c800, 0xc7e816fb, 0xebda2e96, 0xdd7cbae8, 0xddd51b8f, 
    0x2e7764ef, 0x03206d4b, 0xbcd293e9, 0x399ac777, 0x8072b976, 0x8e931c92, 0x99abd77b, 0x6e41997c, 0x734d9e8d, 0x45d3289e, 0x8cba52cc, 0xfe1c2bab, 
    0xaddabe06, 0x14b72825, 0xd797777e, 0xb3abaa74, 0x6200ffcf, 0x1f778b8f, 0x6900ff07, 0xdcda0f7f, 0xbfe1cb4c, 0x8fa65c12, 0xfdb95bab, 0x6c1b09db, 
    0x72d39152, 0xb89e5339, 0xb7d73b2c, 0xb5e182f8, 0x776b193f, 0xbf26802d, 0xe63bf29d, 0x6bfd3946, 0x691e0fe3, 0xa84e1af7, 0x438b2d6e, 0x8a246c34, 
    0x03abe045, 0x22f64190, 0x1abe49bf, 0xf80afee8, 0x00ffe09f, 0x36976a0c, 0xa5265852, 0x6e70c3a7, 0xb7f965ad, 0x67f70195, 0x07864382, 0x41215fe9, 
    0x19ab54a8, 0x5b9f7e6e, 0x25a77196, 0xed27f3b1, 0xf31ef105, 0xb4159ec0, 0x9f39acd2, 0x24618a54, 0xc7dd9fe4, 0xdc0369b7, 0xa95eebee, 0x2a781efb, 
    0x257c027f, 0x8fa142fb, 0xcb04f156, 0x2b6fc72c, 0x498d1908, 0x3db61cf4, 0x63aef448, 0xfdc1c7e2, 0xc62fe247, 0xbe85af2b, 0x69abdd1a, 0xb396b796, 
    0xa14eafcd, 0x50560b52, 0x03634bcc, 0x459203d3, 0x377c5e7d, 0x4d5778a7, 0xcfc13a6d, 0x2b8475f6, 0x3d0cb714, 0x778c3606, 0x5fb1fd3d, 0xe8745243, 
    0xf5066361, 0xe4913f69, 0xe59a5357, 0xd05fdfa7, 0xdcb505a3, 0xcc6a0391, 0xe70e7f90, 0x00ff3ec1, 0xd87f5a8f, 0xebf93fb5, 0x2b9100ff, 0xe1273cd0, 
    0x43f7328d, 0x4951e382, 0xcf2fd37e, 0x3d05e085, 0xffb11507, 0x87770800, 0xfd37b97f, 0x5de76bf4, 0x76465f79, 0x2b1b09c7, 0xda2fe5a3, 0x137df67a, 
    0xbdf0bef6, 0x088694bd, 0x1a29346e, 0xe7305054, 0xfb9f9c32, 0x00ff55e4, 0xbcfd26f8, 0xeef8a86d, 0x82caa072, 0x09ec0d15, 0x59fb9335, 0xe3c900ff, 
    0xc0fe43f8, 0xb500ff2f, 0x09fe6feb, 0x1f00ffbb, 0x00ff3e1e, 0xb4d65fb6, 0x2200ffa5, 0xf3abdeaa, 0xfe2b5647, 0x3f7d3446, 0x5f7ffacc, 0x689695bd, 
    0x5b360649, 0xd233828c, 0x00ffb1dd, 0x57c89fa1, 0xb069a23f, 0x78db5d5c, 0x69d3607e, 0x0fd74672, 0x7b5b8c14, 0x3f27d882, 0x6cb5c741, 0x64ebbfeb, 
    0xeb7600ff, 0xea4900ff, 0x00ff8787, 0xffb373e4, 0xfe56af00, 0x4b9f5f6d, 0x647d6a59, 0x1f73147e, 0xac77bc14, 0x454778dc, 0xb28d6e8d, 0x411e6a4d, 
    0x236ef26f, 0xbeca9f23, 0xc85cd56c, 0x62c9b15c, 0x7bbd2749, 0xf99fc49f, 0xff3f7c15, 0xd57f5e00, 0x2eb5c2ab, 0x5366fbf5, 0x53c1114e, 0xc28f6e69, 
    0x9693daf3, 0x666faa3a, 0xc0a9ba72, 0xb2d6e71f, 0x0963a56e, 0x8c60e404, 0xd0abae56, 0xc75a9f7f, 0x5500ffb9, 0x96eb1af8, 0xdd70f3ec, 0xf80e4f3d, 
    0xa7480a97, 0x7dcd392a, 0xdd28fb4f, 0x30fb79cd, 0x8d64fee9, 0xf6422d9b, 0x2a781908, 0xf3e3f79b, 0xe5ebfc76, 0x3f1d89bf, 0xf67bfa3a, 0x9300ff47, 
    0x0bfb5f61, 0xec00ff5e, 0xfff3f0b5, 0xea677b00, 0x1afb9fb4, 0x3ac0573d, 0xfcbadcc5, 0x1c53e236, 0xbc91106f, 0x9ccd82b1, 0xcff89e0c, 0xbfebdc15, 
    0xf0255ee9, 0x2edf80d6, 0x9231719b, 0xec82d358, 0xd77b520f, 0xff3c7c9d, 0xdba69100, 0xf3c7bdfe, 0x3fd546af, 0x4b78a6e4, 0xf33fbafe, 0x5ac9ecae, 
    0x65e591a5, 0x77b6c19a, 0xb5f1367e, 0xb3f583f7, 0x5bf1e9a6, 0x2971ac2d, 0x885b2451, 0x58edebed, 0x75b7f01f, 0x65e7f9cf, 0x7f7e00ff, 0x179ff4fa, 
    0x72e400ff, 0xa7b8fe97, 0xbc2aaef5, 0xee718f94, 0x00d9ff7f, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(ColorInvertNode, "Color Invert", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
