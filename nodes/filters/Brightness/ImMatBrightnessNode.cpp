#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Brightness_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct BrightnessNode final : Node
{
    BP_NODE_WITH_NAME(BrightnessNode, "Brightness", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    BrightnessNode(BP* blueprint): Node(blueprint) { m_Name = "Brightness"; m_HasCustomLayout = true; m_Skippable = true; }

    ~BrightnessNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_BrightnessIn.IsLinked())
        {
            m_brightness = context.GetPinValue<float>(m_BrightnessIn);
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Brightness_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_brightness);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_BrightnessIn.m_ID)
        {
            m_BrightnessIn.SetValue(m_brightness);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_brightness;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_BrightnessIn.IsLinked());
        ImGui::LumianceSelector("##slider_brightness##Brightness", ImVec2(200, 20), &val, 0.0f, -1.f, 1.f, zoom);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_brightness##Brightness")) { val = 0.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_brightness##Brightness", key, ImGui::ImCurveEdit::DIM_X, m_BrightnessIn.IsLinked(), "brightness##Brightness@" + std::to_string(m_ID), -1.f, 1.f, 0.f, m_BrightnessIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_brightness) { m_brightness = val; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("brightness"))
        {
            auto& val = value["brightness"];
            if (val.is_number()) 
                m_brightness = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["brightness"] = imgui_json::number(m_brightness);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3ac"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_BrightnessIn = { this, "Brightness"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_BrightnessIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    ImGui::Brightness_vulkan * m_filter   {nullptr};
    float m_brightness      {0.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5006;
    const unsigned int logo_data[5008/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfd003f00, 0xf39ae446, 0x6d528adf, 0xfd87d2ba, 0xc5fc3834, 
    0xebeb3375, 0x3c0900ff, 0x585b4c1a, 0xac2c2df9, 0x80be1218, 0xc5b5de8e, 0xc19c617c, 0x0260a279, 0xa27e5c5a, 0xbe7306be, 0x933ea38b, 0x6228a52d, 
    0xd32df3e9, 0x692a837f, 0x73d27e6e, 0x0c4957d0, 0xc78381a0, 0xd934e56a, 0xae58ccb6, 0x43573b4e, 0x1d6cb904, 0xe8b13baa, 0x87be382b, 0xbc878ab7, 
    0x33701969, 0x6117a2d2, 0x56eb75dc, 0xcfb2bff4, 0xcc8f6628, 0xbf19305e, 0xc3d4953e, 0x402c6967, 0x9e4a688b, 0xf58ae571, 0x88a5e028, 0x83c74a5a, 
    0xbb68bc56, 0xcf649c38, 0xa89f958e, 0x75a57cc8, 0x7d9093e1, 0x3cd5b2eb, 0xd2c81435, 0x6186055a, 0x37ee27fc, 0x951f7ef8, 0xc4cd7a70, 0xbc3d9396, 
    0x2454b28b, 0x02c41f32, 0xde638f3d, 0x9e85afb3, 0xd9b1eb19, 0xed0aa983, 0x267a6e72, 0xb0bb319d, 0xfbbe95b7, 0x53eb2720, 0xd411a4f2, 0x3a894656, 
    0xf356e8db, 0x327bc4b9, 0xb60ae049, 0xeed1046f, 0x868d868c, 0x1ae49455, 0xf792a4ce, 0xa7f0d492, 0x2dc9a94d, 0x301ecaae, 0x1e6fdfb1, 0x50ca1fa5, 
    0xa81ee508, 0x3f911f4f, 0xc433aea9, 0xf0b2267e, 0x75ee8797, 0xf6c9408d, 0x44023068, 0xfd1c69b9, 0x3d991ed5, 0x49df15cf, 0xda685aab, 0xadfac47d, 
    0x82a5bdd5, 0x754dde8f, 0xe71ac722, 0x73dc128c, 0x3ec3579c, 0xfe74f134, 0xde1df134, 0xcad259a0, 0x2d6c1939, 0x6e10a45f, 0x713d46f9, 0xbbe69e8c, 
    0xb6384663, 0xef6ba7aa, 0x0400ffeb, 0xf688a3ed, 0xab37dd74, 0x5a1b7a5b, 0x1a9fc6bf, 0xd7847aea, 0xcecd7a16, 0xf7e76c91, 0x046e7676, 0x524f8f71, 
    0x5faa497d, 0x7d7cb6f0, 0x664300ff, 0x7f00ffa7, 0xfef67345, 0x64f5d715, 0x1f5e1637, 0x892835d6, 0x6365cb20, 0xddadc824, 0x3d820349, 0xff4bc53d, 
    0x8a1f0800, 0x4ee800ff, 0x0afe27f1, 0x0a00ff65, 0x551414f6, 0xa5753392, 0x7c549fd5, 0xaf5b9e3b, 0xdf899b17, 0x9d589ecc, 0x584dfd9d, 0x2fcad4f8, 
    0xf3df3df4, 0x8fce8fdb, 0xc483e887, 0xc4189591, 0xffa9fc4d, 0x56a21a00, 0x19c9d0bb, 0x981f773e, 0x56838faf, 0x915f776d, 0x00ffd2f4, 0xbf34a591, 
    0x5666f497, 0x49aeea9e, 0xd65a0f6c, 0xe416f3bb, 0x4613c9da, 0xb8c132c8, 0xfa00ff20, 0x268dac88, 0x6ba73e31, 0x8b2c4107, 0xc0f4fd1f, 0xbce95a7f, 
    0x3e2c6765, 0x46709e26, 0x19edb6c9, 0x0f6000ff, 0x8cd394fd, 0x347f0e6f, 0x00fffbbe, 0x495ad191, 0x537d5057, 0xe0bf757f, 0x3154da9a, 0x4ae7c55b, 
    0x7f703de3, 0xa75b5784, 0xa365306f, 0x54f70331, 0xedf471f0, 0x6081fe5c, 0x38cdf1ac, 0xc4125fdc, 0xfc31f0a0, 0xfafcf447, 0x450e5457, 0x0b06367d, 
    0x333ef676, 0x6de5341b, 0xc667aec5, 0xc48f10fe, 0x21340f96, 0x8920d5a3, 0xe1e8cefe, 0x5409b637, 0x77f94172, 0x8273dc63, 0x51d37332, 0x19e1bc5e, 
    0xe84a96c7, 0x95d4e9f3, 0xd9c12929, 0x26d38ba3, 0xf0c35ffb, 0xadbb32e6, 0x82719418, 0x76043938, 0xb3bfe735, 0x1fb58957, 0xee567815, 0x9a697bca, 
    0x264f322d, 0x1101f93b, 0x0de5d7cd, 0xe37b45fc, 0x453de338, 0x4dda547b, 0x034df0b4, 0x0d2698c7, 0x771e37bd, 0xbc9e5b12, 0x34d0a3e6, 0xe80b1f1b, 
    0x99569ad6, 0x2dacd907, 0x1d86cb13, 0xd357fbec, 0x893f492c, 0x5f8e1aaf, 0x74dbaa7b, 0x5d3cddb1, 0xed5694d4, 0xda1fe5b3, 0x1a57c743, 0xc25f8bef, 
    0xa643b2e8, 0xe11e2ce9, 0xae994a59, 0xcf0d860a, 0x836185f0, 0x57fa24df, 0xe17bf02f, 0x4fc4cfcd, 0xb46fc516, 0x896b9fa6, 0xc20b27af, 0xffa8f0af, 
    0x009e6800, 0xf8a126f6, 0x88afa9d7, 0x95f82fbe, 0xf7b095ad, 0xc61568ab, 0x61516809, 0x1bd9fd6e, 0xbed2e907, 0xf03bf8af, 0x1e872fea, 0x94c5820d, 
    0xe773461d, 0x17b2485e, 0xc6f49056, 0x0303c040, 0x5abfdb81, 0x49358dec, 0x5197c072, 0xad3373f2, 0x4d8b34d3, 0x3b1bc21e, 0xdada5628, 0xc791da15, 
    0x7be21fc0, 0x79adde93, 0x74fed463, 0x302e56b4, 0xee38e16f, 0x14f029cf, 0xc6881f6b, 0x1fdb987a, 0xefc62795, 0x9c03f495, 0xf963a57f, 0xfb1a7c53, 
    0xff6f5dbc, 0xfea45c00, 0xf8c62f55, 0x27038df7, 0xe19fe91f, 0x78052b5f, 0x6f1fd54b, 0x4d4a333d, 0x39a35ff5, 0x5ae43abd, 0x4d5756ea, 0x475c909d, 
    0xd5aee32b, 0x0de84f70, 0xed8b9f7a, 0x78c997a7, 0x78d38da3, 0xce195bda, 0x8ce9efd6, 0xf6699ad7, 0x0f2cf7ea, 0x6cec1a4c, 0x590b0f0a, 0x207afe69, 
    0xf3a49985, 0x59525609, 0xd000ff88, 0x68adf397, 0x97d2495a, 0xf4afd774, 0xb30200ff, 0x1552a718, 0x4f3e4d57, 0x4053bffc, 0xc258b06a, 0xb7384bd3, 
    0x24e34e85, 0xee6368a7, 0x577b424f, 0x1fdf6b9e, 0x16c48361, 0xd27cdad6, 0xf7421218, 0xc336c812, 0xfb0528e5, 0x00807a12, 0xb51ec9c1, 0xfe101fe5, 
    0x217eea2a, 0xfa9f859d, 0xc7ab8d1d, 0xcb7ac622, 0xcf7372cb, 0xd46f0327, 0xaff020fd, 0x243eee82, 0x3ae9da5e, 0xbf1b1b73, 0xee990bb4, 0x80b74830, 
    0xf460e693, 0x01424862, 0x00f524c7, 0x98b0ede3, 0x9c8bd078, 0x87d6bfd6, 0x06a957cc, 0xcf7c0ded, 0x7ffcd366, 0xea1bbfe3, 0x1cfee9d1, 0x0e281b4b, 
    0xb9bc67c9, 0x612d4a8c, 0x778ede62, 0x758ccbbf, 0x9a0327cf, 0x2b3a6df6, 0x58fb3488, 0xab5b27ef, 0x695689b4, 0x1c0936d5, 0xf682b901, 0xb5e3e404, 
    0xc13f7864, 0xb4816ffa, 0x0becd3c5, 0xd3628861, 0x28e42e30, 0xf383fe04, 0x27ba82ae, 0x8a57ca28, 0xb3c9e5b1, 0xdb107f2a, 0x1b7baefd, 0x847ab742, 
    0x36800640, 0x4046acd0, 0x9100c166, 0x8e3c39ce, 0xf82baf39, 0xe37af1b3, 0x6c6ffce1, 0xc49f216f, 0xd9b730b7, 0xfb53fb74, 0x024130ab, 0xb9048969, 
    0x00a4c21f, 0xbbb8d371, 0x7f62ade3, 0xf06afc09, 0xd3f8aa74, 0x53d6b0f5, 0x946e9cc5, 0xd763230c, 0xaf801f95, 0xb8b43593, 0xde136a13, 0x5c5f93b4, 
    0x349dbf5c, 0xdc6697a4, 0xc9491277, 0x6d135cef, 0x841efbb4, 0x6e15a529, 0x03bffeb6, 0x7f657fd5, 0x6c00ff03, 0x664daa78, 0x6dcb7ce1, 0x71193329, 
    0x856ca7f7, 0x1980ef39, 0xd657a4be, 0xfbbc62e4, 0x7f837fe0, 0x7ff80de1, 0x6d2ac3a5, 0x5c8cb8bd, 0x7cee7a5c, 0xdaa01f1c, 0x12f40a3f, 0x2954bcde, 
    0x3567b526, 0x74597957, 0x0b8ad21b, 0xb1c64d1a, 0x8c27266e, 0x00ff32f8, 0xadac8e6f, 0x656898f2, 0x45e1753c, 0x89697c6d, 0x0bc1fea4, 0x9e95fe81, 
    0x0ff30a7f, 0x72d7b786, 0x8db054fc, 0xcf3ecacb, 0x81832d39, 0xc6977ac5, 0x0def7c22, 0x7cad1d8c, 0x38ec8815, 0x5379bee6, 0xd525a771, 0x49ad7db4, 
    0xa45466a9, 0xc2d43fbb, 0xbc2c6ed3, 0x9e6ad33a, 0x3bfb9322, 0xd13d864a, 0x4e0beccc, 0x88daa9e0, 0x38186701, 0x2b9e0338, 0xe261bcce, 0x78199f4b, 
    0xd9dae896, 0xfa156345, 0x8c29e2a5, 0xa2082499, 0x923ae623, 0x17ce981b, 0x784e151d, 0x101f74c5, 0xbf5d8b26, 0x2667da8e, 0x34da490b, 0x54a22147, 
    0x2f6fb950, 0x01bb2485, 0x71eaa8cf, 0x0bc4075c, 0x8b6fec8f, 0xf105c3d3, 0x8d636dd2, 0x56253716, 0x0631e318, 0xb8fc543b, 0x4fe24f2e, 0x2eacfb7a, 
    0x4a03475b, 0xb72bea35, 0x8ffceb6f, 0x6ae3c59b, 0x2749c4d7, 0xe315876e, 0xf69a3626, 0x01cfa5a5, 0xfb65886b, 0x0cbba52a, 0x7b042eba, 0xc20f075b, 
    0x8861848e, 0x3fd75700, 0x7e203c0a, 0x3e45781b, 0x20fe44d6, 0x689ac0d4, 0x20180ef2, 0x76c60101, 0x2749c6a8, 0x0ad47192, 0xf80e1ff2, 0xeffac367, 
    0xeed694c4, 0x78a2c9f6, 0x5457c972, 0x7d426ed4, 0x55edf29a, 0xed6cb142, 0xdc4992dd, 0x1c6727d9, 0x15feeb9a, 0xf152f378, 0xbde6fdcd, 0x0d45e67d, 
    0xececa5cc, 0xd0969ddc, 0x4751b583, 0x6201e14c, 0x01fb9c3a, 0x76f1e2e6, 0xd1b1fbbc, 0x473eb9c2, 0xbece95ad, 0x5ec6172d, 0x87d3fe25, 0x5aa50dc4, 
    0x9ba5e0fe, 0xfa2fc158, 0x6d56d9cd, 0x3c3846ce, 0x75451e64, 0x95f62f3a, 0xb42585b7, 0x5a7da18d, 0x368206ce, 0x69cb5b95, 0x86a53015, 0xc09eb473, 
    0x69eb1de7, 0x9ed1bfae, 0x73553240, 0x874756fa, 0xf7e6926f, 0x6c6c1e53, 0x561583c1, 0xc8b95ec9, 0x84b1daed, 0xb3910aa1, 0x4ed477bb, 0x92d2eaa4, 
    0x4e8bdd6b, 0x391fbadd, 0xb5d54bfc, 0xc243f141, 0x77247b6b, 0x6d7b6f2b, 0x6e446e72, 0xa60c26a1, 0x49dce358, 0x3ec6c1f2, 0xbe9debbd, 0xf7f6aff0, 
    0x15d0a7c7, 0x497572bf, 0xe5635c5e, 0xe03b7b8f, 0x1da3fb74, 0x83f6672b, 0xc68ba2d6, 0x506c43f0, 0x3d5ba749, 0x6564b4db, 0x0fdab05c, 0x7d1e00a7, 
    0x11bcd16b, 0xf65be8e0, 0xb29ef182, 0x8661f363, 0x94b76428, 0xf17457ae, 0xd35331ab, 0xef4fb7a2, 0x2c9f3056, 0x00ff5d1b, 0x8abbb233, 0xe4b74b6a, 
    0xcf9ee0bf, 0x5091081a, 0x5f8a5174, 0x8c016b33, 0x0405e8b1, 0xcf05a2f7, 0xbae508ef, 0x5ea80a7b, 0x3c8b5152, 0xad35364f, 0x88b953da, 0xfb4d615f, 
    0x5bf5fe11, 0x610fbda2, 0xf3d97902, 0xa8edec0f, 0x92c64f1d, 0x4b3ecccc, 0xa9075256, 0xd7c81f39, 0x865a7cac, 0xf0f02419, 0xc72de59a, 0xf56e57db, 
    0xe5e37927, 0x7b7da6e3, 0x1a7c9057, 0x855f75d2, 0x45933ade, 0xdddaecd7, 0x323403af, 0xaa5c05a8, 0xf17b7012, 0xc2f1b35e, 0xc8f024c9, 0x9bed93bf, 
    0xec92d574, 0x8ad5389b, 0x98db42ec, 0xc72800b1, 0x0e7b9241, 0x9a8a780d, 0x752b95e6, 0xdf3ad147, 0xcbab34ed, 0x78ea1f4d, 0x4f7cf390, 0xad6ce9e3, 
    0xcd84c85b, 0x129ed12d, 0x311f2233, 0xaaecb1d5, 0x39835e3e, 0x63875eef, 0xe2dbe2f0, 0xae67452b, 0x5640dcd9, 0x225fb332, 0x209aa488, 0x0e0296c5, 
    0x7cb0f371, 0xf700f8e3, 0x3cf022af, 0x9dfebaee, 0xad19dcad, 0x58e2d9f4, 0x7e89b8a6, 0xd1c2e661, 0xa45d4f07, 0x3be88065, 0xc3d3bd62, 0x78f7a45a, 
    0xdbfe49b7, 0x59a6c6ad, 0x2994b166, 0x8be176ce, 0x5fe13e02, 0xf54ec7e1, 0xa95204fa, 0xf3d17486, 0xb35a2a15, 0xeff1dca9, 0x5711df8e, 0x8607d556, 
    0x7a1c93f4, 0xbd8b9c1d, 0x6fac422d, 0x0c023632, 0x7a32550e, 0xd0935c70, 0x061f742d, 0x5b7babf5, 0x80cbd314, 0x3dda6762, 0x1f489847, 0xbe78f5f8, 
    0xe149a1bd, 0x42ce5ee9, 0x3177681e, 0x4257c875, 0x790063c3, 0x0ebd1ec1, 0xf0d26a47, 0xd6b9bb70, 0x798aa12c, 0x6596642d, 0xd629ed87, 0x3b0e3d36, 
    0xbedee9f4, 0xb8411917, 0xe863dfb8, 0x9e1235f0, 0x7d6849ab, 0xb920de8a, 0x8647b7b4, 0x70229e04, 0x70049fc1, 0x5673e839, 0xfd53fc2f, 0xddabe18d, 
    0x750be25a, 0x4bdeda82, 0x12734499, 0x114b55db, 0x802da382, 0xf867cd78, 0x612c1936, 0x2f72730b, 0x30e6e376, 0xf7c03985, 0xfc2cfea8, 0x99f8bb3d, 
    0xfbb468e1, 0x8569503d, 0xa3b5cd1c, 0x8c7cb32c, 0x0a8218a1, 0xc1c9dda9, 0x08cf1afa, 0x2db53ba5, 0x7d62187b, 0x72f23995, 0xe4d7f5fc, 0x7b6b8b7c, 
    0xbfcbe275, 0x3f376a10, 0x2cf8cd35, 0xb981bbcd, 0x70d803b8, 0xc4be823e, 0x93185ff8, 0xf32d1ac1, 0xdd45fb28, 0xddcab385, 0xbc2aacd8, 0x63bec29f, 
    0xff9df0b3, 0x2d358100, 0xadd74c5f, 0x08cb950d, 0xc99d93bc, 0xcd776334, 0xce107f1b, 0x0077dc33, 0x063ed3d7, 0xc03fad6b, 0x7b4b1efe, 0x74dd9e75, 
    0xc3de4ff8, 0xdbe3b972, 0xd4a8ab18, 0x55d0ef66, 0xd9089d13, 0xb8ab73ef, 0xbd91203b, 0x83b29a14, 0xaef6286a, 0xc1156f5e, 0x9263df70, 0x9c09e2de, 
    0xc86430aa, 0x512f9c01, 0x134fadf5, 0xf04fa3f8, 0xa1269386, 0x2552caa8, 0x1b34123b, 0x44cf95a4, 0x07c7ee45, 0x009c04f0, 0xa561744d, 0xfb4e394d, 
    0x299dcf23, 0x566bd1c6, 0x3e5f516b, 0xc6b3f1cb, 0xf034b2f7, 0x5dda685a, 0xb66292bb, 0xe45986b9, 0xd5b9ed55, 0x02f413d4, 0x0b00ff99, 0xf37fc78b, 
    0x00ffc3db, 0xff3705f8, 0x9ead1d00, 0x97fe923a, 0x2e4b9df9, 0xbd853ec4, 0x5e17c43b, 0xc20ff02c, 0x91de10cf, 0xcdd3e43d, 0xbd9fd31c, 0xf31e00ff, 
    0xc698f983, 0xfed1957e, 0x69a37ad1, 0x156e0fdf, 0x2fb8ed77, 0xb87d6c0b, 0x3c392906, 0x58eff4f3, 0xa5f00a1e, 0x47f087e6, 0x1357d6c3, 0x6dba3cc7, 
    0x912c93ec, 0x68de2a74, 0xbf00ff18, 0x45fbbbb5, 0x12f81a4b, 0x89dbe568, 0x88bb5216, 0xc089301f, 0x67b966fe, 0xb4db25ae, 0x7ec5517f, 0x72f409ee, 
    0x6c940ffd, 0xd9e151e6, 0x5d54f3a5, 0xc71277c9, 0x84cae710, 0xfb4f9223, 0xdf912ac4, 0xfcafd71c, 0xea33f104, 0x080bc45a, 0x12a71b96, 0x3ecdb2bc, 
    0x750c8841, 0xa3e04e3d, 0x34c62be8, 0x2fbce6d8, 0xc33d2b0a, 0x67c060a8, 0x1d412107, 0xad0f5c87, 0x0600ff77, 0xedee92a0, 0x7779f334, 0x23eb48a2, 
    0x835adedb, 0x33869b24, 0xe93e261b, 0xd481e750, 0xabaff729, 0x72f3cdc2, 0x55e3b1f4, 0xbe165a57, 0x538d582e, 0x3b6b8252, 0x485a6dcb, 0x894ba4ec, 
    0x0f0588ed, 0x0c7424da, 0x192bc8b9, 0x471d3955, 0xbfe1937a, 0xf0256e87, 0x465dd5c9, 0x512b356e, 0x2c9c0300, 0x797d2483, 0x35d63eaf, 0xf81ccf3b, 
    0x2cefecdb, 0xb145ae51, 0x5fbb1fb8, 0x3b943f2a, 0x3990a41e, 0x7d4d9227, 0x04fbe017, 0xadd3b8bd, 0x00ff90ac, 0xf26be961, 0xe202574e, 0x4c41bb5d, 
    0xb90555f5, 0x2b1d4fee, 0xd73a73e4, 0xb3d98a9b, 0x7cea32ea, 0xb26575b1, 0x8ce9a247, 0x8014dbb6, 0xf4fa39a3, 0x41d6b2ae, 0x4c472a24, 0x7e44e60a, 
    0x47bd1062, 0x77696ca5, 0xdb58bb1f, 0xce2b5e86, 0x8d3d62c2, 0x38f4a444, 0x739d4bb1, 0x8e5f3975, 0x2f1e0f5e, 0x2cab73f8, 0xb154e731, 0x642cef85, 
    0xa2129741, 0xbe7fb493, 0xb57f4c01, 0x4957a09e, 0x6171dbe1, 0xdc2edde1, 0x8ab4210e, 0x07883e30, 0xf1baadf4, 0x9bf8137f, 0xbe157ec5, 0x73c13ed5, 
    0x7786e80d, 0x187369db, 0x90f9a1c2, 0xa5fb3902, 0x5ec7d86b, 0x7f5d122e, 0xe839f3af, 0xe0a25542, 0xa79eda9e, 0xe51d6b6b, 0x6324cfe3, 0x8f2a44f7, 
    0x957fce71, 0xae121f70, 0x41bcd4a0, 0xade15304, 0xc0d9f8b4, 0x831b59cf, 0xb7f871fa, 0x3fe96aad, 0xf8b46311, 0x8de26b79, 0x2afbd77a, 0xb59c58e2, 
    0xd2cc1d82, 0x8e222006, 0x197e9ca4, 0xca6ba6e7, 0xedbbb52d, 0xbb2bee7e, 0xdede82b8, 0xb205cf4a, 0x783fc1f4, 0xf9de0efb, 0x94a32aaf, 0x6ac1a9a0, 
    0x6f9fdfdd, 0x7c3df0cf, 0x755509be, 0x171d6d6a, 0x7b4e53af, 0x2ba4489b, 0xfee6a172, 0x3d90a92d, 0xdb670abf, 0xe5f9df74, 0xeb9000ff, 0xe259fccf, 
    0x5ccb4e7d, 0x784edf9e, 0xc917cdbe, 0x8725c196, 0xff63cd53, 0xe261c200, 0xffc3ef2f, 0xd18a7c00, 0x47b58d50, 0xbb72b164, 0xe0c33db3, 0x7ca9cf04, 
    0x0c17b91c, 0xe87c0b64, 0xf2003db9, 0xf61f2bf0, 0x44d399bc, 0x9040e4f0, 0xb8c95c92, 0xfca3fc7a, 0x72f6536b, 0x3b9200ff, 0x6100ff77, 0x75943f09, 
    0x7f5ffb91, 0x1fc32bc8, 0xfe27f3f5, 0xffd42b82, 0xe8859800, 0x371f39bf, 0x59afee07, 0x4df2487e, 0x6825ca02, 0x15890066, 0xc741b0ad, 0xfecf855b, 
    0x5d333f80, 0x4fa9b706, 0xe273696f, 0xaac34a08, 0xa4db2247, 0x885da8b1, 0x7d0ce442, 0x8df53e4f, 0x8faa7fa1, 0xfd5febfd, 0x20feab28, 0x329100ff, 
    0x97befef7, 0x4c7d2df9, 0x9b878e74, 0x7f9b892f, 0xa417fc0f, 0x5aa378d8, 0xe4095b90, 0x3692e98e, 0x3828e79f, 0x6b7d7e3c, 0x40c9acda, 0xc00070a0, 
    0x838f79c5, 0xd764e4bf, 0xfff0ebbf, 0x4daf2500, 0xf1c9afb5, 0x75b194b3, 0xdd67f62e, 0xa486a5a8, 0xe828fb92, 0x9a5fce74, 0x123582d5, 0x95350712, 
    0xd7fafda5, 0xda9aef87, 0xaf9e0f3d, 0x7a4533f1, 0x162ff30a, 0x457c90c6, 0x6e1b5455, 0x4092e22c, 0x9ddbdc79, 0x8f2af973, 0x7a35bdc2, 0x193ff30a, 
    0x48c900ff, 0xaf00ffb5, 0xf400ff08, 0x78f59564, 0x1c73f7cf, 0x8f91f11f, 0xdf3edde2, 0x9e791afb, 0x6ca32b21, 0x1d85fc5d, 0x5c333d4e, 0xcb7e84b6, 
    0xeb12bfe1, 0x506af3cb, 0x1f291240, 0x40478a90, 0xe263573b, 0x6e17f9ef, 0xf4afebbf, 0xff4c37ae, 0xe26d9200, 0xbfe6facf, 0x037fbeca, 0x5a439ff0, 
    0x706a914f, 0x55f0099e, 0x41f48b8f, 0xdc126aa9, 0xb092d4b5, 0x41bb1c63, 0x5befe9ef, 0xa8f000ff, 0xe9f93fb4, 0x7f00ff7b, 0xd4fa00ff, 0xe47f08bf, 
    0xbafe8b4d, 0xd6aef4bf, 0x23ce16bd, 0x0000d9ff, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(BrightnessNode, "Brightness", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
