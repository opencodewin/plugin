#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Kuwahara_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct KuwaharaEffectNode final : Node
{
    BP_NODE_WITH_NAME(KuwaharaEffectNode, "Kuwahara", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Stylization")
    KuwaharaEffectNode(BP* blueprint): Node(blueprint) { m_Name = "Kuwahara"; m_HasCustomLayout = true; m_Skippable = true; }

    ~KuwaharaEffectNode()
    {
        if (m_effect) { delete m_effect; m_effect = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ScaleIn.IsLinked()) m_scale = context.GetPinValue<float>(m_ScaleIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_effect || gpu != m_device)
            {
                if (m_effect) { delete m_effect; m_effect = nullptr; }
                m_effect = new ImGui::Kuwahara_vulkan(gpu);
            }
            if (!m_effect)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_effect->effect(mat_in, im_RGB, m_scale);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ScaleIn.m_ID)
        {
            m_ScaleIn.SetValue(m_scale);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _scale = m_scale;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ScaleIn.IsLinked());
        ImGui::SliderFloat("Scale##Kuwahara", &_scale, 2.f, 10.f, "%.0f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_scale##Kuwahara")) { _scale = 2.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_scale##Kuwahara", key, ImGui::ImCurveEdit::DIM_X, m_ScaleIn.IsLinked(), "scale##Kuwahara@" + std::to_string(m_ID), 2.f, 10.f, 2.f, m_ScaleIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["scale"] = imgui_json::number(m_scale);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf1a2"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ScaleIn  = { this, "Scale" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ScaleIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_scale           {2.f};
    ImGui::Kuwahara_vulkan * m_effect   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5303;
    const unsigned int logo_data[5304/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xec003f00, 0x1fee8120, 0xc42bcaaf, 0xbb4d3d7e, 0xf55ff6c4, 
    0xaea81fcb, 0x3b7ec5fb, 0xc7113f5b, 0x333a5aa3, 0xae7dee22, 0x414fe809, 0xfe9a57f8, 0x9b7dd3d0, 0x790136c5, 0x2bea2f26, 0x92339cf2, 0xfba99fac, 
    0xb668a10c, 0x8f194dcc, 0x2b3d13db, 0x6d98b6b9, 0xfe79b503, 0x74c27089, 0xae480224, 0x05e4d6d2, 0xeea8f605, 0xf74e764d, 0xb914b5b1, 0x192f834d, 
    0xf99a55e9, 0xd6830c77, 0xc7dea79b, 0x02ca2873, 0xd36b8cbe, 0xe9a5177c, 0x663fd45a, 0x7cb64d9f, 0x37c624e3, 0x74ad077e, 0xaa4ac2d3, 0x0c8e35bf, 
    0x75183e4e, 0x37cf567e, 0xe911fa99, 0x6ff25a58, 0x4570be11, 0xbe8d5f7b, 0x5236bc0c, 0x491f3e6a, 0xbd8c3167, 0x2349ab82, 0x2c00ff73, 0x7a3d09f0, 
    0xe1b54e1f, 0x96bb209e, 0x6e6d79ca, 0x985b6be2, 0x28c3a358, 0xf0dce8da, 0xda07c141, 0xa0f3b09c, 0x0c055af5, 0x3b650c65, 0xeaf67ad3, 0xae81b77a, 
    0x0185fe4d, 0x31ea9294, 0xb590d99a, 0xb6f18abc, 0xe9839c0a, 0xee82475c, 0xd1c3dbd6, 0xbd0a96dc, 0xb61538c9, 0x0bed6f35, 0x57179665, 0x870c8785, 
    0xbc22fe20, 0xce5cf1da, 0xf454e848, 0xa2bff821, 0x676da13e, 0x8471fbe2, 0x7a6729b8, 0x80b3fb09, 0x841eb076, 0x879ee929, 0xf88e57d4, 0x5f96c7d7, 
    0x2637fc0f, 0xce1b7baf, 0x5b307977, 0x4859d6c7, 0x143d2924, 0xb0274970, 0xfb0027e3, 0xf48eef15, 0x67f8017f, 0xd3c49f5b, 0x1637e8aa, 0x34b024d2, 
    0x85338f8a, 0xe616892e, 0xb912d250, 0x5724cf55, 0xafb176e7, 0x5ab7785f, 0xa4d4579f, 0x38642e69, 0xc2f2318d, 0x3b8ac29f, 0xa927fe01, 0x7e19fb24, 
    0xf32aeb1f, 0xce277ed9, 0x515ff1e2, 0x5d7c28bd, 0xa9a7913c, 0x76f1457c, 0xec3d7fb3, 0x66a1feba, 0x6fe136d3, 0x45d17065, 0xa0aaec18, 0x3df103f4, 
    0x6fd53cc9, 0x55bc4cf8, 0x464300ff, 0x8100ffb5, 0x5a35fecf, 0xce7ac3df, 0x6b9f1fa5, 0x91376aa4, 0x5900ff31, 0x2ef26a6f, 0x5a07327d, 0xdf10fe97, 
    0xbdd07f11, 0x0ce07fac, 0x535fe19f, 0x48a205c9, 0x556baff9, 0x943edbea, 0xf7d44df0, 0x37172a9e, 0xbad33432, 0xa76e6731, 0x68bfe88a, 0xcde20bc6, 
    0xe5f99f3c, 0xf86345fd, 0x00ff281a, 0x3fdae3b7, 0x6f95bf81, 0xeab6d27e, 0x0ed32dbe, 0x5f0fc23a, 0xa40e5f71, 0x2e1bb3be, 0x3fc9e887, 0xfa726667, 
    0x5265a13c, 0xa42b064e, 0x27489abf, 0xd1c47236, 0xad2c9848, 0xfa671cc1, 0x8c74e68a, 0x5fb4dd35, 0x3fd5d1f3, 0x3f770532, 0xb5a56c13, 0xe7a0d6f1, 
    0x90e5ad0a, 0xb2fccf01, 0x9b2afd51, 0xd70687bc, 0x2dfa8bba, 0x264650bc, 0x96ddb295, 0xbee183bd, 0x8b23738b, 0x21d9cfc9, 0xf331753f, 0xe695feb0, 
    0x04b11b3e, 0x73e32cc5, 0x3d2832e4, 0x177bcd3d, 0xc2acb587, 0x5ecc2700, 0xb87aada4, 0xf15c5d7b, 0xbc5cea71, 0x48733db0, 0x0490389e, 0xa9db43c4, 
    0xf6d3bce2, 0x6119f882, 0xba462bf1, 0x4d8305f1, 0x1b4be26b, 0xa42d1c39, 0x82d4613e, 0xca424a46, 0x01c93b08, 0x0748c655, 0x6e976f18, 0xcc8897b5, 
    0x4bb66012, 0x105bb37f, 0x80ecb778, 0x792c3933, 0x5f711050, 0xabd31947, 0x7cec591e, 0x0d5ba74b, 0xa3a75451, 0xb6be483e, 0xfa825f4b, 0xe3d19598, 
    0x2f294f36, 0x37ce21d0, 0xdb73d867, 0xb19f72ad, 0xf125beac, 0x4d3586cf, 0xbb272c2d, 0x4124d3b7, 0x43823a6d, 0x39ca9003, 0x0e1cb4ed, 0xeb6b7dec, 
    0x496ff011, 0x296b52d7, 0x1d7e44ed, 0xcd863d9a, 0x11c47067, 0xb7dc02f3, 0x5dbd9f3c, 0x5f7485cf, 0xd0247c0e, 0x1e5d742c, 0xc534ecd1, 0x7708457c, 
    0x1f850497, 0xcb9ed879, 0x184abcde, 0x154e781e, 0xfadf57f4, 0x27267dee, 0x0aa95137, 0xb65d7d98, 0x433f00ff, 0x90f6aff2, 0x00ffadf1, 0xdf26be8b, 
    0xf256d768, 0x1cdee959, 0xad284b9e, 0x90cb8ba7, 0xbb12084c, 0xcb92938c, 0x1cc8fe81, 0xfce39c03, 0x7573f823, 0xf1c413f1, 0x6ca5465b, 0x3297c4e1, 
    0x61073080, 0xe25f35f5, 0xfc6d89f7, 0xc693f17f, 0x2997c69a, 0xb5d5b1b9, 0x24adb9eb, 0x22993164, 0x24cb9b69, 0xdb95111c, 0xbed607d7, 0xf009f8c3, 
    0xfe872fba, 0x8c658911, 0x7edc687f, 0x9445e2f6, 0x981eb3b2, 0x6a0f8ce9, 0x84c9a7f4, 0x9b0ea3a4, 0x7c3e5d1e, 0xaf565775, 0xc800ff5d, 0xe03dbceb, 
    0xd2443b5d, 0x88e1ec2d, 0x806b1c45, 0xffa3b5aa, 0x97dd0800, 0x5a3bfea7, 0x64d29c04, 0xcce582d7, 0x4259cfee, 0x9e8f442b, 0xc31a093c, 0xfcf126af, 
    0xb5ca8f2d, 0xff6900ff, 0xfac49300, 0x7f98e941, 0xc37baea8, 0x49c57f93, 0x6f6c3a16, 0xfda36be4, 0xe2dde3a8, 0xb9fe132d, 0x4c5e517f, 0x7eccfa53, 
    0xda49d567, 0x0f9d3816, 0xd5479353, 0x244abdf4, 0xe6ce1e59, 0x3e8e902b, 0xb0c1d856, 0xf78adb71, 0xd8938a6f, 0xeab23aeb, 0xab4b493a, 0x9b3c5919, 
    0x01870a90, 0x3a50b70a, 0x57f86130, 0xc2366987, 0x9efd0357, 0xbfabbd3e, 0xb4e2d7bc, 0x639f66f0, 0x16362473, 0xb8860076, 0x6919ec9c, 0x3849865d, 
    0x951f20eb, 0xd4f3e968, 0x4f22b78d, 0xe87baed9, 0xb65d9f5a, 0xfb7c6dd2, 0xc0b38f9b, 0x8d2403a4, 0x0770928c, 0xe51548e2, 0xa1fd2a5e, 0x86591f2e, 
    0x202e290d, 0x7c9b0982, 0x401680d3, 0x822a1fa7, 0x7b723d78, 0x3c728e63, 0x00ffc68f, 0x17bfb512, 0x65f736ea, 0xed2cb3bf, 0x506cee4f, 0x95b200ee, 
    0x9681e42c, 0x7180d3e7, 0xc29339d7, 0xf8bd027e, 0xe958ac9d, 0xae586276, 0xb264decc, 0xe76321a7, 0xfd883f39, 0x7830ef6b, 0xeae26148, 0x139f5a54, 
    0x5e65cc8c, 0xdf8ece5e, 0x0b9eed99, 0x2fc4c7f1, 0x4ebbf81e, 0xaa3b3cd3, 0xb79c05cd, 0xa9d46d1e, 0x8b224e14, 0x08b94bbc, 0x86883fc6, 0xaf798061, 
    0xa41f3cb5, 0xdaa58fa6, 0xce35f325, 0x9620e5a1, 0xe04bc656, 0x32009c64, 0xd803a04f, 0xf829af74, 0x47fbf067, 0x3aa42ff8, 0x995ba299, 0x5292ecf6, 
    0x3fd07d03, 0x9bbde6a1, 0xf52b02c2, 0x57a4895b, 0x41c830f3, 0x83e020c8, 0x4aad8a51, 0x1c074a53, 0x0625e228, 0xfce1d0db, 0xe946fb4d, 0xa9b7565a, 
    0xb0c36b78, 0x786b00ff, 0x2df7db8a, 0x5616a33c, 0x8e0ce7f3, 0x4177eec0, 0x3f465582, 0xe39cba84, 0x17dabfe4, 0x2df18ff6, 0x84eefdad, 0x4f4d21be, 
    0x5b86d2c4, 0x52116c89, 0x185648df, 0x93574431, 0x2cc38222, 0x783f53cc, 0xfbb129bf, 0xf0cfdc43, 0xb5a4f6bb, 0xfb3c098a, 0x8b04551d, 0x3b1c646a, 
    0xc1714586, 0xfbc40c23, 0x8f801eed, 0x58c85e92, 0xf900b0db, 0x7912e48e, 0x7ba1d627, 0xdbe9b2fc, 0x514d87cc, 0xd7772b4e, 0xd93ff6c8, 0xaf6bc04b, 
    0x536ad078, 0x2d6d6ba8, 0xf7614541, 0xfa856ca5, 0x0a7f02e0, 0x30e179fb, 0x15761046, 0xb300ffe3, 0x85c7808f, 0xcda7153c, 0x44fa6222, 0x39c8e5f3, 
    0x601ce0dc, 0xf0a30dfa, 0x549f5aaf, 0x782c7108, 0x91d7ec3f, 0x27eda989, 0x41abc76e, 0x6958287b, 0xe64d9a73, 0x6ea3beaa, 0x7bc09d58, 0x0bed4f1a, 
    0xce8fef7f, 0x8e7c39b9, 0xd77c668e, 0x66d9bbe1, 0xadad7df1, 0x5d6946bc, 0x961a091f, 0xe049f966, 0x0f7aa50f, 0xcf6e3fed, 0x180f2de2, 0xf8ebc903, 
    0x826ff28a, 0x7c13f757, 0xb751d169, 0x9673acba, 0x733fce63, 0xbfd82b26, 0xe2af3d69, 0x9bf90e2f, 0xb9316684, 0xb822d397, 0x3194532a, 0x863e8a11, 
    0x0d564595, 0xcf63ebbf, 0xa4417c2c, 0xed6f2af8, 0xb63c121f, 0xad5b5ed6, 0xbec771a4, 0x0497a95b, 0xe9a1272a, 0x5702e0b8, 0x78965724, 0x1e37c4a3, 
    0xf75cf136, 0x6147d8f3, 0xae2bd215, 0xbc00ff9e, 0x6f425550, 0xf2cd8027, 0x03a39d91, 0x5ef5dc8e, 0xcb75783e, 0x0be548eb, 0xe28e5624, 0x671b6024, 
    0x20f59141, 0xbee6557e, 0xf1672f37, 0x74c5e806, 0xa8cad6f6, 0x1af151aa, 0x281c2c0f, 0xfc4932e8, 0xb0d0af49, 0x152c6599, 0xaca98835, 0xf8ccbf9d, 
    0xab31c35c, 0xc5e8aa89, 0xfce6a8fb, 0x58c72c4b, 0x01f134d4, 0x0873d259, 0x2101eac1, 0xdcfc8c71, 0x6ba6d70f, 0x8200ffed, 0xf8b4143e, 0x7b47e043, 
    0x197fe399, 0x75adb6ea, 0xef919c15, 0xb17c7748, 0x2604c06f, 0x0b2c8573, 0x74bf7d6d, 0x024fe7e3, 0xba427ff8, 0xe2a786f1, 0xdf096afd, 0x8c1e1ec3, 
    0x08d7704b, 0x45e76fbb, 0x76cc8020, 0x50b8ee12, 0xaf4fcc4f, 0x187cdc15, 0xe3b9bef1, 0x58f3561d, 0x5e7924d6, 0x253a5ffe, 0x642bc6dc, 0x461021dd, 
    0x4d633b1b, 0x85642adf, 0x97d7d4e7, 0x09ad6298, 0xa3736d49, 0xd5aac12c, 0xfe4f4ee3, 0xd709fe1b, 0xc763f8d9, 0xc5832cbe, 0x533de209, 0xbb971b12, 
    0x6026c080, 0x62ac9a0f, 0x97cf9d8d, 0x8e82150e, 0x39e3e07a, 0x6df85eaf, 0x1ade6aaa, 0x88ae6bf8, 0xa63aed1b, 0x67cb689f, 0x1275b90c, 0xb094916c, 
    0xcad00edc, 0xbd8fb433, 0x1a9c56d4, 0x57e81194, 0xf3e26d4e, 0x46e1f20a, 0x43ad034f, 0xb551d7f0, 0xf1c4e39a, 0x9f08f0ce, 0xbba2984f, 0x00cf6f0c, 
    0xbc26bf67, 0xea8cd638, 0xe019fb44, 0xc5098dfd, 0xf3beb574, 0x5a142fe1, 0xe267785d, 0x85f687ad, 0x8299bacc, 0xafc92bfa, 0x99e52566, 0xdc392b8b, 
    0x5ebf27c7, 0xaa799e73, 0x9f857fba, 0xed153fc4, 0xdab93a7c, 0x2a24c5d7, 0x12032140, 0x00389ee7, 0x3dc7c7d6, 0xe2fbd26a, 0x960da37e, 0x1a9f1ec3, 
    0xdc16ef46, 0x724b7219, 0x20a88c3b, 0xf58a20f4, 0x08de822f, 0x4fe3ef8a, 0x02d6758a, 0x58596b7b, 0x7217485b, 0x0ed62693, 0x93eed3ad, 0x55afb1d3, 
    0xcea57056, 0x46af93cf, 0x0ec2dd3e, 0xfac83fe9, 0x74894b2b, 0x56e218eb, 0x6e7ec663, 0x7799daa3, 0x224ae779, 0xcd34238a, 0xcd1955c0, 0x30c2e425, 
    0x5d513848, 0x095fc2d7, 0xdac4a847, 0x334bcc9d, 0x4850c5c8, 0x5e0fb69b, 0xa8337845, 0xce682fa9, 0x8763b589, 0x97eb005f, 0x70f64b60, 0x3d29ba81, 
    0x5ce17f29, 0xc9f39f6b, 0x495f337f, 0x55e087a7, 0x54fe2200, 0x7f18ecef, 0x3f95bfb8, 0x54fe57ad, 0x1dd6fe79, 0xd90fcbcf, 0xf8455fcf, 0x3e776b8d, 
    0xa5188ee7, 0x3c1923dc, 0xf75e01a3, 0x2cda48fb, 0x7787dfba, 0x99301648, 0x8e8cbb3b, 0x27f3d5be, 0xbed524c3, 0x6dcaf81b, 0x92b4543f, 0x88976c17, 
    0x865375af, 0xbb83d00d, 0x5f731e8c, 0x8bd5fe47, 0x4d2b5bf6, 0x16744646, 0xd4b65276, 0x5b0a49c6, 0x2abad2bf, 0x081b4fd2, 0x3e1cfad8, 0x5257d822, 
    0x3cf2cd47, 0x8cf1209e, 0x268f70d6, 0xbe623a3f, 0x39999f5b, 0xce817170, 0x7a9ce300, 0x87e75df3, 0xf1c3183e, 0xcbdafe0a, 0x84b6f351, 0xf936be61, 
    0x132c4199, 0x9364e418, 0x96577bf8, 0xc1729768, 0x21f528e2, 0xa31bb686, 0x7091e391, 0xe0544637, 0xdf5ecf83, 0xddf57afd, 0xddf5f106, 0xaf39fb2b, 
    0x52f64be4, 0x48a773ed, 0x0f8fe56d, 0x6c89959f, 0xd807b87c, 0x9c3efd9a, 0xe90c5763, 0x25cfcfad, 0xb4b79657, 0xf1471e7b, 0x78b1c77f, 0x61afc4bb, 
    0x860701a5, 0xdb4ae974, 0x43b4435b, 0xd2908034, 0xd711bc80, 0x30927a1d, 0xf05fd758, 0xe9b0c453, 0x4cda1037, 0x571b20e0, 0xff13f1b7, 0x9057b300, 
    0xa44de95f, 0xb6c96e01, 0xf465f848, 0x1efeab39, 0x6f7b4b13, 0x9cbb2c18, 0xaf3cf52e, 0x2e367cbd, 0x41393d8f, 0x5d1e7dec, 0xf10a9589, 0xe33eb5aa, 
    0x8eb8241e, 0x89ca3ed5, 0xac7c7224, 0x071dc924, 0x3fe24ba5, 0xfff08b89, 0xa5f6e100, 0x9d16737f, 0x5979eb06, 0x775e9853, 0x612cb311, 0x3838568f, 
    0x0b2bfde0, 0x269bcee1, 0x9a236e8d, 0xa4c05bee, 0xb6c2596e, 0xfa315008, 0x8c00ff55, 0xf6b300ff, 0xc2dbf1b3, 0x7ae87bfa, 0x695336a4, 0x2e0dd3ec, 
    0xa63b5272, 0xc3fc42d8, 0x46f9d980, 0x723b0040, 0x12fefc3b, 0x292d5511, 0x63e67d68, 0xb9c35189, 0xf0f11e46, 0xc61595ce, 0x71a70ea1, 0x734df270, 
    0x9864993a, 0x36bb5cb6, 0x3fcf4972, 0x7c715fe1, 0x87a3d313, 0xf455dac0, 0x6773932d, 0x23409817, 0x73a8a82e, 0x7c452af4, 0xfbf075b7, 0x7d73f85c, 
    0x291e69ab, 0x5d34aed2, 0x0dd96d40, 0x40cc63c2, 0xdbc87c5d, 0x0812baee, 0x8383a40e, 0xe0277dcd, 0xd0504b7d, 0x41a0017c, 0x05181a6d, 0xb99dc9a2, 
    0xeb673904, 0x57f961f4, 0xd1778bad, 0x0a1f3e77, 0x00ff0bad, 0xafc69d5b, 0x24278a29, 0x6ffa0ae0, 0xfd83b6e1, 0x30ede09d, 0x024d3792, 0x86e9484a, 
    0x15a11f19, 0x8ee785f1, 0x6be9a60e, 0xacaca325, 0xc81933ca, 0xa8bee23c, 0xc3f1dbf8, 0xfc9dfd42, 0xda3d6f03, 0x45f3f5bd, 0x4a2f6df6, 0x787dbf8d, 
    0x1f7680e8, 0x67c1a82a, 0x093d00c6, 0xadcaa72a, 0x2942f318, 0xce55935d, 0xa8c7964b, 0xc97188ee, 0x1fdf28fc, 0xf3abfca1, 0xb7f6fb2e, 0xdeace9f8, 
    0x891f7b49, 0x3902fd34, 0x699d46b0, 0x702cc3a5, 0x4ac301e0, 0x27e3dcae, 0x1827792c, 0xfc071518, 0x7fc72735, 0xff601ffa, 0xa72dc100, 0xae1b00ff, 
    0xeb3e65af, 0xdf1cf9fa, 0x16639f54, 0x7ed5bb24, 0xf12e7c1e, 0x2577e126, 0xd73637f4, 0xe6466cb7, 0x4294d27d, 0x591e2739, 0x6300ff19, 0x5fe815df, 
    0xffcf8cb7, 0x89e60800, 0x361a8a6a, 0xa65ff3bc, 0x75dc5840, 0x748100ff, 0xba864fac, 0x2fc1af0b, 0xde33690d, 0x7e9a3cc3, 0x8bb132a7, 0x48b2f22d, 
    0x03e341ea, 0x4e1fc32c, 0x6ebff69d, 0xb46dd87b, 0x5429166d, 0x50dd9596, 0xab1832ae, 0x5de9d701, 0x65969a75, 0xc83f2f49, 0x2cf3c3eb, 0xe5275505, 
    0xc5209ff8, 0x493a6d21, 0x9913661a, 0xe7048091, 0x3e490c68, 0x9fe935b9, 0xbc567507, 0x05b661d5, 0x2361a56d, 0x2147aa7d, 0xe3a1e376, 0xd5c2bcd6, 
    0x405d9564, 0xe65c202d, 0x7087dfba, 0x967e734b, 0x9185bcdb, 0x25a8a35c, 0x714e1f81, 0xda577a80, 0x51e32661, 0xab6ae523, 0x149f0bad, 0x5c9bb322, 
    0x0d73652d, 0x8b6cc9e4, 0x09236176, 0x186eb332, 0xebc7c0eb, 0xf81e7e57, 0x22ad7b5e, 0xe3a6403d, 0x0845ea35, 0x93149e03, 0x5ee5c7fc, 0x3e379762, 
    0xd9bcd724, 0xe13e5fe4, 0xc0006980, 0x7e001854, 0xbed67340, 0xa773f8a4, 0x63797bc9, 0x87b80d6d, 0x7c11d344, 0xdc600a99, 0xeb97174a, 0x3f1ecbc0, 
    0x3c2727d9, 0x8869a67c, 0x44976fe5, 0xb0c9aecf, 0xcb69d6de, 0xeb91fefa, 0x441b42ba, 0x7fc14060, 0x9d5e714c, 0x4650dde0, 0x06e22eb0, 0xafb8bf57, 
    0xc7f7583c, 0xadad38c7, 0xc9dbf80a, 0x18c6b11a, 0x8daff363, 0x6a595e85, 0x7471d0cf, 0x489b5263, 0x4f6a7fee, 0x6cfcf082, 0xd63435f8, 0x235e1c8f, 
    0x69df54d0, 0xb674cdf3, 0x4d0514f1, 0x7c3352c4, 0x3c345e81, 0x571950b1, 0x3ebbab2c, 0x2658a34b, 0x2a6de18d, 0xf69d7fc7, 0xdca1485b, 0x00b53346, 
    0xfa0a3fce, 0x5b13c283, 0xce1dfa6b, 0x414b769b, 0x2ac10b75, 0x5246c983, 0xbf26f4a7, 0x7d7b3c3d, 0x7a87efe2, 0x0e65bff6, 0x7ba136a1, 0xbf3d7f67, 
    0x32becf96, 0xaf364256, 0xddbf9dcb, 0xe3c038e3, 0xbc54d4b7, 0x7694d3e9, 0x70823a3f, 0x1ffae294, 0xf016fc4a, 0xdfe29b26, 0x7973cb15, 0x59ad38b2, 
    0x33205359, 0xe3ba3db7, 0xaf48fe83, 0xb5a7fd2d, 0xc6cff1c5, 0x998bab2b, 0x473b7d96, 0x44d85a8c, 0x800cb619, 0x90a46264, 0x91209f1d, 0xdc47aa8c, 
    0x8ff0d31a, 0x866f6bc6, 0x3ced07bf, 0x6f9bac6f, 0x6dee4bf8, 0xd0b1216e, 0xde315fa1, 0x675517e4, 0x8060308c, 0x8c247605, 0x4125c703, 0x6b4d5bf0, 
    0x8664d753, 0x2d6153e7, 0x0327f8f4, 0x331fdb1b, 0xe70c3a90, 0xe1f478b5, 0x4d79ad52, 0xfcd7152d, 0xd349df31, 0x2dfabc8b, 0xa285290d, 0x37a844c8, 
    0x51e9c0f7, 0x7fa000ff, 0x3baff473, 0xacbf56f1, 0x47dcadc7, 0x5bb07a61, 0x4014ca27, 0x92dc93af, 0x12fe236b, 0x00ff121f, 0x00ff53d0, 0x00ff6325, 
    0x0815f70a, 0xe4d45fdb, 0x76572a96, 0xbfa70ffd, 0xef38cb66, 0xcb8b67bf, 0xa17981a9, 0x8d881cf1, 0xc5db809e, 0xfecb35fe, 0x732d97dd, 0x0916f8a8, 
    0x69475815, 0x774ea23c, 0x394633b3, 0xc7dbc03d, 0xfb5dd7d4, 0xc900ff30, 0xf65feab5, 0x93febf32, 0xed5f5cc5, 0x2100ffcb, 0xd77f05bf, 0x12fabf84, 
    0x46fe4fd6, 0x19fdf470, 0x45fe4fcf, 0x547f3db5, 0xac87bf78, 0xdd887b61, 0x637c2793, 0x6e75fbaf, 0x6988cdf1, 0x0452c4a0, 0x9cdb2b18, 0xff1c7e54, 
    0xfd1f5900, 0x00ff8f74, 0xff6aa743, 0xdfecf100, 0x0afd8fee, 0x0d69e1be, 0xc497990f, 0xbe849fcd, 0xdbfeb01d, 0xf3e191b9, 0x1a60655d, 0xbe06784e, 
    0x58e3d296, 0x28a040e3, 0xe72b8003, 0xf2df84cf, 0x00ffbb17, 0xebfccfae, 0xee3b5de8, 0x9a477ead, 0x24154f4e, 0x4b26fbd9, 0x1a24ac08, 0x0ca64f47, 
    0xda526b9e, 0xef741225, 0x5a5f7a59, 0xfffbb7d6, 0xc7718d00, 0x37e2e9a1, 0xf3e1673d, 0x48309115, 0x68bf98af, 0xbe6d78fb, 0x45d16b3f, 0xa614690c, 
    0x504557d6, 0x42b76601, 0xf2a41ec7, 0xf4354f7d, 0xd63f80e7, 0xfbcf7c2d, 0xc1c97f4b, 0x59ee1feb, 0xd732e97f, 0x00ff52d8, 0xd5e64776, 0x99de00ff, 
    0xb035bee7, 0x6528fb87, 0x42dbaa72, 0xaef6c0f6, 0x2f7b272d, 0x5693f80b, 0xb6beed84, 0x841461b7, 0xa0076767, 0xf1bd2bfc, 0x4f82fcb7, 0x3eaf74fd, 
    0xef49fe9f, 0x81eb7f8b, 0xe0584dfe, 0x733b8235, 0xc2a1250d, 0x3a245ae8, 0x739f8fbd, 0x6228cf2c, 0x71f2b785, 0x5a474e8e, 0x8400ffd0, 0xf3fbcb42, 
    0x63df00ff, 0x7ff028fc, 0xfd4f82fc, 0x2be46f74, 0xc623bd72, 0x00d9ff3f, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(KuwaharaEffectNode, "Kuwahara", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Stylization")