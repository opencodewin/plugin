#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "PixeLate_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct PixeLateEffectNode final : Node
{
    BP_NODE_WITH_NAME(PixeLateEffectNode, "PixeLate", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Stylization")
    PixeLateEffectNode(BP* blueprint): Node(blueprint) { m_Name = "PixeLate"; m_HasCustomLayout = true; m_Skippable = true; }

    ~PixeLateEffectNode()
    {
        if (m_effect) { delete m_effect; m_effect = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_RadiusIn.IsLinked()) m_radius = context.GetPinValue<float>(m_RadiusIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_effect || gpu != m_device)
            {
                if (m_effect) { delete m_effect; m_effect = nullptr; }
                m_effect = new ImGui::PixeLate_vulkan(gpu);
            }
            if (!m_effect)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_effect->effect(mat_in, im_RGB, m_radius);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_RadiusIn.m_ID)
        {
            m_RadiusIn.SetValue(m_radius);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _radius = m_radius;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_RadiusIn.IsLinked());
        ImGui::SliderFloat("Radius##PixeLate", &_radius, 0.01f, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_radius##PixeLate")) { _radius = 0.4f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_radius##PixeLate", key, ImGui::ImCurveEdit::DIM_X, m_RadiusIn.IsLinked(), "radius##PixeLate@" + std::to_string(m_ID), 0.01f, 1.f, 0.4f, m_RadiusIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_radius != m_radius) { m_radius = _radius; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("radius"))
        {
            auto& val = value["radius"];
            if (val.is_number()) 
                m_radius = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["radius"] = imgui_json::number(m_radius);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf33b"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_RadiusIn  = { this, "Radius" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_RadiusIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_radius          {0.4f};
    ImGui::PixeLate_vulkan * m_effect   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5668;
    const unsigned int logo_data[5668/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x7cba6f49, 0xf866ad9f, 0x16be4db6, 0xe93fe3b4, 
    0x6aebd11f, 0x78e7252b, 0xd704d307, 0xf54be22b, 0x6b357cd6, 0x8a65107b, 0x000ef859, 0xdf8e036e, 0x9d53fc4a, 0xa8b81f5d, 0xd37c34b9, 0xc6e4bea5, 
    0x00ff883f, 0x38fcef2a, 0x4ee874db, 0xe87fc333, 0x45ebbc46, 0x031c6495, 0xd2afc79d, 0x6212bdbb, 0xd0033196, 0x7bcdfc03, 0x3f79a795, 0x538f5031, 
    0x58fd8faa, 0xde66e914, 0x357e8c87, 0x68c3b74d, 0x31043993, 0xff7b1dc7, 0x696c8500, 0xd7be0c7e, 0x2dc7106e, 0xfb2b19b8, 0x67d061c6, 0x8d46d4b2, 
    0x0e752f49, 0x15547ab5, 0xf0df4aea, 0xc6760e0a, 0x0b55e43b, 0x5a1f63be, 0x31f8a4ef, 0x174d1be2, 0xbd24d553, 0xcace9ad3, 0x1659aedd, 0x5551de47, 
    0x63f28198, 0xe3cf1d38, 0xd16e6e5e, 0x830d3894, 0x169dd04d, 0x476524a5, 0x9f144713, 0x7fcd95b2, 0xebb06d82, 0x927fd709, 0xebf7e933, 0xcbdf1ed4, 
    0x853f7b1f, 0xe780b778, 0x88c9ef68, 0x13b1c4ed, 0xd86bee91, 0xa29dd4a1, 0xfa49ec5d, 0x4d13c70a, 0x9cb9353b, 0x7e77ee60, 0x49f85f04, 0x2dbc6934, 
    0xff1e00ff, 0xc99c6e00, 0xb3bdbff6, 0x67e3ab6a, 0x8e97cf19, 0x7cb5afa3, 0x7f0be3dd, 0x781aefec, 0xe6dd4e83, 0x9e508b7d, 0x37c6ccdf, 0x389791ed, 
    0xc9749ced, 0xf1b34faf, 0xf587df5d, 0xe9f42f78, 0x25e6de9a, 0xb6621f3b, 0x1b9e0a32, 0x7e34a123, 0xb50d9ed3, 0x91e6e183, 0x240e4de3, 0x5d1abeb2, 
    0x4daeb1de, 0x77cf8c2c, 0xa51c9327, 0x07e50e91, 0xd8c0693e, 0x743a603e, 0xf9e4359c, 0xe557e511, 0x491562c3, 0x7c2b19e9, 0xb0e4d9d5, 0xd31c62ae, 
    0xc6d77bf6, 0xadf8245e, 0xd53aebac, 0xeba5e5c5, 0xdd266fc7, 0x6e112cab, 0x780e5018, 0x59efc13d, 0xfcb0f09f, 0x4100ff45, 0x1f83fc0f, 0x5f1300ff, 
    0x8d9ab244, 0x1bc7ca5d, 0xf245a9cf, 0xec6337a8, 0x737c1f5f, 0x601fc49f, 0x5716cffe, 0xbf994f1e, 0x33ae32f7, 0x87791fb7, 0x6956afa1, 0x48cbf0b3, 
    0xc3c77f3c, 0xd752e87f, 0x4f69f1ca, 0x9f537006, 0x74ea6b42, 0x6ee19f81, 0xf633728e, 0xd000ff97, 0xc49eafa5, 0xc508a7d2, 0x536afa44, 0x475e499d, 
    0xda1dfecc, 0x6fe4e023, 0x7f57c83f, 0x87c08ca0, 0xebfcd3b6, 0xbf39bcce, 0xfbb024c9, 0xea0af9e7, 0x4ff3fa56, 0x98548eb1, 0x00ed642c, 0xa8bf2728, 
    0xedeaaef6, 0xb7683239, 0xaa33734d, 0x56e396b2, 0x1a817bbc, 0x995f979b, 0x60008517, 0xbdc33e77, 0xa5856f7a, 0x025a6d4b, 0x8805244e, 0x4df77104, 
    0x74938679, 0xc22d50b6, 0x5ec1a502, 0xfa7f3d39, 0x0e1fefd5, 0x1d6d2ffc, 0x89d9feb9, 0x392ff56e, 0x76a2b9bc, 0x1cecb10a, 0x9df33610, 0x66d7bbdd, 
    0xe6913d19, 0x94509a63, 0xd79ebba4, 0xd6c488e0, 0xc4bc1b11, 0x3b8c281e, 0xbf238b3f, 0xb54e6f5f, 0xe07bf183, 0xf48faf7d, 0xf61a78e4, 0x49b9b64b, 
    0x8da6381e, 0x978d5500, 0x3bfd323f, 0x738beed6, 0x51bcb51d, 0x44236005, 0x38fcb158, 0xeb4a7f1c, 0x965d752c, 0x63eed2e8, 0x5a0f20cf, 0xa751eafa, 
    0x1fc92838, 0x5a9d549a, 0x3da57d35, 0xe0f9f919, 0xf0580f4d, 0xea1aabf6, 0xe76b8bd6, 0x0e8f10cd, 0xcf0dbbaf, 0xa38e63dd, 0xf85cadaf, 0xfc08f1e7, 
    0xd6a3d22d, 0x7bbac110, 0xd27fedb8, 0x635e7763, 0x0721e066, 0xaff3273f, 0x7c303ea6, 0xfe538f12, 0x1ffcd5c9, 0x6595ae1d, 0x7ad7f9a2, 0xca9377a4, 
    0x63633ccf, 0xe3108c28, 0x4a9d2420, 0xa7cfe1fd, 0xbe1c3fce, 0xf6977800, 0xaeb5f08b, 0xed4be189, 0x82bf4e2f, 0x5dde2ff5, 0x3312595a, 0x64244712, 
    0x77c89102, 0x4c4f916e, 0x1f7b1e60, 0x7183ad96, 0x682d2ac7, 0x1fe000ff, 0x58f3e1a0, 0x8d782fcf, 0xddf7afa4, 0xa463afdb, 0xfd34d7bf, 0xeeeed936, 
    0x68bb3c6e, 0x31f6bdf1, 0x00074ec6, 0xf115a967, 0xf107ed17, 0xa5f8516f, 0xafd375e2, 0x4e8bb3e1, 0xed2e6fd0, 0x236de9f4, 0x67a27974, 0xe6260d55, 
    0x0f893839, 0x3d9e7a01, 0x6dbf453f, 0x1dfe873f, 0x24fb7ff8, 0x5ec4ebf8, 0x9f8ed31f, 0xb2370be2, 0x9ddf35fb, 0xf7308224, 0x2bdfc8b6, 0x779553b1, 
    0xd6d7831c, 0x0bf429bf, 0x781acf1b, 0x32b24993, 0x5a2d75c6, 0xd24428ee, 0xcae6a9fc, 0xa36d6ee0, 0x70b2b981, 0x0cbd823e, 0x73f0540e, 0x6f5a95f6, 
    0x91e1bfa5, 0xc51966e3, 0x950ac62c, 0xbd75bb08, 0x0dbdf9af, 0x86e113cd, 0x90e9aeb7, 0x345959df, 0xd8eed2d6, 0x9c6b7cfe, 0x41820731, 0xff5e0dea, 
    0xe2338500, 0xb706fa5f, 0xffc304fe, 0xd957c500, 0x063e0c5f, 0x1b780b8f, 0x75f5d24c, 0x20d4b9b4, 0x6dd97cf3, 0x6dcb97e7, 0x640cbbd2, 0x4107622f, 
    0x2afc4f5d, 0x7dfe37dd, 0xbf00ff63, 0x768d7fd2, 0xb708194b, 0x47716c1b, 0x6f932603, 0x9c8ffbfa, 0xa43e5a59, 0x585fe973, 0xf895dbd8, 0xf846a467, 
    0x7ffa9d38, 0xc97c25bd, 0x82dba83a, 0xa03b7d4d, 0x859ff649, 0xc1ad34da, 0xd3e9a469, 0x075fcbef, 0xf463e98a, 0xfd5a7a4a, 0xf9cc00ff, 0x3697480f, 
    0x9fef8fed, 0xefe92be4, 0xea5a5801, 0x05f4061f, 0x264a8b78, 0x108b9995, 0xf465ef0f, 0x82fef235, 0xcdecec87, 0x907f0ec0, 0x643fa3af, 0x5fc21a1d, 
    0xcd8d9a88, 0x1bc5d2e4, 0xc98032e9, 0x3d74be8e, 0x740d7db0, 0xcde562e2, 0x5c526514, 0x7bedd4b4, 0x0a1e983b, 0xd14c83b8, 0x6364e5ed, 0xe4d55576, 
    0xc91b415e, 0xedb04fe8, 0x331e5c5d, 0x7bb64687, 0xf267d699, 0xa259fedb, 0xdc818393, 0xedf15a8f, 0x2f3ac65b, 0x7d9fc783, 0x988d607a, 0x77a21944, 
    0xe5e38ce4, 0xf91ad853, 0x319ec5d7, 0x6a26fed4, 0x6f49db11, 0x8448ba6d, 0x9c825b40, 0x4cfc2f29, 0xccb2ea6b, 0xe5d4ae03, 0x8167fef0, 0xd2e9e399, 
    0x5fcbbb5c, 0xbb26f791, 0xdee84dfb, 0xb8b6b60a, 0x25d5b7bd, 0x02a49189, 0xc24908de, 0x1e574f00, 0x17fcdeb5, 0xc707d9f8, 0x68787649, 0xb6b9585e, 
    0x9c3aeb92, 0x92d8a031, 0x0bf9c808, 0xfa81b9f3, 0x175fed77, 0x05f800fc, 0xc5538de2, 0xd6dd3d7a, 0x647a2497, 0x9952b617, 0x3e83bae3, 0xd8929957, 
    0x19dd4fdc, 0x5fed33c6, 0x851f1ea3, 0xb4288bb4, 0xff793c0d, 0xf80c6400, 0x9be1ef97, 0x75e0c971, 0xe2edd57e, 0x15a1d069, 0x337f4f2a, 0xd56ad5e4, 
    0xb7975cdb, 0x69dbd591, 0x0167bec0, 0x82b011d8, 0x15e73f78, 0xc51fe253, 0xdfe0173d, 0x7d352d85, 0xeef6d67a, 0x68a16bce, 0x3ba2a789, 0x04776587, 
    0xc21875ee, 0x8ae37e37, 0xa0c3f8c7, 0xa8c27fde, 0xf0969cf1, 0x891e8df9, 0xae33df7a, 0x3b3ed43f, 0x13c257fb, 0x21bed07e, 0x83f025f8, 0x6cd0b943, 
    0x74bdcbf4, 0xf6acbddd, 0x3c528cba, 0xd2341369, 0x4e24056e, 0x47fca972, 0x8fd3e3a9, 0x6aaad99d, 0xe1cc5df2, 0x4ab55385, 0xfded0bbf, 0x00ff766e, 
    0x59ed7fb6, 0xabf07361, 0x7e55f85d, 0xb6faa49a, 0xecad05bb, 0x02b42d33, 0xd12e51d5, 0x381ceef0, 0xd1ede83f, 0x93e7554f, 0x8efd3f8f, 0x952d11be, 
    0xeaaca3b6, 0xb7706d49, 0x65776109, 0xe8264de5, 0x61fe91b8, 0xfaca3380, 0xb77c0d8e, 0x4f032fe0, 0xcb9e78ae, 0xc971d6c3, 0xf8debc31, 0x2b5f11f3, 
    0x38c1311b, 0x5fef8403, 0xb40c5fa6, 0x81c7f0e4, 0x72360df4, 0x9d06cdd1, 0xc4ca6e6b, 0x05910c31, 0xe78a2323, 0x54f6d4c4, 0x9d7a9abd, 0xda6b4a98, 
    0x1b59893a, 0xb0a3fce5, 0x791e0570, 0xa03b35f5, 0x83bc2c76, 0xafca93de, 0xfdf6cc0e, 0xb2f4f1a1, 0x1f20338e, 0x78515f53, 0xc1c7c529, 0x824106ed, 
    0x1c7969a6, 0xd7b2f58f, 0x2edeb7c4, 0x9a6fb353, 0xbf28e73a, 0xfc685fe3, 0xfc5e9422, 0x1cc3f003, 0x494e3396, 0x79cb7f3c, 0xea187985, 0x68139c6e, 
    0x55155afa, 0x2b1f2b49, 0x5af14a68, 0x87b43039, 0xd771f979, 0xa4995e81, 0x2b7cd286, 0x78daa965, 0xf672f89c, 0x219d6867, 0x2e90c99b, 0x0e49f9e6, 
    0x386807a7, 0xa13357fa, 0xe16945d9, 0x85abbb7b, 0x619370df, 0x1de0095d, 0x77e01883, 0x3c1ee735, 0xb7b6acf1, 0xf2485b12, 0x4a91341b, 0x0cb9a846, 
    0x5ecf3953, 0xfa7abfe7, 0x53490efc, 0xa988151b, 0xcc9d4fa4, 0x63e178b3, 0xb37b7af5, 0xd2aef89e, 0x6bd482f8, 0x9dbede52, 0x8a707367, 0xc7c46e96, 
    0xe0152a1b, 0xa49d0ce4, 0x4f4d1df4, 0x6de10ff0, 0xbe8d00ff, 0x05bae827, 0x746fda8f, 0x9339b3fb, 0x69b4b75d, 0x8175b6e2, 0x3838cbdf, 0x6ebcdac9, 
    0x1e07eb1f, 0xa1b6dab9, 0xc12ff167, 0x993e3ad6, 0xc15c9014, 0xbb66ba39, 0xdea850f9, 0x1c4b05b8, 0x5a6fc7e5, 0x7e828ff7, 0x673fd236, 0x034f2aad, 
    0x3e746d49, 0x6f37ea27, 0xcd5a69aa, 0xdbd81288, 0x1dd598db, 0x7c18f324, 0x1fb860e5, 0xe97c98ea, 0xfc7df7cf, 0x089d226e, 0x1e654bb5, 0x3af9489e, 
    0x2a626a14, 0x25e77dae, 0x70cf76bf, 0x978fdff1, 0x748727e0, 0x1e680e2f, 0xd6331e17, 0x4f1bad2f, 0xbc356d92, 0xe1698b9b, 0x91598d44, 0xb3b79123, 
    0x82044848, 0x7a92110a, 0xf8237c6e, 0x3a6aaab1, 0x9eeb1074, 0x35d1bc1e, 0xb8468ab5, 0x5b67424d, 0x94cf3c90, 0xe5567438, 0xd89e914a, 0x2bf8a6f6, 
    0x35f1b14b, 0xa7ee1ac4, 0x22d6b901, 0xd37eaf78, 0xd8efa7b8, 0xa4da67ef, 0x8c332c2f, 0x78aada63, 0x5f5b51d7, 0xa8df5f18, 0x44287761, 0x8d1c0079, 
    0xf0a7db8b, 0x2ebeca8f, 0x9bb421a6, 0x6cb8e867, 0xbaea34ba, 0x7f5bd552, 0x687feab8, 0x7864da3f, 0x1637c20f, 0xbf86377a, 0xd5b23de1, 0xbf216fac, 
    0xddbeb0b9, 0x8c189b1e, 0x8eedf20d, 0x8e84b541, 0x11a3627e, 0x7e9c27b7, 0xc5e77864, 0x3c107ff7, 0xb6d67a4f, 0xade95953, 0xa1ac58b2, 0x650ccb90, 
    0x00955451, 0x722cc901, 0xa15f7307, 0x277c1a5f, 0xc247f8a5, 0x75faf617, 0xf5acd9af, 0xefa81b0b, 0x993b1263, 0x658c4750, 0x6e872389, 0x87af7584, 
    0x24e13d3c, 0xa8757cd4, 0x1d0be9d9, 0xc176a4ad, 0x8e9d39d2, 0xcff3ee07, 0xad27a927, 0x6ae7147b, 0xb5548ff2, 0xc49c0ffc, 0x6500ff50, 0x327c4885, 
    0xe8d2f377, 0xbc95fddc, 0x1fe2730b, 0x263ee91f, 0x96762cdd, 0x3a5b5c73, 0xcfe305f9, 0xe7ab9bd9, 0xe360fd03, 0xf7b59e1e, 0x6f45523c, 0x9198d16a, 
    0x73d5a68a, 0xa20e8c81, 0x8dfd7abe, 0xa6793dbc, 0xe5d4337c, 0x651796b8, 0x423925d6, 0x1e20187a, 0x9ec9bd82, 0xd2d2b95b, 0xcd340b26, 0xf93023e5, 
    0x4f801343, 0xd8794db6, 0xbe6afb99, 0x542a43ef, 0x31693ad5, 0x1f329b25, 0x5f7999f8, 0xc79879ec, 0x7ff34ceb, 0x00ff2dea, 0x2afb3f91, 0xfc0b0ff5, 
    0xd0a5d12c, 0xb2599bad, 0xee48bd4b, 0x798a66f3, 0x3be65b15, 0xee030170, 0x5aed74e0, 0x3caaf0bf, 0x4000ff25, 0x8100ff93, 0xf100ff12, 0x7e7de775, 
    0xc2de7d94, 0xcacfe877, 0xae287539, 0xe5d3b5b1, 0xef6b70f4, 0x5f3a857f, 0xedc147f6, 0x79124e07, 0x3e2619e2, 0xcc6e5c68, 0x3e999ed2, 0xf3abbdbe, 
    0x2dc4d30e, 0xcec5fd0e, 0x7e45d171, 0xf238fca9, 0x8c8ee197, 0xf292a4ce, 0xaceb3f8e, 0xe5946694, 0xb94b4508, 0xe3d565ef, 0x96ae6d52, 0xbef1123e, 
    0x926f6fac, 0x8e0d983b, 0x5b9957e8, 0x794edca0, 0xf04de903, 0x3ced85cf, 0xba048b46, 0xaa1036bc, 0xa1ee0419, 0x6d6c8895, 0xefa987e5, 0x1ef19dda, 
    0x37863b5b, 0x12ee4453, 0x3fb85e14, 0xd5fbfb7c, 0x2f9d019f, 0x89e0d250, 0xaa0ca42d, 0x8f134bec, 0xf7da7fbe, 0x68f2d6af, 0x7972d84b, 0xf6f9917f, 
    0x4ef1346f, 0x6b53d75f, 0x0900ffc2, 0x4df84b17, 0x6bde5fa2, 0x59cad602, 0x672e8da4, 0x371bd9b7, 0x18ca2f99, 0x4ff909be, 0xb9d2c71e, 0x3e45f131, 
    0xf0767c30, 0x0bd6b6e6, 0x297b8ba3, 0x7193fc2c, 0x4ec26ee7, 0x5c6db7fb, 0x31c6ac7f, 0xd335afdb, 0xd7f868fc, 0x3cfcdea0, 0x781f7ed3, 0xb050d376, 
    0x5bbf4993, 0xd088f6c3, 0x5692b1c3, 0x31bb5821, 0x471e9c39, 0xf00a3caf, 0x7f5d055f, 0x6a90ea61, 0x1696954b, 0x48461970, 0x78e815ca, 0x8b135fef, 
    0x452a9c84, 0xf548d3ad, 0x0c21b570, 0x5274394d, 0xe867ee4f, 0xa36e81bf, 0xba1cc282, 0xf9e2f2ed, 0xeb74608b, 0x82f09f5a, 0x107fe3c3, 0xa5aa115d, 
    0x6e12949a, 0x8083c4f2, 0x3dbc8fab, 0x10fec96b, 0x517cc9f8, 0xe6492ca3, 0xb7b7a389, 0xa822d252, 0x7846cadc, 0x8fbda23e, 0xaf46fac3, 0x4bbf28a6, 
    0x542916a8, 0xbae500c6, 0x35fbaffb, 0xb92914f2, 0xbaa24249, 0x2715eb47, 0x4a690fcf, 0x1fe5b956, 0x3bc67fb6, 0x590a4f5b, 0x0c694be9, 0x6a59abcd, 
    0x7641a216, 0xc6311933, 0xe6b7dbb9, 0x3a32fdfb, 0xc47e8757, 0x30fe68e4, 0x944396ba, 0x0bc84c3a, 0x683fa37c, 0x2bfcf588, 0xfc2dfece, 0x7f141f4a, 
    0xc8199cb2, 0x7ed2bcd3, 0xdf271ad1, 0x3961d3d9, 0xb2eb9dfb, 0x9f6e9dfd, 0x2037bd4e, 0x95b337e2, 0xfe130000, 0x957e7db5, 0xca1e2af5, 0x9fd59216, 
    0xedafd498, 0xfb4538ab, 0x5ff86989, 0xd3d13ef1, 0xb300ffed, 0xdd21f9b4, 0xd97d6ee6, 0xc23f3dc6, 0x351168ac, 0x3bbc8cf7, 0xfe8a4180, 0x7fce001e, 
    0x52e1bf78, 0x5220c45c, 0x2b5eafa7, 0xa44df8a0, 0xaaf8aac7, 0x36415909, 0x37ecb6b7, 0x4fc61f31, 0x7700ff18, 0x523378bd, 0xb5d1e474, 0x998cb06a, 
    0x6d9c85f4, 0x292bb21d, 0x31826704, 0xd2e7a6de, 0x41189ab4, 0xad9f43c1, 0xf70f9527, 0x705ce70f, 0x991415a7, 0x49f3c9e2, 0xf83f7eb4, 0xf876f643, 
    0xed73f179, 0xeb8af07f, 0xfdabde9a, 0x3fedb39f, 0xf9e5433a, 0xac7fb69b, 0x8d9d7385, 0xed393dd3, 0x007c4c5f, 0x17f167d4, 0x4be1efec, 0xe51591f9, 
    0x2e22e796, 0xd7998b17, 0x7cb527b9, 0x7804fb93, 0xff3fbcb9, 0xdad70900, 0x779e8c6e, 0xb7f936d8, 0xb48f311b, 0xa8cf1967, 0x657fadaf, 0xff2c398b, 
    0x078f6600, 0xd2aecada, 0xef64f746, 0x73370f52, 0x5feb879e, 0x8c51c443, 0x7b6bc228, 0x90a587fe, 0xd34a9555, 0x48a235a5, 0xd7453bf8, 0xa59ef160, 
    0x0192940d, 0x6152b91c, 0x52e5a752, 0x4a9fc5df, 0x23beadef, 0xb0133eea, 0x541ac38b, 0xd811b736, 0x23dce092, 0xb9c43019, 0xf2a00cc9, 0xcf7885fd, 
    0x4813ee84, 0x1df52dd6, 0xb08418cb, 0x6e763efb, 0xfe9c91ca, 0x4fab9d3e, 0xaf06d555, 0xc75d5cad, 0x405a2c7a, 0x38b92cbc, 0x9133060a, 0xccfb9ae9, 
    0x6a42573d, 0xa891cfdd, 0xa5a796b9, 0x91b66d7c, 0xf4d565ae, 0x775cfb65, 0x6918c713, 0x1181144e, 0xf5b48307, 0xf891575c, 0x6bb2c353, 0x7116ac5a, 
    0x169234a3, 0x3c28abc2, 0x1d4f3d29, 0x2c7ed9ab, 0x17bab66b, 0xe234ec81, 0x0d7bcb90, 0xc2c5dee8, 0x1b5941c8, 0xe4408291, 0xfcca957e, 0x3ee1d214, 
    0x0df1b127, 0x6970cccd, 0x144b9236, 0x80004ad2, 0xb9818831, 0x5d0edac9, 0xebf13d78, 0xe3726e5e, 0xb5a4a442, 0x0f3d7e6d, 0xeba42b53, 0xdee810ca, 
    0xa14f9dbe, 0xb6d80dbe, 0xb21d6397, 0xed185e02, 0x073194a3, 0x6f475069, 0xf894bec6, 0x171c7775, 0x886da625, 0x04086061, 0x8c57bcf3, 0x824943f8, 
    0x2d2fae18, 0x2e688ea6, 0xc41b4d82, 0x925369a3, 0x4670900a, 0xa057040f, 0x36506bf8, 0x843c69e7, 0xf1c76e3c, 0xc472e657, 0x3fdb683f, 0xd80e9e5d, 
    0xdec40e65, 0xfc82fd31, 0x0defe30b, 0x6ada73ea, 0x5d9b23be, 0x7d266dd3, 0xab3bda2e, 0x867b8e74, 0x2d245142, 0x83e84207, 0xf2042fef, 0xfe988f3a, 
    0xf3367818, 0x351b1fc0, 0xda8700ff, 0xab670dc4, 0x9d6f1a69, 0x2491b135, 0x120cf374, 0x43095d2e, 0x074f9995, 0xfa35a8bf, 0x5efbf037, 0x146e2e49, 
    0x8778b980, 0xabe57532, 0x3ca2fd87, 0x094fe117, 0x3c87f817, 0xb18e353a, 0x63455dab, 0xf196fc35, 0x88227143, 0x0fae154e, 0x2f10e3cc, 0x3fba7fca, 
    0x1a535fbb, 0x3907ad8e, 0x3dcd8f6e, 0x39e2c39a, 0xe2f9dc52, 0xe1450c4f, 0x66d68cf8, 0x554e6659, 0xcf416065, 0xab1da007, 0xeb653fdf, 0xfe68a2c3, 
    0x3c35d534, 0x05435a5b, 0x01b2ccbd, 0xce2a6abb, 0x4e3270cc, 0x78cd6107, 0xf489cf1d, 0xb465767d, 0x6e2cd7b0, 0x241fe4ae, 0x2349d716, 0x503839b6, 
    0x7f023cd9, 0x16dff70a, 0xf046f3f8, 0x3479c01f, 0x74ac2cf9, 0xc35ffdab, 0x69274052, 0x995bde92, 0xd8ddae05, 0x64b60bda, 0xde7252cf, 0xca98f3f5, 
    0x3b9494bc, 0xe89900ff, 0x49bb0e42, 0xf81fcf2d, 0xf865fbc9, 0x91f846cb, 0x33f8d9ab, 0x6f75d04c, 0xfde4470d, 0xdef6f292, 0xc24c9675, 0x3203f785, 
    0x7ce07274, 0xf53a80a3, 0x36fc5f3c, 0xafc500ff, 0x2ffc16fa, 0x667e00ff, 0x9ae400ff, 0x31e253f2, 0xf16276fc, 0x92cfcebb, 0xd30f8edf, 0x00ffa4f0, 
    0xe83f9184, 0xff9fbf12, 0x425b6300, 0xe255799c, 0xa4547f7a, 0xe067b9b4, 0x03edc3d7, 0xfbd8fe40, 0xe6918705, 0x00ff3bf9, 0x1b67237d, 0xa98fd5f1, 
    0x14feaeaf, 0x7ca6c158, 0x6dadd132, 0x3682cb93, 0x9c646a9b, 0xe4096966, 0xf99ad4f3, 0xfc97e19b, 0x97edbfc4, 0x505fcffe, 0x00ff367c, 0x7da57b92, 
    0xd100ff65, 0xeed95daf, 0xb95f78b8, 0xd80ae5e5, 0xff7689da, 0x36f22300, 0xd91e993b, 0x1c58b6dc, 0x5ded8103, 0xdaa58d4e, 0xf7f6e8dd, 0x67bec532, 
    0x11b7192c, 0x011d319c, 0xc3c815f6, 0x521e00ff, 0x15febd7f, 0xfe7778dc, 0xab4fcb45, 0x5f4de87f, 0xe233be7c, 0xf80dad5e, 0x6a5eacb1, 0xe6e2e256, 
    0xb867326f, 0x0cb4cd4d, 0x000732e2, 0xaff40a7a, 0xa3457a87, 0xc2d382f8, 0x3d7c162d, 0xcd3dcf7e, 0xc7fbe39e, 0x7e079611, 0x4e638e77, 0x738f0301, 
    0x2ff1515e, 0xffd141fe, 0xffc2d700, 0x5e0de800, 0xfee7f0c7, 0xff89ae4a, 0xffe55c00, 0x5752d100, 0x4aba67ce, 0x38eb335f, 0x2ef17e7d, 0xf5997cfa, 
    0xfb748727, 0xb34c2b7d, 0xca8fb5b2, 0xe11882b5, 0xb5933c8e, 0x27034015, 0x5aefc093, 0xe1e2feb1, 0xe3943f9a, 0x4b95be1e, 0x5700ff4d, 0xeb6ad117, 
    0xa56fae7f, 0xde266f7e, 0x627feba7, 0x0e78afc7, 0x0ed465f6, 0x76b1ac1f, 0xfda6a61e, 0x3f7bf4ab, 0xd1207c13, 0x7e28f5ad, 0x09eb0ad3, 0x30c55d20, 
    0x39c029c2, 0x54133b52, 0x00ff0bbc, 0x6bfb0f21, 0xb335f317, 0x00ff48fb, 0x3fd22ac9, 0xfa9f28ec, 0x4cfb7a2e, 0x2ba5deb3, 0x7166989f, 0x5d9aac51, 
    0x217ce457, 0xf6c373f0, 0xf079fc10, 0xb641bacd, 0x65768a17, 0x229fdcde, 0x15f6f96e, 0x7ed47ed4, 0x0db5d52d, 0x457ac27b, 0xa799dfc5, 0xdadcdc5a, 
    0x83960f43, 0x5de15b6c, 0x802703b9, 0x64cd4906, 0x00ff217c, 0xb7f08293, 0xff9f70fd, 0x494f4400, 0x00ff4bfb, 0xefe1f3c8, 0xff5c09fb, 0xabd8e800, 
    0xc593aacc, 0x6f694dd2, 0x261a2af3, 0xe226cefc, 0xa299b514, 0x7a8d6d88, 0xa2dee70c, 0xa1c66adc, 0x921f00ff, 0x55c81f7e, 0xc218fa6a, 0x36195a36, 
    0xd9ff7fee, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(PixeLateEffectNode, "PixeLate", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Stylization")