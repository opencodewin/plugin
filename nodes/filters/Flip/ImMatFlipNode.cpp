#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Flip_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct FlipNode final : Node
{
    BP_NODE_WITH_NAME(FlipNode, "Flip", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Flip")
    FlipNode(BP* blueprint): Node(blueprint) { m_Name = "Flip"; m_HasCustomLayout = true; m_Skippable = true; }

    ~FlipNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Flip_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            if (!m_bx && !m_by)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->flip(mat_in, im_RGB, m_bx, m_by);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        bool changed = false;
        bool _bx = m_bx;
        bool _by = m_by;
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::TextUnformatted("X Flip");ImGui::SameLine();
        ImGui::ToggleButton("##xflip##Flip",&_bx);
        ImGui::TextUnformatted("Y Flip");ImGui::SameLine();
        ImGui::ToggleButton("##yflip##Flip",&_by);
        ImGui::PopItemWidth();
        if (_bx != m_bx) { m_bx = _bx; changed = true; }
        if (_by != m_by) { m_by = _by; changed = true; }
        ImGui::EndDisabled();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("bx"))
        {
            auto& val = value["bx"];
            if (val.is_boolean()) 
                m_bx = val.get<imgui_json::boolean>();
        }
        if (value.contains("by"))
        {
            auto& val = value["by"];
            if (val.is_boolean()) 
                m_by = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["bx"] = imgui_json::boolean(m_bx);
        value["by"] = imgui_json::boolean(m_by);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uea37"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Flip_vulkan * m_filter {nullptr};
    bool m_bx {false};
    bool m_by {false};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5805;
    const unsigned int logo_data[5808/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf9003f00, 0xc7dfe0ef, 0xa36bf5c9, 0xeac2f8a2, 0xdca5ef69, 
    0xa6cc6af0, 0x92819447, 0x38c981b2, 0x5ee7371c, 0x92e9a5e1, 0x7ac483f8, 0xf90b874e, 0x9177ea33, 0x909dac58, 0x1f03e1c8, 0x4cf035a1, 0x6e5617b6, 
    0xb37677d6, 0x878dc85b, 0xba8a7882, 0xa7acea30, 0xb5e30ea3, 0x00ffe37d, 0xf1f8f304, 0x4523cde1, 0xe29d7ef1, 0xfc58cb6b, 0xc5ba0d6f, 0x37ea5ea1, 
    0x43b92111, 0x76a0909d, 0xa1f9f20c, 0x4612b431, 0xf173d4d1, 0xa61afcb8, 0x4e6b6a9d, 0x367cfba8, 0x654f3e69, 0xbe6c7935, 0xfea8cf7d, 0x68da5c25, 
    0x079ee911, 0xa5c594d1, 0x47a450e8, 0x1d935777, 0xa67e7dfd, 0xe32d28b9, 0x4db2f974, 0xb869df72, 0x9527c97b, 0x62a449da, 0x31abc7ec, 0xa6ac2639, 
    0xb638afba, 0x2b6b9fde, 0x1b56cbbb, 0x5ac7f580, 0x771ee5f8, 0x3014f6a9, 0xa692c6de, 0xe1d4a7bf, 0xbdde277e, 0x2c2d8ae7, 0x57788bf3, 0x714e7d21, 
    0x871caf9a, 0x0c3a50e5, 0x0bc46f56, 0xb878b09f, 0xb07c462e, 0xf8b66b72, 0x59ebf063, 0xb27091f8, 0xa7756bc7, 0xc33c5b68, 0xe66c4bac, 0x91768619, 
    0xb063e30b, 0x623ccf39, 0x95d198bd, 0x0e4da176, 0x2061a955, 0x467656ea, 0x71acb324, 0xfee4c129, 0x89deb094, 0x7125553e, 0xafd0d7fa, 0x7ec3aff0, 
    0xb36fb418, 0xb2ddf169, 0x7edfd3f2, 0x52b79bf9, 0xe3190730, 0xf88fd7d4, 0x6af0e9c0, 0x636f4b37, 0xc0ac2a04, 0x07d5c688, 0x953e469e, 0x50b62cd1, 
    0xb0f348d5, 0x442ccdf9, 0xbb1d84da, 0x0db3e49c, 0x58013c98, 0x4ba2fc3a, 0x2a700739, 0x528cf6e7, 0xf3698738, 0x90201676, 0x7f3ac641, 0x35b2c23f, 
    0xeeb6adab, 0xed950336, 0x0e4e5b5e, 0x19a7d0c7, 0xce6c99c3, 0xad90520f, 0x7f8e65bc, 0xebfcb97a, 0x5e290dec, 0x8cb340fb, 0xa4427263, 0x30bec21f, 
    0x381a6fd7, 0x69a350a1, 0x00ff3b99, 0x0feb2bb4, 0x78d26a13, 0xd5b9e173, 0xb665f26d, 0x1d0049b7, 0x38563af0, 0xea45aedb, 0x958ad371, 0x64096eec, 
    0x1eb7375e, 0x9f74bef4, 0xa4ce6fdf, 0x65a9cef0, 0xcb0adde2, 0x10e28655, 0x208611b7, 0x710fb63a, 0xb03fadc1, 0x3f00ff41, 0xbc627e11, 0x9a9d36f7, 
    0xcc47962f, 0xec9fb45f, 0x0900fffb, 0x34d4a8dd, 0x416b9018, 0x1772e697, 0x08900bed, 0xe780d963, 0x7cc5c03d, 0xd63c653f, 0xda5e7017, 0xda5ed0c8, 
    0xb216b7c8, 0x2245c3a8, 0x421fa99c, 0xd6aff601, 0x932e213f, 0x7d74e364, 0xaf390e70, 0x8fda7fcf, 0x71f830e1, 0xd8a893e3, 0xeaa4c522, 0x86c4d28e, 
    0xa31ced52, 0x19394506, 0xc99163c1, 0xaf74d4eb, 0xbd55f0d2, 0xba9c7da4, 0x8b757e6c, 0xd8fbc9a1, 0xbeb3cf7c, 0xff6b5c07, 0x127e1c00, 0x378de341, 
    0x18519a42, 0x42b40b92, 0x40d43d14, 0x7eb2586f, 0xf7c84960, 0xc32bea38, 0xa7f8083e, 0xed6ff154, 0x8d3be235, 0x48f3c656, 0x67233d9e, 0x6dfc5df6, 
    0xf601b014, 0x72233772, 0xe370bb33, 0xfa5a0fa3, 0xbf09fe5f, 0x5f4d2ff1, 0x536960d9, 0x5a77244b, 0x6975bb2e, 0x36121120, 0x2055b6cf, 0xb31d9ef3, 
    0x9fe963dc, 0x00ffd760, 0x6a058f67, 0xf1bd3bbe, 0xd96b1ab4, 0xd9eec2f8, 0xa3d4e66c, 0x858794ba, 0x5b9efc76, 0x453e4016, 0xeb782ee4, 0xcad438d7, 
    0x37a7d3e8, 0xa5355943, 0xcf521bfa, 0xd36a15b1, 0x27689558, 0x9ffabaad, 0xe063783c, 0xbe1d9f9c, 0xdd59de37, 0x858f35cf, 0xe7487bf4, 0x38202ed5, 
    0x44725692, 0x82232150, 0xd99358db, 0xf615f541, 0x8faeadc2, 0xf6e95aa6, 0x58a74511, 0x5bb0c459, 0xc736c4db, 0xaa306a14, 0xdf79a507, 0xc3970585, 
    0x86b147ab, 0xbdb9a1dd, 0x55ee9a65, 0x85f3c425, 0xf16458da, 0x0ac00080, 0xad663a30, 0xd6a5f8dd, 0x12772539, 0xf6912506, 0x5eedf674, 0x309c0e86, 
    0xf1a778b8, 0xccc9535b, 0x71ccd56b, 0x1e7e9452, 0x3fdeaf9f, 0x7feb36c6, 0xc9c2226d, 0x7eca7065, 0x4caefe61, 0x0e7800ff, 0x9f234f9d, 0x93f94aaf, 
    0x61cdd6c5, 0x6ad9ddac, 0x1d790b31, 0x1d84a4dc, 0x6e2421b3, 0x4eafdf53, 0xc57bbda3, 0xe51a88ef, 0x00985f08, 0xf9b85248, 0xae00ff87, 0x97c7c3bc, 
    0xd0486b10, 0x1634abdc, 0x82e366ec, 0x97e56d92, 0x72f01cd7, 0xc6cdab3d, 0xc77c5449, 0x74c295b9, 0xf0d82b5f, 0xd8dc72bd, 0xf0be4ace, 0x6f307aa7, 
    0x216b50eb, 0x78638d86, 0xb07764e3, 0x95e989b4, 0xa03e8c72, 0xcf2aeaaf, 0xd3662d8c, 0x32f2ecd7, 0xc3edce96, 0xb59ec090, 0x0edde2a7, 0x07e11f7d, 
    0x2ab96686, 0xc2dcdf4a, 0xd94e4ebb, 0xaa1f6415, 0xf9f2cf1f, 0x23298d9a, 0x497093ed, 0x311e7a74, 0x18a2caaf, 0x20b31e43, 0x2bcca7cf, 0xad886fea, 
    0xe3dce0b3, 0x7f2e5ab3, 0x5e63f92a, 0x722b9644, 0x4fb6fc47, 0xd65708fd, 0x51ed129f, 0x3abe0f3e, 0xcf33997d, 0x5c5caeb0, 0xe7efee97, 0x979e0efa, 
    0x2b9fbbfe, 0xd7351e69, 0x2c6637fc, 0x6ff3cbf4, 0x3fe2926b, 0x00ff7a42, 0x00ffbd2a, 0xffc5530b, 0x3f16f400, 0x36346795, 0x714e65fc, 0xab3c69ea, 
    0xcc1fee6f, 0x268d7bd7, 0x7373e2ee, 0x478a8e54, 0x736e31d9, 0xf8986b9e, 0xf175e0bf, 0x8bb58097, 0xee39222f, 0x237fce1e, 0x29471ccc, 0xf01fd589, 
    0x3a0c5d2d, 0x034aacb5, 0xa3e8dd31, 0x93e77935, 0x139ab251, 0xe8049517, 0xe7666763, 0xf8f16004, 0x7b19a5d7, 0x3eb4a436, 0xe5ba525a, 0xc02fe767, 
    0xf08d8b3f, 0xd57ac477, 0x63b7a8b6, 0x51bcfac3, 0x623f6adb, 0x6f369762, 0x983be61b, 0x643cf187, 0x657828b8, 0x57641c66, 0x6fc397e8, 0x869ffa8e, 
    0x7d6327fc, 0x8f873d79, 0x45c2063c, 0x9d1ef1b5, 0x73a66e98, 0x6d4c6523, 0x485c2185, 0x3d008ebd, 0xfdf3fcb9, 0x7c0cbca4, 0x7766f111, 0x51cfe211, 
    0xe885721e, 0x1f643b1b, 0xe807d0f7, 0x2fe193d5, 0x0d1feb1d, 0x3daf2dfc, 0xa7ebc4bd, 0xd88254b8, 0xb825c2c8, 0x054b4032, 0xd5f201ce, 0x4d9e7186, 
    0xa44e127d, 0xcb2e52a3, 0xc5e1a1af, 0xa6d43c46, 0xdc27bfae, 0x3cd07efd, 0x1defe169, 0x69ab4be8, 0x9aeab117, 0x64a1c44c, 0xe1c02ac8, 0xacf29491, 
    0x7c45103a, 0x6845fbfd, 0x267c12bf, 0xc337f123, 0xb46ef8db, 0xf61d3178, 0xb9027393, 0x88cc490a, 0x60c07cdc, 0x1807a663, 0xf8781f3c, 0x6f2be031, 
    0xf0147c09, 0x69d88cb5, 0x9926c5de, 0xe3c8cbf8, 0xa9233173, 0xda58ebc9, 0x5d5af49d, 0xf3f7d6cc, 0xc14cba46, 0x809877e2, 0x988fa78c, 0x6b9c95fe, 
    0x968b3246, 0x5a0b6bcc, 0xf6a4d13c, 0x3fd50a3e, 0xfb77ed69, 0xb8b86615, 0x391a7861, 0xc09468e4, 0x740846fe, 0x82043955, 0x244092c0, 0xf41a3c74, 
    0x687c021f, 0xa4737cd3, 0x98a8935a, 0x2d5c086f, 0xb7631ec1, 0x49ec4001, 0xacf6faed, 0xf67fda5f, 0x2bc69267, 0x0f69171f, 0x22226d70, 0x2e4e4b6d, 
    0x98d91ace, 0x27c064b1, 0x77001620, 0x7cc5751c, 0xc9ac73bb, 0xf136eba1, 0x8c2d8d69, 0x91596b3f, 0x577248dd, 0x19a95401, 0xc9741c18, 0x22d65edb, 
    0x09191b8e, 0x16d62a46, 0x095b191f, 0x996aea24, 0x82fcadf6, 0x2b1358f6, 0xe6d189e5, 0xfbe5d789, 0x8f1fe7c3, 0xae39db51, 0x9b90f6ab, 0x8fe133fb, 
    0x6259f481, 0x9b3bb548, 0xe30975a9, 0x88887c4c, 0xc48e0763, 0x93ef3fc8, 0xf00b5ee9, 0xbe64e2a7, 0xde16d33e, 0xddfab670, 0xcf4522b4, 0x58ecb8dd, 
    0x23fbcf76, 0x2fbddad7, 0x3cbafee2, 0x7559e273, 0x9fae027e, 0xa08c6a6d, 0x621a2dec, 0xc980be4d, 0xc738bfbe, 0xba42a561, 0xc7b656e7, 0xacebe1df, 
    0xbbe96054, 0xa1bb7fc7, 0x71cb5ae2, 0x71ebb96c, 0xc700ff18, 0xf18b7d85, 0x2b7c5025, 0xbe304890, 0x2a00ff42, 0x5b00fff8, 0xe7b11680, 0xff31e91f, 
    0xbe62e800, 0x4ccaf8b8, 0x6ee6077f, 0xfa41b89f, 0x7171f30a, 0xfdf3a777, 0xa534e80e, 0x4b5a3ef3, 0x1d1bea1d, 0xded9df69, 0x71de6ed5, 0x2a6ea7e4, 
    0x510fb44f, 0xada057f9, 0xdd140763, 0xffd5f4d9, 0x7f758700, 0x00ff4705, 0xd6000b13, 0x1fd4059d, 0xf664fb3a, 0x06b15a3f, 0x4a8924a2, 0xfa7a0f9c, 
    0xc5f05b47, 0x49b1d5b5, 0x88bb622d, 0x88259891, 0x02dca748, 0x672de62b, 0x1ec3974a, 0x9dd2be20, 0xcc1792dd, 0xa305274f, 0xbe5eaf3c, 0xe3adf699, 
    0x8593d75d, 0xe2236945, 0x5732cae8, 0x00ffcf47, 0x0684afb6, 0x4fdbe0a5, 0x994f4210, 0x302e3065, 0x236c2330, 0x1082d773, 0x7abe26fe, 0x2e49f4d4, 
    0x7dcb663f, 0x9bb78265, 0xb32d5fe2, 0x1fc36eed, 0xb9af014e, 0x5af825fe, 0x3b7c1c0f, 0xa389b4d6, 0x9cad1912, 0x86b8db21, 0xb91e18c7, 0xf215fe00, 
    0x2d6aa52e, 0x6f6500ff, 0x4653e90c, 0x352fef6d, 0x9868bfa7, 0x681fc061, 0x719eee8b, 0x7bcdb1fb, 0xbbdf4ab8, 0xab0c7d70, 0x97e2fdd3, 0xfb677d74, 
    0xc68ff820, 0x26bad7b7, 0x57347197, 0xb4be1dbe, 0x7186bd76, 0xdca7cd32, 0x6e11f880, 0x02569e62, 0xf59c04f4, 0xd751c518, 0xf8a83dfc, 0xbac600ff, 
    0xa53eb59e, 0x2c6c58f6, 0x39ce8a27, 0x36e29221, 0x7c11c1b8, 0x3917e5a0, 0x073dc3dc, 0x657fea4a, 0xd2e9130f, 0x6e2d52f8, 0x1d88b636, 0x07f75922, 
    0x58c4a150, 0x6cb82323, 0xf8a246fe, 0x2d43ae65, 0x45dea8f4, 0x9ca54cd4, 0xcfb90ea9, 0xc67f7d42, 0xa395fabc, 0xfaae4b1e, 0x0b43611f, 0x7d535575, 
    0x76eb6723, 0x5e84dfcc, 0x8717f128, 0x3eecae6c, 0xd099ad23, 0x5bca176f, 0xf3a478ab, 0x3e0a892d, 0xf2302361, 0xc1000646, 0x7cc5b15c, 0x7c59fb6f, 
    0x7e0f1f38, 0xcbe2bd27, 0xf586c73d, 0xb4d424a9, 0x2adcd8bb, 0xd2fc99ed, 0xf391b731, 0xe563a082, 0xf6b59ee3, 0x4e7dc5cf, 0xe33dbd0b, 0xa238da8e, 
    0x5514d868, 0xe76b3d18, 0x9f06f104, 0x5ec297f1, 0xe277f834, 0x2cfe6861, 0x374febf0, 0x4aaf6f85, 0x4911b7f9, 0xd16c881b, 0x1cefcc4f, 0x50183186, 
    0x8e0bd64e, 0x0ecc1e14, 0x1857fb29, 0x0f4f6ded, 0x46e3cb39, 0xdf2d2a9c, 0x1dcfbde7, 0x59de53f0, 0xc4db5ef8, 0xcdb6ccf6, 0x708b7965, 0x2e6f1592, 
    0x1c49be3c, 0x7a90b883, 0xcfeb9303, 0xf136fcb5, 0xe0758bd6, 0x88d7f087, 0xac0e1a04, 0x69a9cdd0, 0xc1dc3f06, 0x82e5d27e, 0xa3bc61b3, 0xbe2181b9, 
    0x8c1b0ef6, 0x9af887d7, 0xdbc30f48, 0x495ea133, 0x2e5024a6, 0x4fa3739d, 0x846e4eb4, 0x1cb0bc8d, 0x3cc965ee, 0x8131c603, 0x88455a5b, 0x860ff0ba, 
    0x8d4c6fef, 0x962f6f34, 0x3025aef3, 0x4e625c29, 0x47dc40bb, 0xaff68c51, 0x861696b2, 0x49424d71, 0xa7bf15a7, 0x69e403fc, 0x93e5ab62, 0xe8a125bc, 
    0x7b97be1a, 0x9617b200, 0xdd3a69ed, 0xb814ad46, 0x3cc73bc8, 0xc8380812, 0x6b30f220, 0x12da5fea, 0x10fca673, 0x88b7739e, 0x4e373f23, 0x345fe3df, 
    0x57a7ea5f, 0x66f934d1, 0xa06e499a, 0x79d852d4, 0xacba3384, 0x7db3148a, 0xf99e76e2, 0x7fd0d7fa, 0xb1c475b5, 0xe597cf7e, 0x18929d15, 0x7132aaf0, 
    0xf3cbaf95, 0xd8b02c1c, 0xf66ed0b8, 0x74e9c76e, 0x18b50a31, 0x43bfeed7, 0xd36bdbe6, 0x00ff082c, 0xad67e4bb, 0xeb93f64b, 0x775ee71f, 0xcd376aa6, 
    0x0c171965, 0x678c0301, 0x7dfb5ab5, 0xb7fcfcf7, 0x57bf5de5, 0xad7fce7d, 0xaafdccae, 0xfdc12531, 0x6caf0cdb, 0xfd66be62, 0xa4e134a2, 0x604ef3f8, 
    0x79361740, 0xbe76f21c, 0xff79ad3f, 0xfbfdec00, 0xea5c5d7d, 0x15dfe892, 0xb6f4d3e3, 0x5fd75ad8, 0xda8a56b5, 0x22db096e, 0xc7b37c92, 0x8e273807, 
    0xb67fe8b5, 0xa16fad76, 0x56dde0cb, 0xe6e57d65, 0x5b886db5, 0xb71fe572, 0xd2cab57e, 0x45fb8858, 0x3e36fd6d, 0x87a9103e, 0x1de74a76, 0x7ac41868, 
    0xd6d3cb90, 0xa0fd3fbe, 0x8b1fdbfc, 0x0b3c1a56, 0x4adbceb2, 0xb0d54846, 0xb1928ca1, 0x7f04fee3, 0x4e2ffa3a, 0xaaeef5f1, 0xb7f4d201, 0xba258ed9, 
    0xebf2573b, 0x6ffc3e5f, 0x94e28357, 0x8e909a17, 0xd474c92b, 0x40f7abdc, 0x3f63e0de, 0x41a3d7ee, 0x9f7e5472, 0xd2fb77e4, 0xc9e89ba6, 0x4f6200ff, 
    0x4ff8d28b, 0xccf0ba5f, 0xb2c40d8b, 0xb7b1ba6e, 0x7e2362bb, 0x803c9208, 0x730c987d, 0x3ca6af86, 0xbbdbe241, 0xe9e0667d, 0x9e985efa, 0x67a90073, 
    0x006af93b, 0x60504ec6, 0x73bed2f1, 0x627f9cfd, 0x345e885f, 0xadf1429b, 0xbde047eb, 0xea521916, 0x5251e7d2, 0x3e90ae6e, 0x820152e0, 0xe4ea8015, 
    0xaf011e64, 0x28653cac, 0x94a60fb0, 0x6184e78d, 0x86a13c6e, 0xb36abd3e, 0x9e68c518, 0x63cffcfa, 0xc3c5c420, 0x5abb7192, 0x07f84f2f, 0xf147fc97, 
    0x99661a24, 0xae139734, 0x3d9b85e4, 0x7cc573b7, 0x105fe343, 0x248e17cf, 0x209f06f1, 0x04b5d84b, 0x2898b7ba, 0x14c65b3e, 0x324600a3, 0xf69a6718, 
    0xd73edaef, 0x5b4b4b52, 0xc43daab3, 0x2c90272d, 0x0ccb8ba3, 0x20319cc4, 0x8f67e09c, 0x50a3f96a, 0x59e54c69, 0xb411c348, 0x4bf320f6, 0xf5dac32d, 
    0x218edc53, 0x1a477bc6, 0x53975b09, 0xe80f5fec, 0x7fc71ffa, 0x18e22985, 0x2b9ee9f6, 0x9f479dd0, 0x2c13aa6e, 0x3b6e7808, 0x6e8404e3, 0xad72fde8, 
    0x5de3735e, 0x47e3fe26, 0xfa009ab9, 0x2296b67d, 0x05d02c58, 0x4d141048, 0x0a90bba5, 0xe7eed0f1, 0xb39f29ae, 0x973681e6, 0xfdabb12e, 0xfbb4e1ae, 
    0xd2648db4, 0x6abf7de0, 0xf3cc5b81, 0x50c1c824, 0xfb2fa0e8, 0x0d0e2459, 0xc07a88df, 0x9b4bb4d5, 0x80982b3b, 0xecadf2be, 0x4039e0ad, 0x699245c6, 
    0x532af425, 0xd3f3e468, 0x96977eb5, 0xf2305450, 0xd8a337a9, 0x5915e3fc, 0x5a827155, 0x1ffec8ad, 0x78acc1dd, 0x1147da62, 0x50eabad9, 0xec1c045c, 
    0x9ca0d856, 0xcbc80c74, 0x7624e18f, 0xfb917dcd, 0xe0e7db42, 0x0537a6f6, 0xaa0ab376, 0xafc0c979, 0xc8127e83, 0x6b61bc2e, 0xead6c9e1, 0x2b82e509, 
    0xc6388694, 0xf2db44f0, 0x07d8f250, 0x6e074125, 0x072301e2, 0x63da0fee, 0x737871c4, 0x93d7fce0, 0x45b4992f, 0x0c398412, 0xf16300c7, 0xb873cdaf, 
    0x25091b5b, 0x531efab9, 0x5ac2555d, 0xf90f00ff, 0x78129d1f, 0x454848a6, 0x00a02a65, 0x97f0bf69, 0xbfb5ea4d, 0xdece7ea6, 0xa01df139, 0x4b4f57d4, 
    0x7566b874, 0x41428859, 0xd233ce39, 0x2dc37fad, 0x7dfeef78, 0xe0efbfad, 0xf61a00ff, 0x498b8423, 0x8627fef2, 0xf6bed3f1, 0x58583c3d, 0xdac676eb, 
    0x90e08975, 0xa348886e, 0x3f950703, 0xbc41bfce, 0xed870d0f, 0x4827f019, 0xd56eab1a, 0x92cb532c, 0xe18e094e, 0xdc1f2a63, 0xcdaf861c, 0x6b521b6d, 
    0x7bc50bdf, 0x869b1f73, 0xa37ceef2, 0x91f0bfca, 0xbde29ce9, 0xfd5ff6f7, 0x0dfc2da2, 0x023fe277, 0xcada99f8, 0x41805fcf, 0x82116aa7, 0xc4a43952, 
    0x85bfb94b, 0x74b7fb70, 0x295ff3c2, 0x24ea6198, 0xfca215a7, 0x8dd4558f, 0xe3c7496a, 0x9d3ad35f, 0xad1b8c15, 0x4cb402dd, 0x48e88851, 0x6ffaaa38, 
    0xfea4edec, 0x1e00ffd0, 0x6d2d5bf4, 0xd70a5de5, 0xe58b7b4b, 0xa2bb8a8d, 0x11145599, 0x254d00ff, 0xc015fe8c, 0xbff1617c, 0xf1253c8a, 0x86f0566b, 
    0x0e6b658d, 0x5f23629b, 0xed5d57ed, 0x122b323b, 0x9c917106, 0xbe667a1c, 0xbc89fd9d, 0x637fad2f, 0xd6329e6a, 0x93780335, 0x099d2ec9, 0x1e940064, 
    0xdb116443, 0xe6fab872, 0x3d2f4cbd, 0xbae6944a, 0x676d9eab, 0xf6684ecb, 0x989a895f, 0x17be3f82, 0xfa78611c, 0xf8375f01, 0x171750b7, 0xd92e891b, 
    0xf1a35eef, 0x5c125d4b, 0x54e50348, 0x17af39e3, 0xbabd66ba, 0xde0bfcdd, 0x65756cbc, 0xf5895aed, 0x961b1ef9, 0xe4919c9a, 0x5674179f, 0x0b6ff5d4, 
    0x7b622eab, 0xc808acf2, 0xbf4d8ec9, 0xbc94afa9, 0xe1bbe161, 0x4e7f8de3, 0x6f994748, 0xe8283b73, 0xab843402, 0x5704db73, 0x34119fdb, 0xa0417c39, 
    0x8bac0d4b, 0x6745f40d, 0x0b8795b5, 0x4fca102a, 0xb10f46b6, 0x373e93af, 0x306ddf68, 0x63e562ea, 0x68e3ecd6, 0x311f2835, 0x9903b2b3, 0xacbc1f14, 
    0xe48c2041, 0x65b95d11, 0xdea21677, 0x19a67efa, 0x0e9a17fe, 0x4fb756a4, 0x3df56bf4, 0x2cd4486b, 0x6a1bbeac, 0x56eaa74d, 0x7656ac92, 0x776ec92a, 
    0x8524967d, 0x000be116, 0xefea1243, 0x5a7912b4, 0x5ce7eaf9, 0xc500ff86, 0x18d1a8b6, 0x19ed16ac, 0x68c976e3, 0xf749c6dd, 0x85ef93db, 0xe1bbaef4, 
    0xd7babc96, 0xd4246e84, 0xd38227ef, 0xfb628946, 0x7b048205, 0x51b9ddc4, 0xd8b941cf, 0x0007d902, 0xcf2b9e03, 0x9fba23ae, 0x92bbbd50, 0x6db9880d, 
    0xe10577a8, 0x20d77398, 0xf5abfc06, 0xb0b9b53a, 0xc90ff9d4, 0x6cb26a6d, 0x7f3ff8dc, 0xa7f1972e, 0x7047b2c2, 0xa206c9d2, 0xb1f11cab, 0x80c488cc, 
    0xce794e4f, 0xfebed20f, 0x59e0aafd, 0x56e816fe, 0xda2f8bca, 0x16368d35, 0x69301c46, 0xcdf22393, 0x27fc7c7e, 0xc51ffbbc, 0xd84e0d1f, 0x68d01dd9, 
    0xb6c2c8d5, 0x327d0e37, 0xe39bf42b, 0xb2fd9176, 0xb7d3049e, 0xbb35496d, 0x21fa6c37, 0xf32bfddd, 0xf7fde3bc, 0xad00ff0e, 0x5c99f6d1, 0xac5570f9, 
    0xe900fffb, 0xb53fc427, 0xffc600ff, 0x1f781200, 0xa1ad96e3, 0xd98b5a68, 0x4150d669, 0x360e431a, 0xfc135082, 0xe1bfc5eb, 0xff777ca6, 0x8fbb4100, 
    0xd52bfcd3, 0x847f697f, 0x3e8a8fda, 0x53bb7839, 0x08d24e5d, 0x523ebc67, 0x14c1724a, 0xdd3f1d05, 0x00ff31af, 0x7fa80f85, 0xf5c366d0, 0xd1f6a9af, 
    0x0c351f5a, 0x4bc5492d, 0xe08b3df5, 0xc48735fb, 0xcac35b6d, 0x692f5dc6, 0x31bf5c3e, 0xfc39f4ca, 0x16c34b2b, 0x5baf4f71, 0x9d27f369, 0xd488936e, 
    0x640ac949, 0x2b7dae00, 0xfc77e133, 0xfd5bfd96, 0xad913fd9, 0x00ff099f, 0xfd0fe5c8, 0x8dfe2f7d, 0xf0af9daf, 0xb0e9433f, 0xf488f7af, 0xc75a156f, 
    0x34f368a7, 0xb2ab7343, 0x20ee9007, 0x2ffb7a0f, 0xff994cf6, 0xbc95e100, 0xc81c7716, 0x728f85d7, 0x3f70db7e, 0x7c951f90, 0xf9afe375, 0xd77fdc02, 
    0x7fb0af57, 0x35f9cf64, 0x6ffd036f, 0xe6baf43f, 0xddb672b9, 0xe69fdf26, 0xab249b69, 0x477e7959, 0xde3fe32f, 0x9cc49d5c, 0xf53ec193, 0x906a3cc8, 
    0x353806b6, 0xfec3f8d7, 0xffd44f3e, 0xa5e43a00, 0xdf5200ff, 0x89335f43, 0xeb3e2bfe, 0x4e94d22e, 0x011c566f, 0x7ff38ad8, 0x1a76e81f, 0x5e329fc6, 
    0xa672c5da, 0x28de4f37, 0xa7a70224, 0xad4e7aa5, 0x2f5ce9db, 0xcee37f8b, 0x237fa35f, 0xa33c675e, 0xf7d8c52b, 0x8d32c2aa, 0xed958fa4, 0xfc8487ad, 
    0x7b9a7037, 0xdde52dba, 0x673b90c0, 0xf1989088, 0x40fd3cf4, 0x4d5bbdad, 0xec2c2c81, 0x24c17655, 0x70daeef2, 0x219e234e, 0x4f63d1d3, 0xacb967c4, 
    0x45fe73ad, 0xeeeb7ff8, 0x00ff00ff, 0xacbf3540, 0xffd3ac7f, 0xbfbceb00, 0x74bfeace, 0x84cac9c1, 0xfdcafe2e, 0x5a6ce74f, 0x4b54c451, 0x38cffcbb, 
    0x87785a20, 0x952f9646, 0x20b0d0c4, 0x3c9504e3, 0xcd55eb57, 0x8cbf1a9c, 0xe4a51e7e, 0x9e343a6b, 0x58e85671, 0xf307b15b, 0xaf5bc9af, 0xdf680df9, 
    0xfd0fd6f5, 0x2d5cbf96, 0x74e400ff, 0xfff877f8, 0x5733e900, 0xef5f67c7, 0xfa577f98, 0xff964b1f, 0xf4d7b900, 0x6bf919fd, 0x78fef2f1, 0xdaf834fe, 
    0x3aa4e420, 0x0948ccbd, 0x8091283c, 0x00ffc015, 0xeffdcf68, 0xfb6dd7d4, 0x70c97f40, 0x86fde7f1, 0xf400ffae, 0x5e01576b, 0xff7c3ebb, 0x000000d9, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(FlipNode, "Flip", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Flip")
