#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Sobel_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct SobelNode final : Node
{
    BP_NODE_WITH_NAME(SobelNode, "Sobel Edge", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Edge")
    SobelNode(BP* blueprint): Node(blueprint) { m_Name = "Sobel Edge"; m_HasCustomLayout = true; m_Skippable = true; }

    ~SobelNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_StrengthIn.IsLinked()) m_strength = context.GetPinValue<float>(m_StrengthIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Sobel_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_strength);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_StrengthIn.m_ID)
        {
            m_StrengthIn.SetValue(m_strength);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _strength = m_strength;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_StrengthIn.IsLinked());
        ImGui::SliderFloat("Strength##Sobel", &_strength, 0.1, 8.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_stength##Sobel")) { _strength = 1.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_stength##Sobel", key, ImGui::ImCurveEdit::DIM_X, m_StrengthIn.IsLinked(), "stength##Sobel@" + std::to_string(m_ID), 0.1f, 8.f, 1.f, m_StrengthIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_strength != m_strength) { m_strength = _strength; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("strength"))
        {
            auto& val = value["strength"];
            if (val.is_number()) 
                m_strength = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["strength"] = imgui_json::number(m_strength);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf835"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_StrengthIn = { this, "Strength" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_StrengthIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_strength        {1.0};
    ImGui::Sobel_vulkan * m_filter   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 7504;
    const unsigned int logo_data[7504/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfc003f00, 0x00fff0de, 0x4e8de59f, 0x8d44c3f5, 0x198038b2, 
    0xe309c677, 0xd77a06a6, 0xbf2ffed5, 0x4ef09f17, 0x220d870f, 0x02f13162, 0x771e0064, 0x6b5e9a7d, 0xfe0abed9, 0x5f0c3ac5, 0xcf3bf406, 0x00ff2b11, 
    0xe9ab4bc2, 0x56b76bd2, 0x2d4919cf, 0x0cd13e2d, 0xb03a9116, 0xc9fca10c, 0x18460c64, 0x0eced8c6, 0xd156b73c, 0x09fe9b60, 0x69eef091, 0x223ed2c6, 
    0x3e4e4096, 0xffe7a4f5, 0x0fa06500, 0xd11e3c93, 0xcea98fae, 0x2100e7e3, 0x5c11e46e, 0x9b72d4bd, 0xcc1772b7, 0x4c8f24c0, 0x1e6dba62, 0xd5465348, 
    0xfe32d0ed, 0x83c07cf0, 0x0d55c09e, 0x78b3c333, 0x4d975b83, 0x70dde2d3, 0x05937813, 0x73020097, 0x40eb4880, 0x6facf51c, 0x26a27273, 0xb3e0c4d8, 
    0x953e7000, 0x43a36fad, 0x730c7079, 0x1299ea79, 0x5cfe36e5, 0x65655bd7, 0x5153f8a5, 0xdb2730bd, 0xb840658c, 0x3fd691f2, 0x6da84bbc, 0x3e67d0c3, 
    0x3de92bbd, 0xf899f63b, 0x049fe099, 0x47f8b3e9, 0x68dab0c4, 0x45fba071, 0x535669a2, 0x952328c3, 0x9c2d7497, 0xe20368fd, 0xf92fd6e9, 0x70720b66, 
    0xfe774c0f, 0x2f7cdd95, 0x87c755f1, 0x44eb5b92, 0x3269b45f, 0xfa3bf42d, 0x0f778879, 0x637d45d5, 0x868fcbe0, 0x17a4b61f, 0x748c0f3a, 0x1ffc0f0f, 
    0x1911d4f1, 0x7814eff4, 0xedb4087e, 0xcf00f116, 0xbe0b7b97, 0x88e5ac04, 0x6e333c96, 0xf6d84650, 0x577c80bf, 0xfca921f8, 0x3db5d414, 0x997b7b32, 
    0x751e6e6c, 0xb6a4d4b4, 0x2dd4e278, 0xe216ddd5, 0x0c493c16, 0x8a244b9b, 0xd0206548, 0xe7da8f05, 0x7ed3b242, 0xe9df5d2c, 0x3d9b5196, 0x30ba2351, 
    0x2c00ff4b, 0x78d76864, 0x7cc3d51e, 0x739df812, 0xdfe257f0, 0xa4637c86, 0xee2547db, 0x9b927899, 0x99633259, 0x9ff1ca0f, 0x7359ca40, 0x3feb35db, 
    0xab033c1c, 0x1700ffeb, 0xa72d7cec, 0x4df33d41, 0xb0ce5aa4, 0x28c91343, 0x004b2006, 0x9c3b9ea0, 0xd3788d57, 0x173ed542, 0x0e1a77eb, 0x69dea4a5, 
    0x992b9c1a, 0x8617f652, 0xac324266, 0x4821c015, 0x34b807c1, 0xfb8bfa01, 0xd221fc52, 0xccfe35be, 0x4b3a9757, 0x37f8d1cc, 0x78185f48, 0x8f917b7a, 
    0x68d7c337, 0x83b4b5d2, 0xb7250b70, 0x944f2093, 0xd5182a9f, 0x23646949, 0x3fd94fe1, 0x1c1f4cf6, 0x4be2433c, 0x636a12ef, 0xf006bec3, 0x7cd5a985, 
    0xefa7a94b, 0x51b4b765, 0x6a141123, 0x10479e19, 0x14028ccb, 0x760c3123, 0x1fd62747, 0x8a0f4bf0, 0x3c8bb7ba, 0xade0753f, 0x4b5be65a, 0x8fdd061f, 
    0x217e6911, 0x3656f723, 0x5a5fc4ec, 0x11ed58ce, 0x8c491b4b, 0xfcb62b9c, 0xc323456e, 0xda5f6f3f, 0x8f13fe0b, 0x001e3788, 0x953577f8, 0x0e2fc387, 
    0x9ae9b2df, 0xadb1826e, 0xe7cbd5ad, 0x4cc4b9ce, 0x246921cb, 0x02072194, 0x97aa3632, 0x1a76807c, 0x1315fcef, 0x7e4ff85b, 0x3ff811de, 0xc20f5de1, 
    0x91b40f9f, 0xcb327df6, 0x8b7bb551, 0x992417a9, 0xdef860a6, 0x132096e4, 0x72ccf28c, 0x3efc774e, 0xfc3fe31f, 0xfebff0f3, 0x00ff240b, 0xc6f395e3, 
    0xfc2dfb9d, 0x8585f153, 0xf06fafbe, 0xf677c6ef, 0xde1a2897, 0x2ed04ee7, 0xe8e385a6, 0x078fb00a, 0x59c5e9a1, 0x368600ff, 0x00ffaff8, 0x0fe2bf44, 
    0x7f5713fe, 0x3e806efc, 0xbe85fdc1, 0xe3937835, 0x8d8fc487, 0x15f1217e, 0xbabdbbd0, 0xe3d8b4d1, 0xc3914d54, 0x24407714, 0xa2f0af71, 0xe41e38ee, 
    0xc403aef7, 0xff7faf16, 0xf8c30400, 0x516d375e, 0x8f250bf1, 0x40ae2d72, 0xffa701fd, 0xee2ec100, 0x55fc6e6e, 0x467933f1, 0x507bec6f, 0xfacf18d8, 
    0xf500ff52, 0x3aa9deaa, 0x0400ffc1, 0xc076f8c3, 0x39e2a31d, 0xcfbe3d40, 0x0114fe75, 0x2c8587f1, 0x7523352e, 0x6ec6daa7, 0x122eafef, 0xe563782b, 
    0x2a9891a6, 0x88a51ea8, 0xabd77b00, 0xb37fd17e, 0x2bfba9f6, 0x1cbe966b, 0xcf3ceed6, 0x11166a11, 0x9f7d72ea, 0xd3cabe98, 0x58c61249, 0x6c00df77, 
    0xeccf2a7d, 0xe3a3e113, 0xe1efdacf, 0xb5af96ce, 0xd4e3d6a3, 0x6db463fe, 0x8c770db4, 0x00ff7980, 0xa6dfe947, 0x4f5d7346, 0xc56b8dc6, 0xffb415bf, 
    0x477c0600, 0xb5adefd7, 0xda687763, 0xac713433, 0x794f7227, 0x5415f920, 0x3da81770, 0x2dc703e8, 0x8be319b4, 0xd8f4d14f, 0x7aa7fe45, 0x65e519c2, 
    0x80991d2c, 0x27015054, 0x0670552c, 0x78722049, 0x7cd775af, 0x00fca60f, 0x95fd7ff8, 0x6f496de3, 0x2f7b51fc, 0x36c2dbda, 0x556b5a65, 0xb70b3650, 
    0xe7046c03, 0x90b99477, 0xf4103202, 0xaa173ce1, 0xbe82c27f, 0xc3f4d6b7, 0x4feb78e5, 0x5e5afbba, 0x65c1e691, 0xb1b38d10, 0x994b034e, 0xba721b95, 
    0x90b7716d, 0x28fe7058, 0x42cd2b9a, 0x6d8b5ddb, 0xd2a817d4, 0xcc95f906, 0x58de6e92, 0x39230070, 0xa0d84ec7, 0xe25dfc08, 0x1e82f549, 0x5b1bc6ca, 
    0x0efd0764, 0x9fd34804, 0xcc0f0ae2, 0x73c77c7a, 0xbfde3270, 0x9fcbfe51, 0x8d3ff41c, 0xfed20d3e, 0xd254fc04, 0x6699551f, 0xf5820ffb, 0x1af7dcf4, 
    0x58c9cd2d, 0x96552411, 0x3bd49a16, 0x491b8dac, 0xac5d35d6, 0xcc0f31a2, 0x359c6e9a, 0x5b9f2218, 0xad886bb7, 0x957daac2, 0x602fba82, 0xf81f20b9, 
    0xe86f4d16, 0xdde1cb72, 0xedd74747, 0x696bf687, 0xb1699ff7, 0x68b8c376, 0x301b0fe5, 0x283f81f9, 0x78ce7424, 0xee0328c6, 0xfe033d3b, 0x2af8af11, 
    0x2188c357, 0x9b23ed85, 0x77b5c043, 0xb61d1e49, 0x3213afae, 0x64642933, 0x8ca46274, 0xabaec1a1, 0x91fdc9f6, 0x9f683f6d, 0x29fe6804, 0x7f74d5b9, 
    0x86effa85, 0x0eaf1bf5, 0xebe2a32e, 0xaa696bb3, 0x2ccfb069, 0xccf9b276, 0x2aba8b19, 0x36bf2c30, 0xb02b23e6, 0xed378cb7, 0x079fe185, 0x7ed348fc, 
    0x49cbf829, 0x8b1f35d7, 0x2d8f46fa, 0x0445338c, 0xdfb9611f, 0x46d304b9, 0x22dc2093, 0xf6f25665, 0x3d858c8c, 0xf8a5294f, 0xfca7e3d3, 0x5ac52314, 
    0xa87fa376, 0xfac3e7e8, 0x00ffac3e, 0x3104d260, 0x34732cda, 0x30914226, 0x20ca7656, 0x3a4296c9, 0x0da0f560, 0xd16adaef, 0x00ff613f, 0xf840f7d9, 
    0x1eeea315, 0xba65f127, 0xd62c5e6b, 0x7401506d, 0xd991c23c, 0x7800ffc4, 0x373986c2, 0x07eddc7d, 0x1e559e18, 0x7c0dfb75, 0xe72ed21a, 0xfc353ed7, 
    0xf0c58447, 0x2d7fc2eb, 0x00ffbcb5, 0xa6c69a34, 0xa3adeadf, 0x5d19a907, 0x8b9decde, 0xfccffab2, 0x9f443314, 0xb9fd84f6, 0xbbf031fc, 0x6ae58bc2, 
    0x965d7af6, 0xb0de3387, 0x0b69148a, 0xf30f97dd, 0x17198212, 0xab6c6927, 0xf08ca700, 0x6fb700ff, 0xe1277dc5, 0xafe1877e, 0x7b013e80, 0xf8084f9b, 
    0x25733428, 0x2e4942cc, 0x1bd34d35, 0xcbd7bc99, 0x30eecc15, 0x93e72e02, 0x4046b40b, 0x76fc9d07, 0x2f35aefd, 0xef119f89, 0x429d5bf5, 0x8028daf6, 
    0xd3b3b5b4, 0x1b8b9b75, 0x9d10585b, 0x581c4591, 0xe6275705, 0xe9c9b13c, 0xf8eff38a, 0x00ffb35e, 0xff5a57d0, 0xfbaac200, 0x66c46bfc, 0x5502332d, 
    0x6ac6017a, 0x00ff2c3f, 0x003a7f75, 0x09fed7fb, 0xef1bba9f, 0x93654988, 0xee36d67a, 0x3ce501ca, 0x10fa1fe5, 0xb35f45fd, 0xe03fef89, 0xf915fe97, 
    0x227e1877, 0xc5f4d848, 0xd6f8c7a5, 0x3e12fc9f, 0xfff85fdc, 0xabf6c500, 0x0f6f47b6, 0x8b63473e, 0x2c3f52bb, 0xe19dce9f, 0x00ff4394, 0x87d0d204, 
    0x8500ff55, 0xfee73985, 0x0fa067bd, 0x8200ff02, 0x4ed3f877, 0x61fb79f8, 0xd5570bf8, 0xd7bccd15, 0x53ca6952, 0x8d7449a2, 0xf4c4ac6c, 0x27063355, 
    0xa4be06b0, 0x0efea7fd, 0x5eccfedd, 0x346cd016, 0xcdbd14bf, 0x6ccb8c85, 0x90cac5da, 0xfbe5b47f, 0x2253de44, 0x917d940f, 0x6bbdfc81, 0xc100fff3, 
    0xd5e41802, 0xafd91eaf, 0x24e28625, 0xbf47d08a, 0xb84126cd, 0x8c81df11, 0x887ecd77, 0xc7cbd278, 0xec0fb59f, 0xcd68a6b9, 0xfe7b6de1, 0xbc890716, 
    0x71b9fd65, 0x960c562c, 0x5216a4d2, 0x65d78dda, 0xbbbc6144, 0xc2dfea64, 0x80e23917, 0x6bf8333e, 0x7c113fe0, 0xdea5f15b, 0x6048e187, 0xe7612b9a, 
    0xe2744d5c, 0x89687b3b, 0xc0959600, 0x5def3e0a, 0x001895a4, 0x57fb4505, 0x005e77c0, 0x4bb49ffd, 0xf85e0bef, 0x5df14a9b, 0x8b24d9cf, 0xcb74d352, 
    0x53f66f41, 0xd4b0e0e4, 0x56597e5d, 0xebf0ad49, 0x84933392, 0xf8964752, 0x837fe2c3, 0x2f781d7e, 0xf069f850, 0x7ab6c387, 0xdd9a85d7, 0xb5d75d5f, 
    0xe273b158, 0x8de41609, 0x84004eca, 0x031f7185, 0x3d417df8, 0xf09dec27, 0xe5f8499f, 0x3c2f8a3f, 0x00ff9268, 0x66a027c2, 0xd75300ff, 0xdb204fe5, 
    0xf0ca9814, 0x0cd9a69c, 0x530e67aa, 0xbbdf7c3c, 0x07488965, 0x6db31fd0, 0x297e81f7, 0x7f3de2c9, 0xe137f851, 0xbec22b7d, 0x71c19417, 0x20172fe3, 
    0x2f129dba, 0xc934c399, 0x0ca19487, 0x0b15accc, 0x04b72596, 0x6b3f886f, 0x127e8bef, 0xf829bed6, 0x75e1dfda, 0xa4859e85, 0x3d90c435, 0xe91fb0cd, 
    0x6cf991ca, 0x523b6dd0, 0x3699c122, 0x3682efe3, 0xbea4aff4, 0x00ff7833, 0xf0cdf85f, 0xa7f054e7, 0xfa864fc1, 0x0de09fc6, 0x5b9af126, 0x3b331b7b, 
    0xa911576b, 0xb9d14658, 0xd2161799, 0x028c1c95, 0xc4cf18e7, 0x2f91deba, 0xb7a52d87, 0x781cd2ba, 0x62a95ba2, 0x84b961d5, 0xe07c9aa4, 0x3cecdbe0, 
    0x39c929a3, 0x40ed78e8, 0x167c491f, 0x6d3480fd, 0x7d3b7c1d, 0x8fc4bff1, 0x6fb33663, 0x84a7cd1d, 0x7c0f4634, 0x4b0b702d, 0x2df93177, 0x659651e2, 
    0xadcacc5d, 0x955287b4, 0x3e8c4ff6, 0xfd2f7c27, 0x6700ff95, 0x52ef1e6d, 0xddf4add0, 0x25f5d23a, 0x7484c7f0, 0x3d45b4bf, 0x132dd4cd, 0x3e71c73b, 
    0x5c8ce6c9, 0x24772fee, 0xc890ac71, 0x4a90cba3, 0x85cf759e, 0x27d13a7e, 0xbbf00df8, 0x348c5fe2, 0xee2f2e69, 0xa4712dfc, 0x69dc595c, 0xfcf57dfe, 
    0xdcf356d6, 0xc1b905a1, 0x82fdce8a, 0x919bf381, 0x0fe7d7d8, 0xe3737ded, 0xb59f892f, 0xbdf48d67, 0xf5d5e749, 0xd124d775, 0x6d665b34, 0x9eee11cc, 
    0x1fa3281b, 0x9b85aac2, 0xb3b31c68, 0x4062e77d, 0x6df68b3d, 0x067f75d7, 0xd7f81a7c, 0xaeeb4ffb, 0x8a7ff123, 0xf4d1272e, 0x9189e259, 0x32679a23, 
    0xbcc65cdd, 0xa91c0380, 0x5e1706cf, 0x5a9d5f73, 0xa5f6e7ad, 0x91d8c5e5, 0x5fc89188, 0xdb81e430, 0x23faf53e, 0xcf787dfb, 0xe13ff84e, 0x0d7c076f, 
    0x3a236fd1, 0x43a38966, 0x02225ea7, 0xa4c424ab, 0x0708ca93, 0x27143b6b, 0x7190c883, 0x785c085f, 0xcb42ca22, 0x0a79a96b, 0xe906bcdf, 0x8ec0c643, 
    0x03c844a2, 0x710005ea, 0xe7d63c8f, 0xf23a6e60, 0x4de9cf01, 0xdedf74fb, 0xffc2f71f, 0x37758500, 0x9cbe0a1e, 0xefd982a1, 0x4d140823, 0xf7468702, 
    0xfc173507, 0xfd9f7a20, 0xef7f6e03, 0x1a00ffd0, 0xff09fd00, 0x783e8200, 0xe237fb7f, 0xc5d2b0ae, 0x87df3522, 0x2397186f, 0x3856b78d, 0x61d5feed, 
    0x0f8f56e9, 0x445b13fc, 0x7ecc7281, 0x03a7dc23, 0x4600ff38, 0x5de95fb8, 0x12fc00ff, 0x1f35ae55, 0xfcbd3a89, 0xd87f3c80, 0xe9fe5157, 0xb839a436, 
    0xa09ec2b3, 0xeb71da16, 0xe31afab0, 0x7b710d7c, 0x0400ff7d, 0x43f3f0fa, 0x1feb1c6d, 0xd17e39c5, 0x22e0a61b, 0xe7cc3cfb, 0xf73c3818, 0x1380e618, 
    0x94fd27f6, 0x3bfce9b4, 0x54abf8ac, 0x1dbbb4d7, 0xed2b0b68, 0x91455d3a, 0x69a0acac, 0xd83571f1, 0x19e128c1, 0x48da987c, 0xe846e49d, 0xff1dcc83, 
    0x00ffc600, 0xc1abf80c, 0x78040f22, 0xf05df73e, 0xb157c2cf, 0xeed6674b, 0xf68a266f, 0xf77063e2, 0x54e0e146, 0x629e2c88, 0xa72cb8ad, 0x6e3e4631, 
    0x63571e40, 0xc147dde3, 0xfff02a5e, 0xd4628100, 0xdeb3e976, 0x5b3269e8, 0x929ac2a2, 0x71710dbc, 0xdf1f841c, 0x443ab2c6, 0x0e849415, 0x5720c1b8, 
    0x5bdbf049, 0x2588f7f1, 0x8ea7b5f0, 0xd8a845bc, 0xa7862fc1, 0x577c79b8, 0x0422da0f, 0x19a2936a, 0x6430d23e, 0x6ee40ae3, 0xc741b50b, 0xdfe60114, 
    0x690f7e11, 0xa1fd14de, 0xbe864ff4, 0xd7509f18, 0xad6dd566, 0x7259f46d, 0xf7169704, 0x38893490, 0x47208070, 0x3c909f9d, 0xce391bb3, 0xf1f23e72, 
    0x2fbc81ef, 0xfce07bf0, 0x2fd5037e, 0x1cbcd364, 0xc5f76297, 0x68979e3a, 0x1a6bdfb1, 0x4198b88c, 0x68779f6e, 0xdbbcbbc2, 0x511cc3f6, 0x8f979865, 
    0x163ed0b0, 0x5af74e78, 0x1bc5aff0, 0xb0690d4f, 0x2c3a766a, 0xb21769b1, 0xb7f61bdb, 0x31e6ee8e, 0xcc8c3469, 0x95588b84, 0x11b8aab7, 0x36a23347, 
    0x7f7e52d5, 0x2c3eb8fd, 0x087e6bda, 0x583e2d86, 0x16ebd81a, 0xaeed09e6, 0x6479e9cc, 0x3314c9d1, 0x9b44dc87, 0xd0fc19d5, 0x5c74653e, 0x03c440b8, 
    0x1c3f75d8, 0xf0b7227c, 0x5f5dd1e5, 0x81ecd343, 0xcfbac303, 0x3d213c84, 0x9428daac, 0x52a70184, 0x008149e0, 0x5412a27d, 0x79ee0374, 0x1c7e84e7, 
    0xa1fd3b7c, 0x881fbbf5, 0xe4d62ffe, 0xe2217c95, 0x8c1ab006, 0x54d73862, 0x39fb4e93, 0x2a2917b6, 0x3ccf2449, 0x4e915d2c, 0x2b0606e2, 0x78094fe1, 
    0xc65f5dde, 0xf62f5ad6, 0x3216fce5, 0xd37488b4, 0x47dac27e, 0x95bf4a40, 0x00dc0cbb, 0x2b3dec38, 0x26127ede, 0x14fcafa1, 0x0e950ef1, 0x98e173a7, 
    0x368bcff4, 0x999394ba, 0x17754b4c, 0xa38925d9, 0xb7b8ba27, 0xc8a12356, 0xf5af0fa0, 0xba8b00ff, 0x3bfe889f, 0x0c71067c, 0xea8af07f, 0x5db117f7, 
    0x2059db1b, 0xb0d52b92, 0x421410bc, 0x4965aaec, 0x64399418, 0x4962291f, 0x231de703, 0x143f96c1, 0xbaa1e0bf, 0x97648f5f, 0xb61abeec, 0xc497f5f0, 
    0x6d00d69b, 0x740b0b8c, 0xfe074789, 0xc6f3365a, 0x0f820f48, 0xc635b935, 0xff69a2a9, 0x9feeb200, 0xfd4ba975, 0x95e27bb3, 0x71a14ef1, 0xec192b7d, 
    0x14ab8cad, 0x996fb071, 0xaed99221, 0x98144eb0, 0x6c858c9c, 0x53ed677a, 0xf65b78a5, 0xe30bf869, 0x55f819cf, 0xafb4bfed, 0x78a73dfc, 0xcc934d1b, 
    0x6c319247, 0x07f142f3, 0xe4e573ce, 0xb739af3a, 0x00bc7ce4, 0xd27e4a7e, 0x3e2f14bf, 0xf165fc2b, 0x206e890f, 0xea96b7b7, 0x252152ee, 0x5cf3a0b6, 
    0xe29f649c, 0x5ab0c766, 0x1e7c123e, 0x7fc52ff1, 0xbe695915, 0xd4bcb61f, 0xcd8f47b5, 0x6127d616, 0x490bc658, 0xa4428c24, 0x98b9916b, 0x52073280, 
    0x89f7f301, 0x38667df5, 0xbb92b498, 0x3249321f, 0xef53afc7, 0x785e5feb, 0xf69751fb, 0xe035f870, 0x6ef80f5f, 0xc76bf8e4, 0xffb02b1e, 0xc4838400, 
    0x6fb5231e, 0x1636eab3, 0x695b6032, 0x4012f9c8, 0xc65d111d, 0xd73d7957, 0xebcf0114, 0x80f7b33f, 0xf6793bbc, 0x81f67f0d, 0xac8d8ef0, 0xb1bab8c2, 
    0x752eedd3, 0x2793e128, 0x62136e2a, 0x1ff80ebb, 0xf03faa89, 0xff157ea6, 0x78cad100, 0x0900ff7f, 0x2efecffb, 0xf1bf7bbe, 0x7277372c, 0x33dbf1cc, 
    0x752f16bb, 0x9f2bcf12, 0xc9b13bef, 0xfe57bd27, 0x00ffb7dd, 0xfe7f5a9e, 0x34fe4701, 0xff77fa01, 0xd0a10400, 0xdfc397e6, 0x91883516, 0x066e2dac, 
    0xca6c6999, 0xcda35470, 0xfd378024, 0x45fd5cb5, 0xf50abf71, 0xf637addb, 0xce92b408, 0x19356d58, 0x6fc926be, 0xee3a6f6d, 0x918d896b, 0xf12f0ad9, 
    0x1d18303b, 0xd80feaeb, 0xcf3de0ab, 0xcf0d0fc2, 0x42cd2be0, 0x1d9ac4db, 0x0de24de3, 0x1f3ec60b, 0xbab1cd97, 0xcb31f988, 0x489c9c13, 0x21395209, 
    0xda492597, 0xec2778c0, 0x3b9de159, 0xb7eccfe2, 0x70eaa36d, 0x7ca2c333, 0x9edefe45, 0x6855b855, 0x66da6115, 0x89ed5460, 0x23b96c41, 0x001afc9e, 
    0x00fff5e3, 0x26de6909, 0xede2f3f8, 0x279d4253, 0xaf34d2b4, 0x23d546ed, 0xa924218e, 0x7b5b0b0b, 0x5529c378, 0x0546678d, 0x36e21cd8, 0xb50318c9, 
    0x4de333f8, 0x6e5ac71f, 0x57fca3ab, 0x7c6ed4b3, 0x1bd9a70f, 0x221e9d8b, 0xfb67f216, 0xd13d224c, 0xdbb00444, 0x12369407, 0x04550645, 0xf3297be7, 
    0x4ae7d98f, 0x3edec087, 0x00fff4d7, 0xc1766a1b, 0xa60e2f75, 0xfedaa288, 0x354b4238, 0xc25637d4, 0x8e94f341, 0x24615857, 0xe33671a3, 0xd1355785, 
    0x4ee23778, 0xe203f0ab, 0x348ecf0d, 0xf1c209af, 0xd95818ba, 0xdba4c758, 0x0ad57838, 0xce795034, 0xb10d9489, 0x00d2d2fc, 0xba4a15fb, 0xf05f7700, 
    0x56da0f51, 0x45dc026f, 0xd64a97f0, 0x3ec493a7, 0xf1259622, 0x8e3ce96c, 0x065bec6d, 0xfbf2582b, 0x2c63f361, 0x150c22f2, 0xb1baa470, 0xb5b8e727, 
    0xf0edf816, 0x007bca1e, 0xcef05a13, 0x8bdba791, 0x70bce46c, 0x1d673acd, 0x3feac6f6, 0xda2ff30a, 0xd0c1e1a7, 0x5fde26be, 0xfe576ad9, 0xaed5b222, 
    0x0f3bf5ae, 0xc392dd13, 0xd2748b54, 0x32b0bb2c, 0x702bb7fb, 0x0cc4c832, 0x613fb762, 0x97f80ebf, 0xe1fbf85f, 0x4bb5d3b4, 0xdc5b0dbf, 0xb926c85c, 
    0x2996248a, 0xb2b4514c, 0xb2bad1c2, 0x08bdea10, 0xa0f5b03c, 0x78082f0c, 0xf676c177, 0x96f8d2b7, 0x7addeb5b, 0x11f68439, 0x6d2d9769, 0x05e7603c, 
    0x7220737f, 0x54461018, 0x4acf838c, 0xd7e08ffb, 0x892f3bc4, 0xf00ffe56, 0xba1bde34, 0xb48767f1, 0xaf590b5b, 0x5cf1bee2, 0xdf1a3d62, 0xa7afd97e, 
    0x2263ac8d, 0xda819148, 0x401ece65, 0xe5e702bc, 0x1e9f8e2f, 0x7cad0b3c, 0x83d73a43, 0x87373ffc, 0xb56559a5, 0xd62de586, 0x6b9e0c09, 0x3bb1e036, 
    0xd861c829, 0x7dc5e973, 0x7c35fb13, 0x8976f060, 0x5ec67ff0, 0xe289f80c, 0x5f0dbb6b, 0xb68445e2, 0xe089f890, 0xb7b5a47b, 0x2886269a, 0xa9e40ce5, 
    0xfb48dc8c, 0xe40c1070, 0xc203288e, 0x777c33be, 0xf1ddf8bd, 0x2f1ec54f, 0xd2b56649, 0xa3d3752e, 0x63929169, 0x61117b7b, 0x0bb80d73, 0x6b3e46c9, 
    0xc8b3574c, 0x00ffb7d5, 0x81f83f05, 0x497ca275, 0x9d0df0bb, 0x3d0c8fcb, 0xceaa78fa, 0xd6ee47d1, 0xe511a84b, 0xdef4fe61, 0x66de877c, 0x357ea9f5, 
    0xd75acefe, 0x87f0dbec, 0xd9feb94d, 0xa35fbcd3, 0x1a26beea, 0x7de29dce, 0x776f1338, 0xc4c0d666, 0x0ce586c5, 0x43e1c8c0, 0x5641da30, 0x0f1d0960, 
    0x78a699ed, 0xeff85e43, 0xc563f8ac, 0x5a37745a, 0xa76d91ee, 0x9a724558, 0xf267d9b7, 0xe36c9d06, 0xdc983262, 0xf74d92f9, 0x33c638dd, 0xfc0a1f40, 
    0xc7d5f03e, 0x61513c8b, 0x494b44a6, 0xeb50257c, 0xfc48e5d4, 0x7fd0d73a, 0x52dd52f0, 0xbff6efd6, 0x6d916ef1, 0x8ba741bc, 0x7b89741b, 0x2a84b314, 
    0xfc33e881, 0x0bf8baeb, 0xbec327f0, 0xf0d9f818, 0xd446e7fa, 0xbaa64bf5, 0x4d8405f1, 0x4bdaeaa6, 0x75661c93, 0x229a8169, 0xa431b8f0, 0x38b02183, 
    0xfd15ba26, 0x00ff2d9b, 0xb3daaf68, 0x3fc467e3, 0x7883fa88, 0x8587e17b, 0xa67d51fc, 0x3fbb1aea, 0x1d4fd796, 0x481b8ac1, 0x0a690930, 0x0b0a5398, 
    0x0baae812, 0xf800a93a, 0x6c3cdb08, 0xbcc25dc0, 0xf1348f93, 0xad1f29f9, 0x00ff4b1e, 0xf73fe4cf, 0x8af8bff1, 0xffd444fd, 0xd93f6800, 0xe305e12f, 
    0x02fc64f8, 0xb6a1afd0, 0xe39aa101, 0x9c518b49, 0x368f0ca3, 0xdf76a259, 0xc77ce59c, 0xeae66300, 0x6df85f05, 0xfe27d91f, 0xdfc3df8d, 0xff594af8, 
    0x003df200, 0xae63957d, 0xeff8f0e9, 0x848fd5e1, 0xcbf42ded, 0xb5515f5d, 0x6bad06f1, 0xd146f265, 0xb0dae85d, 0x0138da47, 0x8187b2a4, 0x724b5980, 
    0x3fc7cf49, 0x9d862db1, 0xfb3dec0f, 0x6f49eb44, 0x8f36de0b, 0xc4c8dbab, 0xda9298e0, 0xea49d5e9, 0x4f0fef07, 0x7c655fe9, 0x3ff0b83f, 0xbe85dfc3, 
    0xf77cf114, 0xd8117777, 0xd34c6f78, 0xb4bdbbe3, 0x61997b6b, 0x926df3b4, 0x54b08946, 0x2a93beee, 0xf59e797a, 0xa3eccff2, 0xaf74d8e1, 0x96f63fd8, 
    0x868bdf96, 0x868400ff, 0x2ae000d3, 0x516ea7c7, 0xfacdcced, 0xdaca0750, 0x4b34894f, 0xdfb0d96f, 0xee89f8dd, 0xdc056b3c, 0x739b0ecf, 0x33b39f2b, 
    0x8acc695d, 0xd868c730, 0x38b07bb7, 0x9d8142fb, 0xf61bbd86, 0x1e3ed653, 0xbe4eb3f8, 0x755bbcd4, 0xc586377d, 0x241e97ac, 0x91e06fd1, 0x8a2794cf, 
    0x45126e28, 0x6c9c8fe1, 0x03de6fd3, 0xbea2fb71, 0x752dd035, 0x79dd141f, 0xea48dbd0, 0x76df5827, 0x83927413, 0x29caef83, 0xe4bc7dc7, 0x3fed2796, 
    0xf0545bd9, 0x23bc82a7, 0xc43b78af, 0xb0b91e9e, 0x44a691f8, 0xf0ea73f7, 0x1b1b41dc, 0x6cdf9e37, 0x33c45d1e, 0x5665362b, 0x9b6c24db, 0xc2c1e046, 
    0xf6670180, 0xbe54f0c2, 0x257cd02b, 0x28128607, 0x0df54874, 0xd14aeb72, 0x1b29e21a, 0x82b9b64f, 0xf3e338d2, 0x2d617961, 0x94be84f6, 0x0297e647, 
    0x408e0a60, 0x3f65bfed, 0x037e7785, 0xbbf061f8, 0x8b159251, 0xd5213ec4, 0x823cf1a1, 0x595bf333, 0xf0e8abc9, 0x70709222, 0x2773e9f6, 0x2bfdbbfb, 
    0x24613ccd, 0xa8fd357e, 0x4f1e7ead, 0x0c7f0be2, 0xdde103f8, 0xad46f6a7, 0x244fd8ab, 0x8eb56b3f, 0x91912c53, 0xf30cedbc, 0xe212693c, 0x40edd438, 
    0x773d06aa, 0x8bc5d7e3, 0x055e863f, 0x5f20fed7, 0xae63475c, 0xdfe6966b, 0xbb45dac2, 0x10a1eeb7, 0x53686bcb, 0x6d68056b, 0x642eaeed, 0x72bc0279, 
    0x8d10714f, 0x70075bd8, 0x1b8fcd0f, 0xfc5e90ea, 0x12c09449, 0x662f182b, 0x618c20fb, 0xb38df936, 0xd71cc0f1, 0xdbfbe165, 0x62484e8d, 0x1c2151fb, 
    0x1c661713, 0xd6e7bf0d, 0x6ba671bc, 0xdc26b9fb, 0xdffd96cb, 0xc212987f, 0x6a069fbb, 0x96a0ae01, 0x45ecfd36, 0x159cab44, 0xc7e62375, 0x0368c6a1, 
    0x8bd81fee, 0xd7f8b2c7, 0xec7ff150, 0x888be2fb, 0x120f346f, 0x785d5c59, 0xde50db7e, 0xc4a86fc9, 0x6f13e03c, 0x95470821, 0x17139cd4, 0xbefb2e03, 
    0x8200ff7c, 0x5e566a88, 0xfeb4fd20, 0x3845dd23, 0x91f6ccf2, 0x33b28d07, 0x9211940d, 0x9d7fd50f, 0x193fe14f, 0xe3b3f04b, 0x227e8107, 0xc3dab5d9, 
    0x5d316aa5, 0x6d8b2d5d, 0xc4416896, 0x24e983f0, 0xe18ed065, 0xffb1afc8, 0x671d6800, 0xed777ac1, 0xfbf07b1f, 0x0c00ffc5, 0xf8a923bc, 0xbbe1785a, 
    0xb1be24d1, 0xe19acffe, 0x8f4c8925, 0x776e7d6f, 0x8a4c5904, 0x18794677, 0x1e40310c, 0x6a2dfb37, 0x3ea1f07f, 0x1c3fea01, 0xf8a99386, 0xdb7fc5c7, 
    0x1dbec243, 0x6dccc4d2, 0x526b25ed, 0x1d2075ef, 0x3c1a094b, 0x725c381e, 0xed671df9, 0xfcdcac63, 0xf05df807, 0xaed5e0f7, 0x5aadafaa, 0x0fe24f59, 
    0x1845df14, 0x2ed42669, 0x982fcf0f, 0xcb822501, 0xbc6f8577, 0x989e011e, 0xffc027fa, 0x397c0500, 0x54f746f0, 0x57834c9f, 0x0dc3eff0, 0x3cd24e4b, 
    0x6adda84b, 0x634d92da, 0x021734a5, 0x3685b355, 0x4396b8b9, 0xb31ca312, 0xf0fe906c, 0xf0af94b7, 0xa84dedbf, 0x3e1f5fea, 0xc48b7836, 0x766903c9, 
    0xebb61197, 0xb3179469, 0x01358ab6, 0x5c21c1a6, 0x029c1142, 0x0c149942, 0x1f00a1b3, 0x6a5fdd34, 0x9dd3ce53, 0x4cc8da62, 0xcb1dc17c, 0xfe41ee34, 
    0x7d3dd82d, 0x82534fce, 0xabfd5071, 0xa100ff51, 0x00ff4f8f, 0x00ff0dbf, 0x6bb2d7c4, 0xf80c9e76, 0x87679a46, 0xdb098fb5, 0x5b211eeb, 0x5975ae18, 
    0x9147d6ef, 0xda05642e, 0x0a63943f, 0x35f017a5, 0x0b00ff99, 0xfdf7e10b, 0xfe27ed13, 0x14fe4ffd, 0x82e7f701, 0x233e6e2f, 0x0a7fcbfe, 0x3c433c6c, 
    0x975a849a, 0x6e59b582, 0x7abf9165, 0xa4b30eed, 0x5e3f7fac, 0x3d70fc01, 0xbab5942b, 0xb0dfc29f, 0xa523c5b7, 0x5087f6cc, 0x0db96ef1, 0xe6b18dc9, 
    0xa5c85923, 0xbf08b14f, 0x039f7495, 0xdce400ff, 0x00ff0a3e, 0xffae8dd8, 0x48efe900, 0xff565bae, 0xf8159300, 0x6300ff83, 0x00ffb596, 0x0750b3a4, 
    0xa60a3fc6, 0xa488671a, 0xde188abc, 0xd15d334d, 0x0649602e, 0xb824dde4, 0x4afccb70, 0xd8831143, 0x358f0fd1, 0xfe736dbb, 0xc38bab12, 0x8df76ba9, 
    0xafef69f6, 0x18c93314, 0xc7ed144e, 0x3d5ecb03, 0xf8a2d6b3, 0x2100ff77, 0xc2fe6b2d, 0x00ff1fbe, 0x2eb1a2d1, 0x6515e43f, 0x275f00ff, 0x7a4000ff, 
    0xe203fb00, 0xef8bc44f, 0xd501be86, 0x7de1617c, 0xfcd14a3b, 0xdb1be355, 0x5857bd3b, 0x7049d08e, 0x6b9f26cf, 0x9036c272, 0xd93c96b7, 0x4c2f20e4, 
    0x8cb7e7d7, 0x78af71fc, 0xfa17c5eb, 0x6b3588cf, 0xba5367bd, 0x57b72c90, 0xc3ae34b3, 0x1e4f2cd3, 0xede7f6d5, 0x2400ff01, 0xf5bfc32f, 0x00ff4ed3, 
    0x7c8535d3, 0x00ff710f, 0xd77f921f, 0x9c0d4061, 0xc0b9b404, 0x3e4c14e9, 0xf0588dbb, 0xbc38a3e6, 0xfe42dab5, 0x31ca07f5, 0x7341459e, 0xb71e00ff, 
    0x3fc2f57f, 0x3cd308fd, 0x1f00ff39, 0xddf59f96, 0x0fa0983f, 0x6ffa8a71, 0xbe1429ec, 0x306617e5, 0xaf19380f, 0xef6a3fb4, 0xf0c96906, 0xf17cf647, 
    0x5ae3f91a, 0x96b6c19f, 0xc5ccec26, 0x587b3bd2, 0xe8b932da, 0x2797b9d9, 0x4acfb8f8, 0xf93f9ef8, 0x00ff4b02, 0x9af9e75f, 0xb1f6d7fb, 0x699300ff, 
    0xecbf9cfd, 0x47fa1f5a, 0x271f4069, 0xaef1387c, 0x2afcafbf, 0xbdbb34d7, 0xc292506b, 0x76eddbca, 0x2477efd6, 0x8c2cc191, 0x76349aa1, 0xb7774265, 
    0x7372062a, 0xd83ff79a, 0xf1b64e67, 0x313487af, 0x69b7c2ab, 0x0b5eaf7d, 0x3c917cb4, 0xe6a65656, 0x929c5818, 0x5ff37686, 0xdc28bb9c, 0x393fc848, 
    0x00ff1d7c, 0x3fc50b91, 0xff8b0df6, 0xbe8e4300, 0x8200ff95, 0xc800ff77, 0xfb6fe1b7, 0xfabf6b0e, 0xfc08a06d, 0xc3cbf02f, 0x6474111f, 0xb48977f1, 
    0x7b7d35d9, 0xfb6b965e, 0xb9bf87bb, 0x5d194385, 0x22452242, 0x0085a22a, 0x9ad4670c, 0x8500ffd6, 0xfef3f005, 0xaafc9f85, 0xfaf17f5f, 0xff49f8d2, 
    0xc3bb2400, 0x27edf51f, 0xba968ffe, 0xd9ff00ca, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(SobelNode, "Sobel Edge", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Edge")
