#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "BarrelDistortion_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct BarrelDistortionEffectNode final : Node
{
    BP_NODE_WITH_NAME(BarrelDistortionEffectNode, "Barrel", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Distortion")
    BarrelDistortionEffectNode(BP* blueprint): Node(blueprint) { m_Name = "Barrel"; m_HasCustomLayout = true; m_Skippable = true; }

    ~BarrelDistortionEffectNode()
    {
        if (m_effect) { delete m_effect; m_effect = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ScaleIn.IsLinked()) m_scale = context.GetPinValue<float>(m_ScaleIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_effect || gpu != m_device)
            {
                if (m_effect) { delete m_effect; m_effect = nullptr; }
                m_effect = new ImGui::BarrelDistortion_vulkan(gpu);
            }
            if (!m_effect)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_effect->effect(mat_in, im_RGB, m_scale, m_pow);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ScaleIn.m_ID)
        {
            m_ScaleIn.SetValue(m_scale);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _scale = m_scale;
        float _pow = m_pow;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ScaleIn.IsLinked());
        ImGui::SliderFloat("Scale##BarrelDistortion", &_scale, 0.f, 3.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_scale##BarrelDistortion")) { _scale = 1.01f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_scale##BarrelDistortion", key, ImGui::ImCurveEdit::DIM_X, m_ScaleIn.IsLinked(), "scale##BarrelDistortion@" + std::to_string(m_ID), 0.0f, 3.f, 1.5f, m_ScaleIn.m_ID);
        ImGui::EndDisabled();
        ImGui::SliderFloat("Pow##BarrelDistortion", &_pow, 0.0, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_pow##BarrelDistortion")) { _pow = 0.25f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        if (_pow != m_pow) { m_pow = _pow; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        if (value.contains("pow"))
        {
            auto& val = value["pow"];
            if (val.is_number()) 
                m_pow = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["scale"] = imgui_json::number(m_scale);
        value["pow"] = imgui_json::number(m_pow);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uef62"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ScaleIn  = { this, "Scale" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ScaleIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_scale           {1.5f};
    float m_pow             {0.25f};
    ImGui::BarrelDistortion_vulkan * m_effect   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6327;
    const unsigned int logo_data[6328/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x2e50af89, 0xd2cf1314, 0xb7e3efbc, 0xe1894e88, 
    0x44143b2b, 0x402b7963, 0xf94826ed, 0x0f008191, 0xbf4e5de7, 0xa98bb6ae, 0x81766958, 0x2ebd531f, 0xadfef346, 0x472c4915, 0x9c01645c, 0xbcd62375, 
    0xd590f647, 0xe91cef3c, 0xee506c3a, 0xc67c585b, 0x16f3f394, 0x607a1c18, 0xfe9cfef5, 0xd5394137, 0xeda75e8a, 0xb6454dd2, 0x196df862, 0x2ab78baf, 
    0xb6b72b9d, 0x2f1fed94, 0x7ce25a1f, 0x3c61bb33, 0xb5355b90, 0x855da436, 0xd1d541bc, 0xf05419b7, 0xfce83e46, 0x938c5ef3, 0x39b4b172, 0x59e74e61, 
    0xf93d6f6b, 0x1d082022, 0x5d318e59, 0xbff09d06, 0x3cd4d45d, 0xb0319657, 0xcf4a0260, 0x14723d92, 0x5ba235d7, 0xb965c43a, 0xb811206f, 0x1f201886, 
    0x67aff75c, 0x99f65bf8, 0x0e1c0f04, 0x47184af0, 0x9cbc813c, 0x71b8f30c, 0xf81d87d9, 0x168e52af, 0x5752da94, 0x377e0c3c, 0xd43c4a11, 0xe7895fda, 
    0x71f8359e, 0x4c2ff8ad, 0x16d4508f, 0x70275bde, 0xbbac358d, 0x90e9b182, 0x0de44fc1, 0x938c5770, 0x2a5bbe5a, 0x6a8fe354, 0xb647cbfb, 0xf39641b7, 
    0xfd869f2e, 0xe8830ae8, 0x71cdf507, 0x00ff141f, 0xfc0ccf66, 0xbcb8b54d, 0x397c91d3, 0x7f8969e2, 0x00ff5ab7, 0x846db8aa, 0x8d339904, 0xea92b6bb, 
    0x4e1e6037, 0x93a9d26b, 0x3da9b9b6, 0x1b2e1e7b, 0x31f92c89, 0xf2aff950, 0x4ff8723e, 0x63da48ac, 0x9a31dcd9, 0x79ac5c18, 0x5e1fe503, 0xc634dfb5, 
    0x675b1629, 0x95432568, 0x7d2a3874, 0x3b5eed41, 0xf7cac6f0, 0xd7349ec3, 0x46ae37bc, 0x91a51af6, 0x3b77d6da, 0xc33372a3, 0xb50d38aa, 0x721c0480, 
    0xe7626b30, 0x7ca609c7, 0xbac29744, 0xd36cc793, 0x9fd62ddb, 0x1305d270, 0x4034c482, 0x8deb3236, 0x41f05cd8, 0x1367bee2, 0x2b49fb45, 0xa7ad8f6a, 
    0x490a52c9, 0xe2fbcee8, 0x2ff583d7, 0xfc677a88, 0x2d343d2c, 0x0b71f6cc, 0xb0dc7a3d, 0x52cb2f4f, 0x8033e152, 0xa30c0741, 0x23c04890, 0xf1c5f138, 
    0xb2155e04, 0x99b85d93, 0xd274edad, 0x8b4a32b7, 0x1ea480b8, 0xfcf47c07, 0xf062af79, 0x1fb5885f, 0x1b82f809, 0x7ccc09eb, 0xe6179aed, 0x793fe229, 
    0x19a97b1d, 0x201875fa, 0xfdeefc1a, 0xd823bea0, 0xa5f8467c, 0x3068dcac, 0xec84afb5, 0x1e4da5ee, 0xd95746ce, 0x02732319, 0x5c0982a4, 0x8536128c, 
    0x05acaef4, 0xc8e56209, 0x269e5bf6, 0xd3cabb2e, 0xc39fae8d, 0xd0e9a7fa, 0xfd485ffb, 0x6a10feb9, 0xd625ef56, 0x48a477bd, 0xbcc853ae, 0x616767d3, 
    0x1203f381, 0x3992e3ba, 0xd3f1e039, 0xb5e1bf37, 0xd07f0cfe, 0x9400ffe5, 0x33fedfbb, 0x5cd3985f, 0x46b60df9, 0x808c338e, 0xcf1407f8, 0x00ffc7b7, 
    0xc5fca03d, 0x75f6377d, 0xfff0ec3e, 0xfca7b500, 0xf80afda8, 0xf8deab25, 0xce4de2ef, 0x96b0a9b1, 0x2d2f1be2, 0x80280363, 0xf9e79fe3, 0x0bf105d7, 
    0xc5ef1a57, 0x245c112f, 0x489170ad, 0x847feab6, 0xb6effe05, 0x79f2fa49, 0xffd76bce, 0x3acd6500, 0xb85c2f2f, 0x1acdc745, 0x18c94936, 0xe0b5fe38, 
    0x433df2a6, 0xa2afd556, 0x79718b52, 0x763d282b, 0xc9733bee, 0x8caf18e7, 0xa6ede3a6, 0x3e56b6e2, 0x26c5dded, 0xe5f045cf, 0x11bcd89f, 0x374c6bad, 
    0xb56168cd, 0x5a2a0f81, 0x7bccea60, 0x1c4955e5, 0xe93923f5, 0x20567851, 0xbc918ae8, 0x46c0fc93, 0xe33f7117, 0x37fa76c5, 0x7e6fac84, 0x9b9ae902, 
    0x7173472a, 0x95317771, 0xe628f99d, 0x18c8c031, 0xc34a0708, 0x695184f0, 0xc8f256d6, 0x5888b78c, 0x30722ec9, 0x9f510072, 0xad47bd42, 0x724a4a6d, 
    0x3509ba95, 0xa7d3cdc9, 0x2dfceec8, 0x458959a3, 0xee56a6c6, 0x2256ce68, 0xf188a1db, 0xb8f3f18c, 0x7a06bee7, 0x61d15e71, 0x5718c5ab, 0xce81de5f, 
    0xcffd3de6, 0x78bd67f8, 0x2289af3d, 0xba986dd3, 0xb6e59110, 0x71003863, 0x13d7fadf, 0x711bed07, 0xdfeef8a5, 0x63bab948, 0x62123aa5, 0xc84dd982, 
    0x0bae18f9, 0x72869d7c, 0xabbe667a, 0x5dab8503, 0x5cf9085e, 0xaaf8d3c1, 0x3f9becb3, 0x6c5b1812, 0xf064b2ce, 0xdaa3f018, 0x52bcecb7, 0x2179f1ec, 
    0x8be13512, 0xf0cf73b6, 0x83aff7f4, 0xc1dadfb5, 0xcd1b3dfc, 0xc3dcab35, 0xbd2bbb1a, 0x063befba, 0x0324607e, 0xb5bfa7d3, 0xe9ec577a, 0xf85ea3f1, 
    0x727569d1, 0xb2b3d734, 0x4fd04d92, 0x874624b2, 0x79008f70, 0x2bb7fb8e, 0x630c20e7, 0x553aec15, 0x3ed4daf0, 0xd530a45a, 0x3eb58c74, 0xe1a9f884, 
    0x4ce23fed, 0x5cea2d9a, 0xa4b70e45, 0x67da5619, 0xc9461319, 0x7e4ec0f3, 0x81515950, 0x8c7105e7, 0xbfe52331, 0x4fb25f8c, 0x783abe8b, 0x7a37c2a3, 
    0xe8e1af4c, 0x732de6ed, 0x0d284faa, 0x72901a6f, 0xb99c0f91, 0x1cc8db38, 0x7eea4812, 0xecf0b0ba, 0x735e1b36, 0x6e9c5ce7, 0xdf836375, 0xea2a7fd0, 
    0x5c7723ac, 0xb61fab0d, 0x57e41f78, 0xaff1b014, 0xac965889, 0x4afddcd7, 0x17ae368e, 0x5d242c0f, 0xba2e4fd7, 0x7f96cf7c, 0x33834f6c, 0x57f64778, 
    0xe1a33ef1, 0x6d756ff9, 0x780bd64e, 0xcd491eb5, 0x34a948ab, 0x638c47c0, 0x02729821, 0xaf019e64, 0x780b3fcc, 0x7ec5e372, 0xb4d1b323, 0xbb4b8ee4, 
    0x14c71187, 0x8c048492, 0x0c3c19b1, 0x0ff56b80, 0xd6f8caf6, 0xc53fe087, 0xbc4d07bd, 0xdb5a76f2, 0xb935b358, 0x50279924, 0xf90892c9, 0xe30065d1, 
    0xd7540e8c, 0xb100ffc4, 0xb9ce817f, 0x7e7d0af1, 0xd8341552, 0xe45d23d9, 0x18ae3333, 0x5fc018e3, 0xe675d471, 0x42a351b5, 0xd918959b, 0x9c981a17, 
    0x4c1c455d, 0xd85bfeaf, 0x9fc0dffa, 0x089fb40c, 0x4fdb6af8, 0xa2adf2b1, 0x4a3e7619, 0xacc74abb, 0x9f3c488c, 0xbada81d3, 0x6d46f80f, 0x3feae7bf, 
    0xf04f06fc, 0x0e5216ad, 0x03380a07, 0xd60793da, 0x725366be, 0x027db66d, 0x63ad04a7, 0x209ffd95, 0x33c0cf86, 0x678a90c9, 0x81634726, 0x02fe81bb, 
    0xa4d057be, 0x528c55fb, 0xcb650aed, 0x490646e1, 0xbea8afc9, 0xfce5410c, 0xb114791a, 0xcd48dd33, 0xb74bc49e, 0x7c45c18f, 0x207be1d9, 0x45747ab6, 
    0xc3408533, 0xe135e33e, 0x51bdd7e1, 0x3ef5ebbe, 0x7fc9d9c5, 0x6ca58f5d, 0x536d2b35, 0xf4f065f6, 0x97cc7297, 0x1ab7447a, 0x9d913452, 0x04e341ae, 
    0xdb08980f, 0x51472af0, 0xac7d695e, 0x4a73f8d9, 0x489ea94b, 0xb8bcd56c, 0x92136296, 0x03c8c049, 0x75fe783f, 0x64ac1ea7, 0xa19d3ef0, 0xc15b23cb, 
    0x6adc5fa7, 0xc7c33927, 0x1fc9a822, 0xb53e6054, 0xcfc4e7f2, 0xbf78df1c, 0xb44ddec4, 0x62872fb3, 0x271b9674, 0x44dcf2c0, 0x59fcb054, 0xa1aff7bb, 
    0xb46eb0ca, 0xdfeeaddc, 0x62c6c053, 0xd3a682e3, 0xefcbeede, 0xc47ff124, 0x51c753ad, 0x955157c0, 0x64a6e9b4, 0x1a81cdd8, 0x1d199765, 0x9e93e340, 
    0x3baff709, 0xad913e2d, 0x68fbe1c9, 0xfb6bb926, 0x268a6390, 0xd2369439, 0xb0240580, 0xa9df8300, 0x2c3fbca8, 0x5cf2d6d6, 0x331b2f94, 0x517e4204, 
    0xe84070b8, 0xe3f2334e, 0xec7ff635, 0xca03f0c3, 0xeb1f7fb8, 0x7bc1627a, 0xdb712c32, 0xedf6fdbe, 0x9000171e, 0x65009417, 0x8c33ee40, 0x6b75f793, 
    0xd14a0d47, 0x123ef4d1, 0xadbaf83c, 0xfc61e6cb, 0x7f15f80b, 0xc2529de2, 0x63c9767d, 0x8a672099, 0x0b19f6e6, 0xdd0f0a44, 0xf703c080, 0xa2bb7d8d, 
    0x6de16dc9, 0xedd04f17, 0xb7378263, 0x31278eb5, 0x20e4d026, 0x0003d85d, 0x237e59f1, 0xeef0b3b8, 0xb7eaa68f, 0x0811600e, 0x075c81c8, 0x0a5b0874, 
    0x1120e709, 0x74e79ad7, 0x3e691b9f, 0x16a4d531, 0x3b41f0d7, 0x490efd63, 0xe02813e3, 0x7d765700, 0xe515f738, 0xd2be71e3, 0xefdc5231, 0xa4ee65c3, 
    0x7ba4e3a4, 0xaca1ad9e, 0x0025a8f7, 0xcd08beb2, 0x6b3c9e7c, 0xe2ebf8ae, 0x8500ff75, 0xddac7dfc, 0xd4154958, 0x83ad0deb, 0x71146d49, 0x0aa52806, 
    0xe0aec0f0, 0x6039395b, 0xece3005b, 0x41dd0acf, 0xc25174f6, 0x0ee011a8, 0x3f8baff8, 0xf0340b6d, 0xf073ed87, 0x478055bf, 0x7dd16a1a, 0x23d7588a, 
    0x9e4c3970, 0x71851bc7, 0x2ad25ec2, 0xff75253d, 0xd0b80400, 0x6d37298d, 0x2ff3a963, 0x8bf143ed, 0x642ebec3, 0xf4823ff0, 0x090f5b8b, 0xef6e57e8, 
    0x5c2b2aa9, 0x1460376a, 0xf93af367, 0xfc0c9c43, 0x2e7a0cc7, 0x2df6f73d, 0xbed3d1f0, 0x90a79b14, 0xa46e6f48, 0xef0e50b8, 0x99407829, 0x318000ff, 
    0x35c762c7, 0x8de6cdf0, 0xa36c9a37, 0x92b9e48d, 0xbb83c2e8, 0x533fe23e, 0x093fa65f, 0x0ade3cfc, 0xa69d1ef0, 0xa2180ac3, 0x6e454185, 0x1c03aa72, 
    0xd604c9f7, 0xa252ab38, 0x6e8795a9, 0x4f526555, 0x5991a553, 0x72538c1c, 0x23ad9ffe, 0x8ea536eb, 0xd4ddc8f2, 0xf66f4aaf, 0xf4fc9fc5, 0x78cdf73f, 
    0xeab1abfc, 0xc0cf9c73, 0xc0e78dc9, 0x3f2e94e4, 0x1fc866d2, 0xbec2f0f5, 0x79aaf076, 0xf485effa, 0x55a7dee6, 0x36d682bb, 0x55f7fd51, 0xbc0f7ace, 
    0xb3d7c03f, 0xd3f7c67e, 0x3507bf6b, 0x9e9117bb, 0x5559b558, 0xaa4aac4c, 0xe98153ee, 0x538f63c8, 0x25c46bee, 0xef342ed6, 0x94bdd800, 0xe4a72e30, 
    0x833a3449, 0xec5be683, 0x65e3b551, 0x59ca46c3, 0x0439f50e, 0xcb15a867, 0x8ba76097, 0x1f0fcfc5, 0xd87be29f, 0x6168649c, 0xf9bf759d, 0xd7f8cdd8, 
    0x57cb0ef1, 0x65a5bef1, 0x83b05aa2, 0xba4d8fc8, 0xeee188bb, 0x46bc4d84, 0x82420080, 0xbc9f0d39, 0xc46bd006, 0x622e74fc, 0x4cfa24f1, 0xb6a62dae, 
    0xf9761608, 0xfb40294b, 0x63759c73, 0x7e75b5df, 0xd0a3d431, 0x0a00fff5, 0x7b6bb186, 0xb8a71139, 0x919598b8, 0x31f691a4, 0x145c0f79, 0x61384fce, 
    0x7c65a5d3, 0xd4a0d360, 0xb1c55bac, 0xe235544e, 0xd7a1ee69, 0x7d11f16e, 0xc63380c0, 0x313d7206, 0x3fea4fc6, 0xc281a557, 0xab7a31ba, 0xc455991f, 
    0xe755c655, 0xf67fa997, 0xff7cf87f, 0x7f7c1300, 0x716d910e, 0x74da68e7, 0x4abbddf0, 0x350f4bfb, 0x4805467e, 0x7e708661, 0xe9579c51, 0x6b3dc4df, 
    0xf02df84b, 0x6d6eefbd, 0x9e6964fe, 0x0951580b, 0xb11dd591, 0x12b82bb7, 0xc43f38b8, 0xefe56b3d, 0x1ac2cbd8, 0x00ffc22f, 0xc4cf5a81, 0xb0c4109f, 
    0xa09992bc, 0x13e9b637, 0x638c105d, 0x0b722686, 0xc0b6aae4, 0x6b90e4dc, 0x55f1b5bd, 0xc69bc6f7, 0x5be6d6bf, 0x4fe22ebd, 0x9a4dd332, 0xc65bdd3f, 
    0x92d9c0d9, 0x7a2e5432, 0xd79c3cf5, 0x1cb163c8, 0x59f4b1d3, 0x4c2c5f66, 0x6f457bad, 0xc6cbf9dc, 0x8d7fb53f, 0xcdaa5b7c, 0x6b713a34, 0x5bdb3c0f, 
    0xe604cbdb, 0x2be6c638, 0x0c4889f2, 0x828e6303, 0x4a030dbb, 0xab999ef1, 0xf1231ee9, 0x1df6bf25, 0x3704a5be, 0x591a1756, 0x09290392, 0x0e648504, 
    0x89c41577, 0x0d0982ca, 0x747b45ce, 0x8aaeb37f, 0x95c52df2, 0x32089f86, 0xd9a7a0fd, 0xbffe2e77, 0x767ae474, 0xe81b8fad, 0xa48f364f, 0x4572ead8, 
    0xd9d47476, 0x8b6a446e, 0xda6d600c, 0x010006aa, 0x45c07f10, 0xfd744e70, 0xf73e6e93, 0x6a98f4a9, 0x54d72915, 0x6e8793b9, 0xfcaf49a7, 0x17f0bb59, 
    0x12affbc1, 0x3df5358d, 0xde5aee4d, 0x7c36d2ce, 0x3a4bfec8, 0x3962a864, 0x77633b08, 0xfbfc8a51, 0xbfe28df8, 0x169f6a13, 0x00ff25bc, 0xaa2f4009, 
    0xa696ed35, 0x2c73561a, 0x3156214b, 0x01c4cc12, 0x57d0c7e9, 0x1e5e8ce8, 0x673fd5b3, 0xd9a759bb, 0x6574ad34, 0xca0c2151, 0xa3120aea, 0x7a02008c, 
    0x57d4c7f2, 0x75c7dfe7, 0xd158fc84, 0x9b1bc6d2, 0x371e61bd, 0x76655275, 0x348a8524, 0xe0f0b7e4, 0x75c5b82f, 0x713a6952, 0xe855afb6, 0xf3686371, 
    0xece2b446, 0x7e4ef9a2, 0x5ad7c3cf, 0x6125ed87, 0x1dc6daa4, 0xca695ed3, 0xcc220c1c, 0x445fbfd2, 0x5fe1c743, 0xb2206ba0, 0x02b748b7, 0xfda44022, 
    0xf0c57c05, 0xf1b24137, 0xf11ded1f, 0x671fc41b, 0xf5d3a0f3, 0x9cb3e109, 0xf736aa8c, 0x068eb40d, 0xce41f042, 0x8ab8edd7, 0x9e561bfa, 0x108e5756, 
    0xd9214dd2, 0x9825af1a, 0xad03009e, 0xb4978d61, 0xf2d8a3a8, 0x83e5f170, 0x7d16ab6f, 0x6385445d, 0xe0c079b6, 0x6758c6ba, 0xd8fea3d2, 0x97f0f96f, 
    0xf8b7fcfe, 0x1b7ed157, 0xdaa673f8, 0x35b0b668, 0x47929c85, 0x25cda31a, 0xc04ab3b2, 0x7724b90c, 0x00ffa735, 0xff990e08, 0x0ffb4000, 0xf04f04fc, 
    0x841936af, 0x1b2457f9, 0x4fe53447, 0x149fdd99, 0x8fdac2fe, 0xab15bcdb, 0x6fb9d3a6, 0x0ac6f999, 0xeb018c32, 0x8af90d86, 0x5f192ff0, 0x139b064f, 
    0xb4bd2dbb, 0x99693757, 0x86ca088b, 0xf560141b, 0x8c173620, 0xd0dbe385, 0x9d6100ff, 0xdec1e74a, 0x1fbcd624, 0x6149dbac, 0x6cf302aa, 0x70db3072, 
    0x75a3e718, 0xe14a8f1c, 0x7ba1697f, 0x5ca378a2, 0xe0d1d4b2, 0x77fee28a, 0x5dec11b5, 0x924de3db, 0x0cc74170, 0xb5e33e01, 0x7462d97a, 0xd9234973, 
    0x725555c6, 0x23d527e7, 0x8126f18a, 0x130b00ff, 0xd8421ac2, 0x79fa17ef, 0xa9dc3a61, 0x98db4200, 0xe04e8049, 0x6424601f, 0x0de8d9fc, 0xe29b0e47, 
    0x161e8acf, 0x2c2cd2b6, 0x67b4ecec, 0x4cdf33b9, 0x04e1d26d, 0x6502188a, 0x50fde7e8, 0xc371c6f2, 0x5e772476, 0xf1b3b301, 0xcea28306, 0xb6759aa5, 
    0x24b42dd9, 0x9dbfb52b, 0x1f276424, 0x87150a77, 0xd7e7585e, 0xfc2e7ed2, 0x1b7ed050, 0x2dd033fc, 0x52ad2dac, 0x308f4bea, 0xe1181169, 0x00d7329d, 
    0x59be48dc, 0xefb30bc7, 0xbd1d0a0e, 0x3467dccf, 0x476bb9a4, 0xf0e2635e, 0x57925c52, 0xce23bfb5, 0x8b7f6abf, 0x7e776b93, 0xa13bf815, 0x577892cc, 
    0xef569941, 0x77a90ccb, 0x20c1d874, 0x2341e5e3, 0x6edebf10, 0xad3e29e0, 0x9a52aff0, 0x8cd1163d, 0xd8a8537e, 0xd1fdec06, 0x6ba63fb7, 0x420d0be2, 
    0x6f29f5e5, 0xbecd9364, 0xc9e81659, 0x302f163b, 0xf5c4cc70, 0xcf932039, 0x7c575f73, 0x9dddf127, 0xf242abed, 0x1560bcaa, 0xffc4525f, 0xf3abf500, 
    0x314ad1cc, 0xfdd0a38c, 0x41aa8607, 0xf21e9cd5, 0x34ad0ffd, 0x6f4b143f, 0xaf80cd06, 0x5ce9f71c, 0xa9f58f0f, 0x6764d4a5, 0xc142e482, 0xcf284c95, 
    0x007a9ebc, 0xac8aeb48, 0x86b9219e, 0xa962cfc0, 0xdd8f8b3c, 0xe341db4a, 0x69b607d7, 0x358a47fa, 0xd242ed7b, 0xb14d8f74, 0x79e30996, 0x565ad23e, 
    0x26421e20, 0x64fa18d0, 0xe4f54e8f, 0x4ad65ec6, 0x5119fb2c, 0x62a46e70, 0xf85cd499, 0xe07378a0, 0x0677949d, 0xcb1b314b, 0xb771e67a, 0x70e71511, 
    0x1272e3c0, 0x9d5fb13d, 0x51a3f8b2, 0xebc4cff1, 0xdbda125f, 0xba5777ac, 0xb5b190b5, 0xc7980f12, 0x9bbbfc22, 0x8e53b703, 0xb63fecb5, 0xcfdbc71f, 
    0x11bece16, 0xaff35187, 0x8b9a72e0, 0xc4e4c3d9, 0x442004b1, 0x97ec4e70, 0x1883e739, 0x1fe6951e, 0xda243c0a, 0x11bc8bbf, 0x04782660, 0x934ef0f7, 
    0x0f42c86d, 0x3923d399, 0x17f88fdb, 0x4a473fb7, 0x9c8ab29f, 0x47f4929f, 0x4bdc98e7, 0x8ed151ab, 0x00ff6dd7, 0x1ff8e989, 0xf02a7c60, 0xb3147e84, 
    0x18a126f1, 0xb700fff2, 0x34f569b5, 0x398ea18b, 0xdca7da08, 0x1c09ce01, 0xf858aff5, 0x8937a049, 0x165b207e, 0x36c686c9, 0x0bf220b9, 0x63dcab70, 
    0x0ef89f93, 0xf62fd73b, 0x7ced389b, 0xc78c24b8, 0x5855da18, 0x7f4c4f61, 0xd95ff54a, 0x283bc6a6, 0x9be24b3c, 0xcfd298cb, 0xf78fb3e4, 0xe5110580, 
    0xc0c866e5, 0xe7006419, 0xaf7464b3, 0x4ee7b51e, 0xceb59352, 0x3d14954a, 0x60dda3c8, 0x218c6181, 0x52745c65, 0x6c930a7a, 0xce4fdf7f, 0xdff119be, 
    0xee7e14fc, 0xa5dac5cf, 0x097c84a7, 0xdaa1b90e, 0xa945d0ce, 0x0322eade, 0xc8e05474, 0x76bf158a, 0x24e7847f, 0x569c8173, 0x973cfc0f, 0x4bf41fc6, 
    0x1cfcdff4, 0x5537fe9f, 0x94244918, 0xccbfde57, 0xa40a9ef3, 0x3f00ffb5, 0xe0473cf2, 0xbdbbc40f, 0x9ff6e173, 0x4ebdebe3, 0x0ebf75c9, 0xda69d36a, 
    0x5365bf99, 0x04c49d25, 0x20c849c4, 0x2740a179, 0x07b0766e, 0xfc9f0e82, 0x4d4c2314, 0x14bec53f, 0xcaad48bf, 0xda292fb9, 0x1c36e97c, 0x5372bee4, 
    0xb78161e6, 0x1efe759c, 0xf04af663, 0x5ff580ef, 0x189eeb11, 0xda4cfbbc, 0xab66bb56, 0x49ec942d, 0x4a9021f3, 0x10a4ac8e, 0x19075700, 0xe70c3aea, 
    0x6c00ffdb, 0xc7d31a3d, 0x4f74045f, 0x9d749b10, 0x11ee8961, 0x8865f9a7, 0x72dd0ef9, 0x9e91e338, 0x6f0f8e4a, 0x47251163, 0x655ba331, 0x6174a62b, 
    0x6be0aab9, 0x2dbf9b61, 0x00fffc9a, 0x072fe543, 0x0d0fd2f8, 0x7b3a269b, 0x8e62af88, 0x9837dae6, 0x57a633ab, 0xe5b76179, 0x8ecf6793, 0x701c2218, 
    0x573cd06b, 0x8a6fdbe1, 0xb9b714de, 0x57937492, 0x24b30c2c, 0xd598f609, 0xb9339459, 0x2ab8cc50, 0xe60349bb, 0xe767d853, 0xdb7ba659, 0x3b333255, 
    0x495581c4, 0xf25354c8, 0xa3fbc9a8, 0x9bbdce9f, 0x068907e1, 0x794da289, 0x4e511721, 0x5fb864af, 0x16efaf34, 0x6008ad5d, 0xf24ec2df, 0x821ec871, 
    0x56c342bf, 0x122aa155, 0x2ae473db, 0x8fa4562e, 0x666cd51e, 0xa069b5d3, 0x86a6f265, 0x4f5958e6, 0x3f3d6518, 0x8a718f3c, 0x1621bce8, 0xd8a871a5, 
    0xd9b3bc2d, 0x1facf324, 0x47b8896b, 0xfc8e00cf, 0xe345c591, 0x785a10cf, 0xc51ac587, 0x971759d4, 0x2433ad57, 0x2649262c, 0x3eb22466, 0xc0780a17, 
    0x7a058edb, 0x087c83f7, 0xa31dfc6c, 0xb5c53cdb, 0x094afd0b, 0x67433052, 0x7524096b, 0x5000cec0, 0x0f70240f, 0x7d4cf87a, 0x2657744a, 0x95659ffa, 
    0xa75ea9d1, 0xafad5d34, 0xe0fb1ef9, 0x38eb5b6b, 0x6b6a5cf6, 0x2c00aa7e, 0x0f7aa1d6, 0xf067afa9, 0x97788ad5, 0x0d2e164f, 0x4d040e84, 0xca026c73, 
    0x5e973632, 0x20c9080e, 0x6d5e419f, 0xc2590367, 0x18383030, 0xbced6ac7, 0x751bab2d, 0x71247688, 0xd3c757f9, 0x937e66af, 0x673fa38c, 0xc713bfa4, 
    0x00ff24fe, 0x6fef34c1, 0x6fe23d7c, 0xc6537812, 0xcafa6b73, 0xa7475f33, 0xc9e4e95e, 0x22cf3278, 0xc8248b07, 0x53a180c4, 0xb0f68f04, 0x3afb53be, 
    0x3fe249d8, 0x0d77ea1a, 0x9ab6d660, 0xca6a4f4c, 0x494b56e1, 0x0e5401c9, 0x4e56c1aa, 0x7004779f, 0x13f52b4e, 0x14a3c6e1, 0xb1e5c9d6, 0x3db77304, 
    0x8e3fe32b, 0xc147fa37, 0x107f8e1f, 0xcd1d7a04, 0xf1f45aac, 0x461b93eb, 0x102f190f, 0x1c1c5452, 0x19312bbb, 0x6c472cc0, 0x9cd4d4d7, 0x7b5387a7, 
    0x49657eec, 0x8af22a7b, 0xfc0fa9d7, 0x8ef1242b, 0x69a36bb1, 0xbbbf9511, 0xb2686c93, 0x25c0546d, 0x9201d89b, 0x4a4f5f4f, 0x6800ffe9, 0xe1c7669d, 
    0x1f4bc317, 0x331b1a85, 0xf7ba7fcf, 0x2d67be5d, 0x9437df9d, 0x0c20de3f, 0x72a00a74, 0xf0859158, 0x845fe38f, 0x2f2e4db4, 0xa186fa89, 0x63619d3e, 
    0xd8a33571, 0x5cde043c, 0x62dc22c8, 0xc58d338a, 0x0acf28b7, 0x64c07237, 0x20be9f8f, 0xfed453fc, 0x5b9f7827, 0x6aad66f1, 0x3592cc2c, 0x2c875acb, 
    0xd57fa896, 0xb981b8c5, 0xdc6107f0, 0xc41770e0, 0xae88a970, 0xc7ee15a1, 0xa4d3537f, 0x53cf17e1, 0xda9e8862, 0xc8fe08dc, 0x82d52b25, 0x8d7ff8f1, 
    0xffb76d1f, 0xd20f9f00, 0x4d4b96bc, 0x4b925f63, 0x3aa916d1, 0x246bc748, 0xe8192064, 0xb5071da3, 0xad11fe37, 0xf57cfe63, 0xbde2fb6f, 0x8e1d42b5, 
    0x7da98a57, 0xea033f0c, 0x8a1fdad7, 0xdb74af2c, 0xf63e8dcb, 0xcd5dfe2d, 0x8914adac, 0xca706094, 0x8f041941, 0x57fa35a1, 0xbb34d2f1, 0x32f123f8, 
    0x944b941b, 0x10569fb3, 0xa618c879, 0x19c1b823, 0x0fce111c, 0xc9fc9a51, 0x86fce7f0, 0xe000ff6d, 0xaf09fa5f, 0xbf8d8fd3, 0x2cbe46f2, 0xced700ff, 
    0xa200ffaf, 0xd71c2bee, 0xef3f5dfe, 0xb24eb91c, 0xcfbabfaa, 0xd80e2fce, 0xf6c5be43, 0x7124cdfc, 0xce23879e, 0x3f12fa8b, 0x33b4ed1a, 0x797c851f, 
    0x23b87474, 0xbc2d89b4, 0xda6e0ab3, 0x04b176ea, 0x833376e7, 0x5720e38c, 0x9adee123, 0x8f77fd77, 0x434700ff, 0xf2bf645d, 0x00ffdf3b, 0x49fe15d7, 
    0xd2d1a15f, 0x9f7af9cc, 0xc1b73c1b, 0x8d37b0b6, 0x56488ee1, 0x80916368, 0x20954c8a, 0xbd230036, 0x77f08b7d, 0xb3568b4f, 0xe11df1b6, 0x684a8d7b, 
    0xc4b150d9, 0x0a70e876, 0x47018344, 0xadcf3dca, 0xcfe07f7c, 0xfdc71ef9, 0x0afd7f75, 0x1bf8c9be, 0x3e2200ff, 0xfee1fe99, 0xcf34bf66, 0xddfd8c1b, 
    0xd34ffd36, 0x662f7538, 0x63e1af9f, 0x99402dd6, 0x1823b78a, 0x9b737aab, 0x7e88a07b, 0xf583c35d, 0xeb1f96aa, 0xfcafd56a, 0xfff78f7e, 0x8b7cad00, 
    0xc2bfee3e, 0x67f87acf, 0xc6722479, 0x67c43006, 0xed2f78ad, 0xf81965bf, 0x1959e1cf, 0x8dfec59d, 0xb2dd68b6, 0x0b668eb8, 0xecfb76b4, 0x5e73ee78, 
    0xfddff0e7, 0x9fe21574, 0xfc00ffb6, 0x7f021f96, 0xfd5f22d8, 0x28ee6b1e, 0x9fb900ff, 0xdf3fe293, 0x22fe9c0f, 0x4edad6e9, 0x0a6d8f90, 0x2a6b9ea4, 
    0x005032b6, 0x3cd377bf, 0x57e0f564, 0x0fbff89d, 0x293de06f, 0xe6ca8a40, 0x473a7353, 0x1ff795c1, 0xd1fd7bbc, 0xa6c740fe, 0x00ff57fc, 0xf57f2c90, 
    0xb5e44fda, 0xff2b5ee6, 0xc3979000, 0xfe4ff7af, 0x97cdd584, 0x3dbbd13b, 0x5625cd0c, 0xa2b463cb, 0x3cd22b8a, 0x00d9ff73, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(BarrelDistortionEffectNode, "Barrel", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Distortion")