#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Saturation_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct SaturationNode final : Node
{
    BP_NODE_WITH_NAME(SaturationNode, "Saturation", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    SaturationNode(BP* blueprint): Node(blueprint) { m_Name = "Saturation"; m_HasCustomLayout = true; m_Skippable = true; }

    ~SaturationNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_SaturationIn.IsLinked())
        {
            m_saturation = context.GetPinValue<float>(m_SaturationIn) + 1.f;
        }
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Saturation_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_saturation);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_SaturationIn.m_ID)
        {
            m_SaturationIn.SetValue(m_saturation);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_saturation - 1.0;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_SaturationIn.IsLinked());
        ImGui::SaturationSelector("##slider_saturation##Saturation", ImVec2(200, 40), &val, 0.0f, -1.f, 1.f, zoom, 32, 1.0f, true);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_saturation##Saturation")) { val = 0.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_saturation##Saturation", key, ImGui::ImCurveEdit::DIM_X, m_SaturationIn.IsLinked(), "saturation##Saturation@" + std::to_string(m_ID), -1.f, 1.f, 0.f, m_SaturationIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_saturation - 1.0) { m_saturation = val + 1.0; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("saturation"))
        {
            auto& val = value["saturation"];
            if (val.is_number()) 
                m_saturation = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["saturation"] = imgui_json::number(m_saturation);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3a9"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_SaturationIn = { this, "Saturation"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_SaturationIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Saturation_vulkan * m_filter   {nullptr};
    float m_saturation      {1.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6014;
    const unsigned int logo_data[6016/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x6f695b6b, 0xb5e3ce64, 0x87d7e47a, 0x46b7d2fe, 
    0x2740774d, 0xea633ca9, 0x9f35d22b, 0x2cfc271b, 0xd90c3f2b, 0xdbb1aec8, 0x6eb4f3bc, 0x038c0709, 0xd7bc9e8e, 0xb3d4fe95, 0xf05b93fd, 0x2e09d0de, 
    0xf92bea47, 0xb1e408ef, 0x91bf7e30, 0x763a23fd, 0xfce66c83, 0x47fbc736, 0xf2aec093, 0xc74060de, 0x5ee7d54e, 0x74dbba1e, 0x1d49a6c4, 0xc55de941, 
    0x0b90c29d, 0xb17b8dec, 0xa9d42be8, 0xab336b7e, 0x8626970e, 0xe48c9fc1, 0x8555718f, 0xf022c9f2, 0xd2fbe07a, 0x5c9097e9, 0x0eaa7fdc, 0xb7430187, 
    0xd72bfd7e, 0xe8a309fc, 0x8998e5da, 0x0e299bf4, 0x5548e672, 0x47a5d798, 0x37229e2c, 0x31f148e7, 0x1a3ccdf9, 0x6fe5a6ba, 0x0d17e491, 0xfd3f9083, 
    0x12af8755, 0xed905961, 0xee53f978, 0x6fe86b06, 0xb708fc1a, 0xbea4d3ba, 0xb5b5c2f0, 0xdacc4af4, 0x4e22cf77, 0xd5cbcf00, 0x0100bb95, 0x7c05061d, 
    0x6ee9e2e3, 0x9dbb6bf4, 0x97b5503b, 0x9580bf4f, 0x0ae5d696, 0x1d1cb948, 0x1cc101ac, 0x20c84082, 0x570357d1, 0xbc9ad406, 0xb3e0515f, 0x4d67264c, 
    0x2eef27fb, 0x7cdb738f, 0x6d35702d, 0x61e2ca02, 0x0d10d3fb, 0xbc57ed83, 0xa8fb34e9, 0x649f2dae, 0x277438b1, 0xc63507b1, 0x69e852f8, 0xbbb315fe, 
    0x940fdb66, 0x0038c919, 0x335a937a, 0x1df6666a, 0x186830d1, 0x90435706, 0x2cbcd647, 0x9c9b124c, 0x8bca9d7b, 0x3af569e5, 0xc337da3f, 0xc2a3f871, 
    0xedc437fa, 0x19a97c39, 0x8855c352, 0x08e7649c, 0xd9703dc3, 0xe9113b5e, 0x9b783b5f, 0x071ed6c5, 0xb9deddf0, 0xd686f9a9, 0x0ac72a0c, 0xfd90a4e5, 
    0x3d991ed4, 0x87f415cf, 0x8900ffc3, 0x34803f3a, 0x172f7abd, 0x0e7e04cf, 0x5e90b5bb, 0x3452b98b, 0x0b80d3ce, 0xf7cd5d95, 0x91642440, 0x3cde955f, 
    0x3bfe9cf1, 0xa6ee4df1, 0xa4d8b14c, 0x9c75baae, 0xb7673f87, 0x420ff2dd, 0xe79e8c71, 0x4e19f435, 0xa495e30d, 0x00ff8ef4, 0x2b4e7ce4, 0x3c67f21c, 
    0xc77b5732, 0x7ef99fb5, 0xfea94927, 0x6f119fd0, 0xd3e70935, 0x68a84dbc, 0x68397236, 0x83eb34ec, 0xea8f511c, 0x55eb497d, 0xfc7de17f, 0xa100ff53, 
    0x00ff5ffb, 0x00ffd6c0, 0xbcede31a, 0x5e1de227, 0xe1617133, 0x845367dd, 0x36b60c92, 0xdd8a4c12, 0x301cb0d4, 0x52718fe3, 0xbfc200ff, 0x09fd77f1, 
    0x00ff269e, 0xe1bf4cc1, 0xd4b07e5f, 0xbfa0ac62, 0x3f1ee403, 0x36772713, 0x66f0877d, 0xe2f7e2fe, 0x4add5e33, 0x199ebb66, 0xf10f491a, 0xabfddd1a, 
    0x7c88a78a, 0xe7bbbb37, 0xbfac881f, 0x7c443083, 0x81c10e6d, 0xdadf49e4, 0x8b6bbfb7, 0xc37f5d64, 0x8f3b1907, 0x945f717f, 0xe3634573, 0x3ff4d365, 
    0x56f65765, 0x28f85f6f, 0x952974e1, 0x01170b2e, 0x3dbad671, 0xd905594a, 0xe181e5d3, 0x0e67c078, 0x06ea4130, 0xe71a843e, 0xde02373c, 0x6356366b, 
    0x703c7383, 0x70db7f02, 0x3fbdd6bf, 0x2d8b8ee3, 0x523dc587, 0x33ac02e9, 0x361421f9, 0x8e82e57f, 0x9aee00ff, 0x3a9794e8, 0x4d7242b8, 0xdf668f53, 
    0xb54437e4, 0x7301ce82, 0xd4dd2071, 0xffea7e82, 0xfff64a00, 0x3dfa8400, 0x707d53e8, 0x2f699b0e, 0x13cfb8fa, 0x53c8f53a, 0x3cf541f7, 0xe4f50efa, 
    0x53d315de, 0xe4e682cf, 0xcfca916f, 0xa5f0806e, 0xbfb7774e, 0x3d47324e, 0x0d34dc2b, 0x4c84ce7f, 0x37aab4a4, 0x6cf432bb, 0x7d45fef1, 0x4dd70e1e, 
    0x38533ef4, 0x9dfd74e7, 0x68b1a73e, 0x1a6f43f3, 0xa89608ac, 0x9280ed4e, 0x27a9e35c, 0xedc779ad, 0x4d0ff01b, 0xd9e1d1f8, 0x9e668bb5, 0x551ac6d7, 
    0x4bc2c284, 0xc4eda35d, 0xd2563423, 0x33df7de4, 0x09503700, 0x9bf6ea1d, 0xbb0433e2, 0x77336f24, 0xf9d7db38, 0x8db7dd56, 0x59424c5b, 0xca6db0d8, 
    0x3ad80115, 0xded3cf81, 0x4a9ddabe, 0x53c9e135, 0x3a597e54, 0x551d9c38, 0x1f8d8e5a, 0xad93e824, 0x83c100ff, 0xedae8c21, 0xf023f73d, 0x23c8c141, 
    0x2f5c73d4, 0xe27147ec, 0x14fe8abf, 0x5d7b74d4, 0x1dfaee1e, 0xb5a8fc19, 0x93601b26, 0xb783f2a9, 0x67d0c30c, 0x7dc51903, 0x0700ff7e, 0x5e118ff4, 
    0x36b6ee5d, 0x6ee41dda, 0x768236f7, 0x49ae24dd, 0x15627e7e, 0x86e164b7, 0xb72bc633, 0x3c8717f0, 0x4277f02d, 0xa02b3cd1, 0xa39536da, 0xad35fba9, 
    0xd82499b7, 0x2c88c55d, 0xf5d4cdec, 0xc9d73c27, 0xcd68f260, 0xd28ba756, 0x5febde3c, 0xbb4fdd9e, 0xe93c71c7, 0x124c8dca, 0x93f9acbc, 0xaa9ea6db, 
    0xff283fd7, 0x881f6c00, 0xc4c7da37, 0x3402af2b, 0xfee9d832, 0x79c79c1b, 0x4d6b8304, 0xff498e79, 0xc2416500, 0xb827f99e, 0x27f83eaf, 0xe2f3bef0, 
    0xb4a18c87, 0xdaa72b44, 0x80db7be2, 0xe56722bc, 0xf0c4ea51, 0xafd6d407, 0xc8e261ed, 0xd37e217e, 0x4bb5119f, 0x5e5bd20d, 0xc15b926b, 0x111676bd, 
    0x78c61162, 0xfa7a96cf, 0xffb0aff6, 0x847f6700, 0xf030fc70, 0xa0f21624, 0xfac7ad3a, 0x31a9e445, 0x01bb6975, 0x902a00c0, 0xebf57a3a, 0x3cd5dc5e, 
    0x47c90fb3, 0xd97ddea6, 0x5ba9d3e2, 0xe2ebae38, 0x25faef3a, 0x1c5e77e4, 0xe1976ef0, 0x4fdb1add, 0xa12c59b6, 0xdbb07085, 0xce1dd5b6, 0x9efad471, 
    0x91fda7f5, 0x3f00ff65, 0xf0f77f37, 0xb1bc8fd4, 0xabe1a6c9, 0xe4d4e6e3, 0xf4d92de5, 0xc94a112a, 0x66f0051e, 0x40c68704, 0x36e50d3f, 0x7fb5cadf, 
    0x54931f6c, 0x331ea3f0, 0xaca81f31, 0xfff3850f, 0xb4c2c500, 0xbf04ebc1, 0x9f740dfa, 0xb55b34b6, 0xe3e4090f, 0x57fae7f7, 0xafbfa8ce, 0x33f9e747, 
    0xa924e7ee, 0x9efae5a5, 0x48dde167, 0x91feba68, 0x4b9732aa, 0x9d2ed81b, 0x15497547, 0xaf81fc88, 0x6800ffa5, 0x75af690b, 0xa2d3be95, 0xa4d3bab6, 
    0xe5223f96, 0x22ee904a, 0x4e772365, 0xce57f9cd, 0x4d9a1d1a, 0xdd7d4372, 0x9f3382a7, 0x997acdf3, 0x867fa3d7, 0xc0f01d3e, 0xd320189e, 0x97c9b537, 
    0xd398272b, 0x4d9fe34e, 0xd21527b3, 0xd05afbe8, 0xc6d0535d, 0x354ae9ad, 0x9fb5b2d3, 0x1af4d7a3, 0x99b6fdfa, 0xba676e6c, 0x1daa35fb, 0x2ebf24cd, 
    0x8905c7f6, 0xda614fe8, 0xbfc4afbc, 0xe243dbb4, 0x2e7d3b6b, 0x0c6b61e6, 0x0969e7bb, 0x822b0c48, 0xe460bbe3, 0x241b0600, 0xfc8dd77a, 0xaabff84d, 
    0xfee9aaf8, 0xa783fec9, 0x24723cda, 0xb09c4c3d, 0x2739cfc9, 0xfddc0703, 0xc347f020, 0x1a8beffb, 0xa38396bd, 0x24d4b586, 0x4e1317b9, 0x016f9114, 
    0xf420cc27, 0x01524862, 0x013d39c7, 0x6e79ebc7, 0x4d054b5d, 0xeebdaed6, 0x3ff2f4a9, 0x89f3cc34, 0x1c7b6a62, 0xeff5d12b, 0x017de4e9, 0x1f8a3fe1, 
    0xf8267e16, 0xdec3df8e, 0x655b7b0b, 0x5df328b8, 0xfb25445c, 0x925b0c24, 0x01e78edb, 0x4e9e737d, 0xdff63507, 0xfc15edc3, 0x3efde135, 0xfbe3660d, 
    0x040bc443, 0x17747769, 0x46c1b46a, 0xb66c07f2, 0x99575c4f, 0x69f82dfc, 0xd20dfca1, 0x6ed3b064, 0xd8fbcbbc, 0x95a76863, 0x40269b87, 0x23e3000c, 
    0x529f04e5, 0x7cdaab3d, 0x89976213, 0xf9365ee7, 0x6e0f8e98, 0x654dfd9c, 0x9d50c48d, 0x24491a65, 0xe3c35179, 0xca39271d, 0x9f9cfbea, 0xe83fbe88, 
    0x2ed51c7e, 0x311a1d74, 0xc3142fe2, 0x9268a3fb, 0x29c170f9, 0xc72c0919, 0x50761c20, 0xf98a634f, 0xfd90f683, 0x01cfb5a3, 0xb526cbde, 0xf8dc5aaa, 
    0xe2cdeaf6, 0xa53fbcd3, 0x329a1631, 0x672e9032, 0x37c84b6e, 0x93718812, 0xce011cf3, 0x1c4bedaf, 0x6b7f0cbf, 0x5a5d067f, 0xde69e5cb, 0x688a4526, 
    0xfffd85d0, 0x8faf2800, 0xbfe6ed5c, 0xb9d5753f, 0xc5851a37, 0xfd3dcbf3, 0xe799cbcd, 0x3e3b8b99, 0x4e92b8e3, 0x87b57e4f, 0x4eb8aa2c, 0x79ddeafe, 
    0x4f633fa6, 0xae04070b, 0x9a7c6de5, 0x35f69f3d, 0x4d7c74f8, 0xceabe1e3, 0x216d4ba2, 0x675cc677, 0xa790ed74, 0x1f3300df, 0xd3de577c, 0x2a90985b, 
    0x77bc02f4, 0x7ef85af6, 0x77f806fe, 0xabe8cea6, 0xe6475ca8, 0x2cc1adcc, 0x053f12e0, 0x5e033fda, 0x24ab73bb, 0x27e6b24d, 0x08fc8785, 0x6be3cf57, 
    0x27cd6a7b, 0xac3db474, 0x24295422, 0x6440eaba, 0x1fc93865, 0xdf9c278d, 0x419d3fde, 0xb903a126, 0xfe83542a, 0xd0ed37d5, 0xf5fdaffa, 0xec2a775e, 
    0x9abbe3fe, 0x0c1fce47, 0x273e4235, 0x00ffb669, 0xcf091e26, 0x6be67e1d, 0x3b6c7fd2, 0xc2477d37, 0x3f331040, 0x9fafa87f, 0x17ea0c3e, 0xd2687c72, 
    0x8ff27263, 0xd89d5cb3, 0xaf211f38, 0xb96bbfa2, 0x053fb519, 0x7aad9093, 0xda199f15, 0x1eaf3932, 0xc65319bd, 0x7d764b53, 0xafb11a85, 0xfae7670e, 
    0xabe16d1e, 0xd7c227cd, 0x8baf5a97, 0xa2914eae, 0x41d2c05b, 0xb9e74e70, 0x919d4a95, 0x146901c4, 0x46f85782, 0x790d5e4f, 0x192fc437, 0xf1437c5d, 
    0xbdcdf595, 0x7a745a84, 0xb176c792, 0x08472694, 0x1df3098b, 0x67cc0d49, 0x53e18f0b, 0x9f5b319e, 0xf1a36e12, 0xd396a80e, 0x676fcdc8, 0x391ac53b, 
    0xa1c6120d, 0x85b17c72, 0x7e00bb24, 0xaf3839a3, 0x3f87f83d, 0x0bc62ff6, 0xfebe6088, 0x348eb4c9, 0x5895dc58, 0x18c28c23, 0xe0f253ed, 0x3d893fb9, 
    0xbb8cf6eb, 0x74e5c320, 0xb9ac8e63, 0xf9b3eda4, 0xa7fcd0bf, 0x3831cf37, 0xb0b044cc, 0xdf6e8a76, 0xfe70ea97, 0xaf676332, 0xd05c5a6a, 0x5f82b817, 
    0x305baab2, 0x47e0a2cb, 0xfc70b0b5, 0x1846e828, 0x817e0580, 0x053ecffe, 0xc34fe083, 0xc3eaa941, 0xf1373eed, 0xeced451c, 0x201fa7f2, 0xe5c64950, 
    0x72324689, 0xbee2c472, 0x820ff06b, 0x6fe231fc, 0x87f8108b, 0xf0264955, 0xe36c858f, 0x95547b6d, 0x77d7ec53, 0xc8008328, 0x1c23c14e, 0x2d81bd81, 
    0x6b92f1e5, 0xfc0fbed2, 0x2b7ed657, 0xf15493f8, 0x6fafaa46, 0xe9a43c6d, 0x934f669a, 0x2a865aa7, 0x030f4490, 0x1f880585, 0x6b9e6433, 0x7b9c73e7, 
    0xc2d794e4, 0xdccee6df, 0x238e2c87, 0x1d150a19, 0x5e767af7, 0xcc1d7b7e, 0x83f81f9e, 0x5fe32af1, 0x5ad7c68b, 0xc5569a4e, 0x7d3a49d7, 0xd2aac49d, 
    0xb9463789, 0xf1480879, 0x47c6b8bb, 0xc2477bad, 0x4a7fcd0b, 0x18e247f8, 0xf56ef221, 0x304e03fd, 0x8cdbf95a, 0xca896566, 0xd9d90d33, 0xa4ca07b9, 
    0xde031c1c, 0x4698b595, 0xdec27283, 0xc4213a33, 0x63ec469b, 0x15fca6a0, 0x6fa845f1, 0x3d4d5b1f, 0x64daf9bb, 0x06f3238e, 0x18c38043, 0xe6ab1bf5, 
    0x2a61e2a9, 0xfcba5eb1, 0x3971d08f, 0x2b61a87c, 0xbab5f428, 0x795bdedb, 0xf1197c6e, 0x67d75c87, 0x67e1bdf8, 0x00ff2ed6, 0xf686a6b4, 0xe74beada, 
    0x02134159, 0x99512cad, 0x1e8cb118, 0x5cebf507, 0xd6e0a1b6, 0x59683fd7, 0x230e327c, 0xce97d7fe, 0x096a07c0, 0xa703df19, 0x475d310a, 0x5baf4bed, 
    0x6d98c4af, 0x7db5bcec, 0xa4eed532, 0x5ce5b668, 0xd0b101b7, 0xadcf03e0, 0x3fc37f7a, 0x7ea84302, 0xd7365ed4, 0xb6cd8365, 0x81ba2185, 0xd74296ca, 
    0xa79dab11, 0xa71be818, 0xa7daabf7, 0x6778f688, 0x9fddd652, 0x41c38f13, 0x3b285d63, 0x91fbd2a4, 0x2e9275f4, 0xb2056597, 0xce6bf59f, 0xaa384f7d, 
    0xcd8b3af7, 0xf0f6b672, 0x87d4d53d, 0x498a426a, 0x6d4a8f63, 0x380bc6fd, 0xaff53b60, 0xe031f848, 0x866ceec8, 0x960075b5, 0x90cfe9ea, 0x269fc7d2, 
    0x912bc031, 0xdaa33ec1, 0x68a552be, 0x4baba2e1, 0xcde2df56, 0xbb72c9aa, 0x3ff8209c, 0x09441de2, 0x466b4be5, 0xa4a9fe61, 0x0e7c0fe4, 0x91c27fb4, 
    0xb5e77fd7, 0x3ffcfdaf, 0xa64f5fe1, 0x0a500085, 0xeb561fab, 0x83c2fe4e, 0xfac779fe, 0x77ccf5d1, 0x11af7864, 0x31f9b94b, 0xffdf27fb, 0x4b7c6a00, 
    0x0175a4f3, 0xb14fdd2c, 0x57f92339, 0x95b57fd1, 0x823f2dac, 0xeda87b96, 0xdfc6da87, 0x1ce61330, 0x808e978f, 0xf3959efa, 0x371dc02f, 0xf149f855, 
    0x22dee828, 0x7a737bb1, 0xa3c8d0ae, 0x24192b86, 0xbe62dc83, 0x2cb2fd90, 0x7ac3e392, 0xbc21a57e, 0x3547a6d9, 0x6a14fadf, 0x6d2176e5, 0x148058ce, 
    0x1ecba063, 0x185d83c3, 0x52fb0b9a, 0x7d682b9d, 0x6c150fbe, 0x6797b70f, 0xe7e3e473, 0x1ce2ab78, 0xe48d76d6, 0xec9a6742, 0x911909cf, 0xb622990f, 
    0xe77e953d, 0xa8d79c41, 0x2de15b78, 0x4eadc5af, 0xedd74adb, 0x940fad6e, 0x0ca136cb, 0x89663962, 0x69837549, 0xaf723ece, 0xc64f749c, 0xb7c04fbc, 
    0xd3209e2e, 0x3583bbb5, 0x4b3c9bb6, 0x2911d714, 0x5ad83cde, 0xb4ebe920, 0x071db08c, 0xf8be576c, 0xe257c43f, 0x7dc5fe68, 0x8525de2c, 0xd2bb675a, 
    0x14a93cee, 0x8805b393, 0x0f5bfd23, 0x9c23c7e1, 0x69b4efd7, 0xca9713c7, 0x91bc1f84, 0xa8ebc4f8, 0xb6b4fde2, 0xfb3f9e6d, 0x4d4e7c44, 0xc3975e73, 
    0x67412a7a, 0x9349dbe1, 0xd186b575, 0xb5339609, 0xc17c2053, 0x05476e01, 0x2ee030cb, 0xd7d9ef3a, 0x74ba96c4, 0x48b2d97f, 0xb3996717, 0x408cf7df, 
    0x7ebe9afc, 0xf027b4d7, 0x29678ff4, 0x9f3b340f, 0xa12be47a, 0x3cc0b561, 0x875e8fe0, 0xf86ab523, 0x1a97ed2f, 0xcf308cd5, 0x4cb2a42d, 0xfa988bb0, 
    0xf7a1c7c6, 0xe4d7f8e9, 0xd4099eb9, 0xed2d3aa3, 0xf7b9cfd7, 0xf0601699, 0x2d62d898, 0x3ff5f47b, 0x37c5db41, 0x3dd17696, 0xc0dc11a4, 0xe4816ce7, 
    0xc1c0cbda, 0x6b3d0703, 0xa6f8505f, 0x75f80dde, 0xa5c9deaa, 0xb4242269, 0x68ea9eb8, 0xb07173a7, 0x40393e23, 0x17b6600b, 0xf891ab3d, 0x543ab772, 
    0x265f5f00, 0x5946a8a8, 0xba9f82ad, 0x93aea907, 0xec00ffe2, 0xd1feabf5, 0xb7b6025e, 0x6debb5d1, 0xca18580e, 0x76c093b6, 0x952d1f5d, 0xca4f9d51, 
    0x8364ec0e, 0x5f71e8c1, 0xf68a8029, 0x43df7296, 0x19eb0cf5, 0xcb199e4a, 0xabd6b6d9, 0xfcd4fad7, 0x2fd4b7ea, 0xe27d613c, 0x97ec522d, 0xee32d4bb, 
    0x6e6fbac5, 0x0f1cf600, 0xfebbafa0, 0xf0135a07, 0x9cd545fb, 0x69a87303, 0xf723adb6, 0xc6582125, 0xd704fc4f, 0xc38ffac8, 0x1cfc101f, 0xe1b51ef1, 
    0x32e919df, 0xd89ebae8, 0x3c7c155a, 0xc37c1177, 0xc34186cc, 0x3cc878ae, 0xf5353874, 0x4fddc347, 0x1a3ed154, 0x3b1b56f8, 0xa36cee38, 0x70ea21d3, 
    0x1db79ce4, 0xf41586b1, 0x0bde8219, 0x33f7e96b, 0x6e0bfcf2, 0xaeebb49f, 0xf5ecacbe, 0x698b3cc9, 0xa136368b, 0xe7fa9a3c, 0xf6173ac0, 0x88f4837f, 
    0x44da5cf8, 0x940f3a4e, 0x095feb1f, 0x833c7e6a, 0xe4d37558, 0x9eb4bab4, 0x0fe44857, 0x3a03e01e, 0xe47504a7, 0xe343fb8a, 0x0f7fc607, 0x2ff00afc, 
    0xf8aea6f6, 0xac6d118d, 0x6b66d0ac, 0x51e10299, 0x27e3b917, 0xf99a64d0, 0x19615cdc, 0xb5bc56d3, 0xd52aad31, 0x3dd64e2f, 0xd783cc03, 0xf328fb3e, 
    0x2900ff20, 0xa79a995f, 0xa3f1d9ed, 0xee96be58, 0x0f0fb4c5, 0x86494859, 0xe15aecc1, 0xa4db4ee3, 0xd04f322c, 0x00ffab0a, 0xc7f1b30d, 0x1ebe83fe, 
    0x41c100ff, 0xebe200ff, 0xf7af92bb, 0xbaec7f4e, 0x88a72586, 0xc257f167, 0x287e828f, 0xa53ed9bb, 0xb5edcd35, 0xc7fbc9cd, 0x3fe3f216, 0x53afc8f7, 
    0x6675bafd, 0x451cfed2, 0x2a4f6614, 0x114ebce8, 0xcb00ffb6, 0x3c4f4619, 0xcd773cf5, 0xfc827f79, 0x7ea27319, 0x8a1bdecb, 0xae39e2e2, 0x667aad74, 
    0x52f08857, 0x3fc6a448, 0xbdd6bfef, 0x9eeaf633, 0x6103fc38, 0x34719b0c, 0x88bb0c77, 0x808d381f, 0x6bf4fdc7, 0x67691fb3, 0xafba7678, 0x598e9ed1, 
    0xbca61c37, 0xfd72f626, 0xe6ac810f, 0xa6c9e151, 0xc95d54f3, 0x10c71277, 0x2384cae7, 0xc4fb4f92, 0x1cdf912a, 0xf863aff6, 0x7579e201, 0x6ddd6e0d, 
    0x385db0c4, 0x5b9ae595, 0x1810838c, 0xb89373ea, 0xf10afa28, 0xaf39365d, 0xcf8ac20b, 0x3018ea70, 0x50c8c119, 0x03d76147, 0xf0815eeb, 0x2f2f0962, 
    0xb7374f13, 0xb28e1c7a, 0x6a7b6f49, 0x0c3749a6, 0x7d4c3666, 0x03cfa1d2, 0x5fef53a8, 0x5cd5e5ac, 0xc7d2256b, 0xcd8538e7, 0x18bf0b1d, 0xf5d4636c, 
    0x2f6c491b, 0x6269b52d, 0xbb3b92b0, 0x8600668b, 0x469244fb, 0xa50c0919, 0x11842822, 0xb55a4fd5, 0x77c2bff0, 0x3a131e37, 0x730da8cb, 0x6dc759ab, 
    0x20cbcf81, 0x7f5e1fc9, 0x635df32a, 0xdff1bd53, 0xcbbb8d8d, 0xd822630c, 0xafe501dc, 0x1dca1f95, 0x1948528f, 0xaf49f224, 0xe91cbeaa, 0x9a97ea11, 
    0x1182ad45, 0x7711cde1, 0x2da4eca4, 0xa0ddcedd, 0x82a27aa6, 0x273976c7, 0xcff9958e, 0x9c126310, 0xdf4d7494, 0x3600ffee, 0x18c3957e, 0x3c9f8815, 
    0xbdacecd5, 0xbf925f5f, 0x654f6de1, 0xa32cd1d1, 0x96020844, 0x81eb9104, 0xc07fbdd6, 0xb6c5c6ba, 0x5300e440, 0x15753c03, 0x3a2f82e5, 0xe3aa1322, 
    0x86075d81, 0x2c6f2375, 0x2b6bc748, 0x2be2c728, 0xdc158af3, 0xfa999426, 0x8d856bd6, 0xa9250d6a, 0xdfdafede, 0x2ffe2d09, 0x203ecdfe, 0x5b85b7ba, 
    0xb61b9ec4, 0xb84a637d, 0x63c0fb41, 0x0fc4d25d, 0x6118af5d, 0xb5a7508f, 0xa0878f78, 0xdac1335d, 0x98e4b225, 0x1e4c606c, 0x1fa3463a, 0xe09d7da5, 
    0x6d35f83b, 0x21f7ec2f, 0x31458a66, 0x19721bcb, 0x7a04c148, 0x6bf36b10, 0xe3b156e2, 0x2f1e865f, 0x6d9936f1, 0xe9fb1d7b, 0xe2d684ba, 0x972fead6, 
    0xdca66c60, 0xa4420172, 0xb1ef6b7d, 0x0995ce29, 0xdfea6fc3, 0x1fb6f8a9, 0xc1ea9c9a, 0xfdf3dbef, 0x67bfa60f, 0x568700ff, 0x4df13a7e, 0xc47fa9de, 
    0x98b0643a, 0xf27e00e0, 0x3e81db4d, 0x7a4f6fc3, 0xffdacff2, 0x7870c600, 0xd9c7e2eb, 0x4e9ac4d9, 0x0a450b81, 0x27a6e1ee, 0xa71e3012, 0x3ea0cf85, 
    0x29fcd2b5, 0x7ca7bff8, 0x6b3df83b, 0xbbc447f1, 0xea4e9d74, 0x7408eace, 0xcfb35828, 0x4055ac74, 0x92fae45c, 0xcad70078, 0x8fbac463, 0xd425b58a, 
    0x26fed36f, 0xb134f337, 0x73ea835b, 0xde0efbb8, 0xa593aff9, 0x1b2bb64e, 0x265a913a, 0x0f6dcfd7, 0xd3e90c7b, 0x646ff57c, 0xff7bbe95, 0xf9655e00, 
    0x9423adee, 0x3f0fa58b, 0x814c6df1, 0xa874f8ed, 0x7fa6ddfe, 0x87fc2fcf, 0xcfe27d5e, 0x5a76ea13, 0x9cbec5e5, 0x2f9a7df1, 0x4b822d93, 0xc79aa70e, 
    0xc78400ff, 0x87df5fc4, 0xf515f9fe, 0xb5140dcb, 0x742c9f47, 0xf8a59df9, 0xccfe551f, 0x7feb7036, 0x2e8a17b2, 0xcd13232f, 0xc41ab906, 0x62504eec, 
    0x00ff8121, 0xffa31a7d, 0xb9200500, 0x00ff7491, 0x22865b02, 0x5f896927, 0x5fad0072, 0x4cfe33d9, 0x00ffc5e3, 0xfd4f1ef6, 0xf0df58a1, 0x1ef52f52, 
    0xfdcbfa01, 0xf2df2a2b, 0x3ffac33b, 0x2f389cc9, 0x3de214f9, 0x7ff9c87f, 0x5e89b241, 0x4522c019, 0x71106c7b, 0xff73e1d6, 0xcc0fa000, 0xeaad41d7, 
    0x5ddadb53, 0xb0128678, 0xb6c8916a, 0x176a2ce9, 0x03b91062, 0xbdcf531f, 0xea7f6863, 0x7a00ffa3, 0x4a00ffd7, 0x8800ff2a, 0xbd4ce47f, 0xa5af00ff, 
    0xaa5f4bfe, 0x1f5d48c3, 0x9d893f0b, 0x01afc257, 0x2dfed6e8, 0x516ba4d6, 0x14ddf072, 0xfb7cdc8c, 0xf3e3c141, 0xb874a5af, 0x468130d6, 0x1d008002, 
    0x1abec2ab, 0xe2d1c87f, 0xfefdfa0f, 0x4edfbd82, 0x39ce5fed, 0xcc925af5, 0x6427a76a, 0xaee98fec, 0x394ea319, 0xb5a21665, 0xa555e74a, 0xf9cf968c, 
    0xd1b65ae9, 0x30109828, 0x2f6b0e72, 0xe7dfea4a, 0xffedb5d2, 0xa88fd600, 0x231b3eaf, 0xf475c6d7, 0xace1bb3d, 0x310c1bcf, 0xe5eb1de3, 0xd2bada8f, 
    0x77da3f1b, 0x18e3f251, 0xe7ecd3bd, 0xcf905b9d, 0x257fa6b0, 0xa4beca5f, 0xf2d771f8, 0x6b3f98af, 0xd639f98f, 0x4db000ff, 0x5fcdfe97, 0x00ff53a5, 
    0x43d75f70, 0xd9cafaf0, 0xc7b33c83, 0x5aa43dda, 0x2126d704, 0x8d298924, 0xab90c37c, 0xd90e9c8c, 0x842e5cef, 0x9fe1cb7e, 0xf3eb6b13, 0x88f0566a, 
    0x08f991e2, 0xb50374a4, 0x4fc43f7a, 0x3f6e15f9, 0x00ffe0eb, 0xfae635e8, 0x3f93fc5f, 0xd700ff16, 0xe655fe34, 0x57baede4, 0x3a73cf7d, 0xbb246af7, 
    0xbc821f1c, 0xfde26315, 0x845a6a10, 0x24752db7, 0x2ec718ac, 0x7bfa7bd0, 0xfc00ffd6, 0xfe0f2d2a, 0x00ff5e7a, 0xfe00ffdf, 0x1fc22fb5, 0xff6213f9, 
    0xfdcfae00, 0x7dafb42b, 0x47984fbd, 0x0000d9ff, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(SaturationNode, "Saturation", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
