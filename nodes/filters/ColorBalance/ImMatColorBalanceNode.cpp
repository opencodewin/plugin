#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "ColorBalance_vulkan.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct ColorBalanceNode final : Node
{
    BP_NODE_WITH_NAME(ColorBalanceNode, "Color Balance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    ColorBalanceNode(BP* blueprint): Node(blueprint) { m_Name = "Color Balance"; m_HasCustomLayout = true; m_Skippable = true; }

    ~ColorBalanceNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::ColorBalance_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_shadows, m_midtones, m_highlights, m_preserve_lightness);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        ImGuiSliderFlags flags = ImGuiSliderFlags_NoInput;
        bool changed = false;
        ImVec4 _shadows = m_shadows;
        ImVec4 _midtones = m_midtones;
        ImVec4 _highlights = m_highlights;
        bool _preserve_lightness = m_preserve_lightness;
        bool _ganged = m_ganged;
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled);
        static ImVec2 offset = ImVec2(0, 0);
        if (ImGui::BalanceSelector("Shadow", ImVec2(100, 100), &_shadows, ImVec4(0, 0, 0, 0), m_ganged ? &offset : nullptr, zoom, embedded ? 0.5 : 1.0))
        {
            if (m_ganged) _midtones = _highlights = ImVec4(0, 0, 0, 0);
        }
        ImGui::SameLine(); ImGui::Spacing(); ImGui::SameLine();
        if (ImGui::BalanceSelector("Midtones", ImVec2(100, 100), &_midtones, ImVec4(0, 0, 0, 0), m_ganged ? &offset : nullptr, zoom, embedded ? 0.5 : 1.0))
        {
            if (m_ganged) _shadows = _highlights = ImVec4(0, 0, 0, 0);
        }
        ImGui::SameLine(); ImGui::Spacing(); ImGui::SameLine();
        if (ImGui::BalanceSelector("Highlights", ImVec2(100, 100), &_highlights, ImVec4(0, 0, 0, 0), m_ganged ? &offset : nullptr, zoom, embedded ? 0.5 : 1.0))
        {
            if (m_ganged) _shadows = _midtones = ImVec4(0, 0, 0, 0);
        }
        ImGui::PopItemWidth();
        if (ImGui::Checkbox("Preserve Lightness", &_preserve_lightness)) {m_preserve_lightness = _preserve_lightness; changed = true; }
        if (ImGui::Checkbox("Color Ganged", &_ganged)) {m_ganged = _ganged; changed = true; }
        if (_shadows != m_shadows) { m_shadows = _shadows; changed = true; }
        if (_midtones != m_midtones) { m_midtones = _midtones; changed = true; }
        if (_highlights != m_highlights) { m_highlights = _highlights; changed = true; }
        ImGui::EndDisabled();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("shadows"))
        { 
            auto& val = value["shadows"];
            if (val.contains("r")) {auto& fvalue = val["r"]; if (fvalue.is_number()) m_shadows.x = fvalue.get<imgui_json::number>();}
            if (val.contains("g")) {auto& fvalue = val["g"]; if (fvalue.is_number()) m_shadows.y = fvalue.get<imgui_json::number>();}
            if (val.contains("b")) {auto& fvalue = val["b"]; if (fvalue.is_number()) m_shadows.z = fvalue.get<imgui_json::number>();}
            if (val.contains("a")) {auto& fvalue = val["a"]; if (fvalue.is_number()) m_shadows.w = fvalue.get<imgui_json::number>();}
        }
        if (value.contains("midtones"))
        { 
            auto& val = value["midtones"];
            if (val.contains("r")) {auto& fvalue = val["r"]; if (fvalue.is_number()) m_midtones.x = fvalue.get<imgui_json::number>();}
            if (val.contains("g")) {auto& fvalue = val["g"]; if (fvalue.is_number()) m_midtones.y = fvalue.get<imgui_json::number>();}
            if (val.contains("b")) {auto& fvalue = val["b"]; if (fvalue.is_number()) m_midtones.z = fvalue.get<imgui_json::number>();}
            if (val.contains("a")) {auto& fvalue = val["a"]; if (fvalue.is_number()) m_midtones.w = fvalue.get<imgui_json::number>();}
        }
        if (value.contains("highlights"))
        { 
            auto& val = value["highlights"];
            if (val.contains("r")) {auto& fvalue = val["r"]; if (fvalue.is_number()) m_highlights.x = fvalue.get<imgui_json::number>();}
            if (val.contains("g")) {auto& fvalue = val["g"]; if (fvalue.is_number()) m_highlights.y = fvalue.get<imgui_json::number>();}
            if (val.contains("b")) {auto& fvalue = val["b"]; if (fvalue.is_number()) m_highlights.z = fvalue.get<imgui_json::number>();}
            if (val.contains("a")) {auto& fvalue = val["a"]; if (fvalue.is_number()) m_highlights.w = fvalue.get<imgui_json::number>();}
        }
        if (value.contains("preserve_lightness"))
        { 
            auto& val = value["preserve_lightness"];
            if (val.is_boolean())
                m_preserve_lightness = val.get<imgui_json::boolean>();
        }
        if (value.contains("ganged"))
        { 
            auto& val = value["ganged"];
            if (val.is_boolean())
                m_ganged = val.get<imgui_json::boolean>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        {
            imgui_json::value shadows;
            shadows["r"] = imgui_json::number(m_shadows.x);
            shadows["g"] = imgui_json::number(m_shadows.y);
            shadows["b"] = imgui_json::number(m_shadows.z);
            shadows["a"] = imgui_json::number(m_shadows.w);
            value["shadows"] = shadows;
        }
        {
            imgui_json::value midtones;
            midtones["r"] = imgui_json::number(m_midtones.x);
            midtones["g"] = imgui_json::number(m_midtones.y);
            midtones["b"] = imgui_json::number(m_midtones.z);
            midtones["a"] = imgui_json::number(m_midtones.w);
            value["midtones"] = midtones;
        }
        {
            imgui_json::value highlights;
            highlights["r"] = imgui_json::number(m_highlights.x);
            highlights["g"] = imgui_json::number(m_highlights.y);
            highlights["b"] = imgui_json::number(m_highlights.z);
            highlights["a"] = imgui_json::number(m_highlights.w);
            value["highlights"] = highlights;
        }
        value["preserve_lightness"] = imgui_json::boolean(m_preserve_lightness);
        value["ganged"] = imgui_json::boolean(m_ganged);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf53f"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device                {-1};
    ImGui::ColorBalance_vulkan * m_filter   {nullptr};
    ImVec4 m_shadows            {0, 0, 0, 0};
    ImVec4 m_midtones           {0, 0, 0, 0};
    ImVec4 m_highlights         {0, 0, 0, 0};
    bool m_preserve_lightness {false};
    bool m_ganged {false};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5861;
    const unsigned int logo_data[5864/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x2f595b1b, 0x55e2ce24, 0x87d7e47a, 0x46b7d27e, 
    0x2740774d, 0xea633ca9, 0x9f35d22b, 0x2cfc271b, 0x590c3f3b, 0xdbb1aec8, 0x6eb4f3bc, 0x01c60d09, 0xe6b94ec7, 0xa6f6afbc, 0xe77aec9b, 0x49000287, 
    0x5f513f62, 0x959c619a, 0x4aa99f78, 0xe66c8b16, 0xfbc738bc, 0xaec09343, 0x4060daf2, 0x79b5e3c1, 0xb6ae87df, 0xc96431dd, 0x2b3da823, 0x4e9db3b7, 
    0x718dec0b, 0x5d4137cb, 0x9935bff3, 0x4db914bd, 0xec063e83, 0x8555e9e3, 0xf022c9f2, 0xda6970dd, 0xcdbddd5d, 0xd05b4cc6, 0xef7628e0, 0xf55aa7df, 
    0xe80300ff, 0x62b93efa, 0xc92a6d22, 0x48e672ce, 0x75d79815, 0x2bab0c3c, 0xb1f258f3, 0xca309c79, 0x3f9e8dfc, 0x061ee070, 0x35b1c23f, 0x9915c6e2, 
    0x958fd70e, 0xbe66e03e, 0xc087f184, 0xe9f42f98, 0x1b31bc6f, 0xac425f5b, 0xf28da7cd, 0x3f033847, 0xec56562f, 0x30e8c800, 0x7eced73a, 0x45ef922f, 
    0xb5d3b8bc, 0xfb74491b, 0x6d5909f8, 0xebc6506e, 0xc0dac191, 0x24c8111c, 0x2a0d820c, 0x67985a98, 0xacdc697b, 0x8f0f3f36, 0x5e6ff683, 0x7cdb73cf, 
    0x6d35702b, 0x61e2ca02, 0x062cdffb, 0xe2abf6c1, 0xb8fb7469, 0x645f2dae, 0x277438b1, 0xb82207b1, 0x0ddd09bf, 0x77b6c23f, 0xf261db6c, 0x00273983, 
    0x4a6b520f, 0xc1de4c6d, 0x030d26ba, 0x72e8ca00, 0x93d7fa08, 0xc9992b5e, 0xb5934a1d, 0x8ff6938e, 0x297edcf0, 0xf18fc6f0, 0x14514e3b, 0xaa63a98c, 
    0xce334ec4, 0xe17a8615, 0x47ec38b2, 0xe2eb7ca5, 0x78d8165f, 0x5a77c323, 0x1be6a7e6, 0x1cab3058, 0x4396962b, 0x647a54f7, 0xd1573cf7, 0x8ff805be, 
    0x480bf8a4, 0x6cf1e3d7, 0x2be1c9d6, 0xd70d498b, 0xe34824db, 0x41e1b0dd, 0xfeb9ab72, 0x241919e8, 0xbc2cbf62, 0xfc49e375, 0xdd8be279, 0xb122994c, 
    0xfb745d49, 0xcf7e0e39, 0x1ee4bb6f, 0x7b32c699, 0x97b3d79c, 0xb5b6be61, 0x00ff2d7a, 0xf87af9c8, 0x51b996a7, 0xfa78ef4a, 0x6d3af23f, 0xf885f64b, 
    0x3c7f7987, 0x35897ffa, 0x47d20a1d, 0x753a962c, 0xc7288ec9, 0xa43e75d0, 0xf0dfaaf5, 0x7f283ebf, 0xffaff9d0, 0x7f73e000, 0xbef6718d, 0xb10ef111, 
    0xf0b1b919, 0x42a9b3f6, 0x2b5b0649, 0x6e452609, 0x080e58ea, 0x3715f7f4, 0x16cf2bfc, 0x9dd000ff, 0x14fc5fe2, 0xf515fecb, 0x7494cabe, 0x3cce4751, 
    0xb95a2256, 0x83dfeb33, 0xbf17d737, 0xeaf6da11, 0xf0dc3553, 0x7f48d2c8, 0xedf7d688, 0x433c555e, 0x65dcbde1, 0xb2227efa, 0x11c10cbe, 0x063bbcf1, 
    0xfdfd703f, 0xb9f67fab, 0xfcd744b6, 0xb19c7130, 0xe02beeef, 0xc6c59239, 0xfab1facb, 0xb3b3bf5a, 0xc100ff7a, 0x650a4d38, 0xd8cc824b, 0x8fae755c, 
    0x78419653, 0x78a0f974, 0xc319305e, 0x817a108c, 0xb906a18f, 0xb7c00ddf, 0x9095d5ba, 0x1ccfdce0, 0xdcf69f00, 0x4faff52f, 0xcba2e9f8, 0xd5557ca7, 
    0xc52a502e, 0x4311923f, 0x2858fe67, 0xade9feef, 0xe1ca5c9b, 0x2eee3519, 0x5ba219d7, 0xb9006741, 0xea6e90b8, 0x7f753f41, 0xc28f7ba5, 0x23f5227d, 
    0x7490fb6b, 0xe43e49db, 0xeb75267d, 0x83eea790, 0x1df479ea, 0x293cc9eb, 0x059f27a6, 0x23dfc8cd, 0x14dd9e95, 0x774ea5f0, 0x324ebfb7, 0xdc2b3d47, 
    0x79100fb4, 0x969409d0, 0x66f74695, 0x3f9e8d5e, 0x0d6bafc8, 0x1ffaa66b, 0x7273993d, 0x6df64072, 0x55a06812, 0x454b754b, 0xc9013b27, 0x9ea48e73, 
    0xb43fe7b5, 0xa7fbec7f, 0xf5f068fc, 0x676ab1c6, 0x9386f1b5, 0x96b13061, 0x71fb28d0, 0xb415cd08, 0xcc3c1db9, 0x5b80ba61, 0x7ee9add6, 0xf2666824, 
    0xe7c2bcdd, 0xf2d72b38, 0xe3416ec5, 0xb711d377, 0xdbcaccc8, 0xec602c94, 0xefe9871d, 0x0aa54e5f, 0xc796e5d0, 0xd83afbc1, 0x0fa4aa5a, 0xd6497491, 
    0xc1e000ff, 0x7657c690, 0x1847f99e, 0x0439ed20, 0x866b8e7a, 0xf16489fd, 0x0a6fc567, 0xae353aea, 0x167d758f, 0x7a54fe8c, 0x49b00d93, 0xdb41f9d4, 
    0x33e87186, 0x5f718281, 0xedc1b75f, 0x7777c427, 0xcdbeed3b, 0xd2465ea2, 0xefacd95c, 0x935c49ba, 0x0a313f27, 0x86e189db, 0xbc2bc633, 0xfc861ff0, 
    0x436bf02d, 0xa0297cd0, 0xa395b6d9, 0x5b7bf48f, 0xb649327f, 0x2c88db8d, 0xf5d4cdec, 0xcfd73c27, 0x25c5f261, 0xaf8d1852, 0x15af3ea3, 0x733ab89e, 
    0x3bbb2bc3, 0xfc349dae, 0xdbefc90f, 0xdaf7c703, 0x9f2bc4bf, 0xd9323c02, 0x9c1bfe69, 0x830479c7, 0x72cc6b06, 0x0e2afb4f, 0x3dc9f714, 0x29f881eb, 
    0xe2f3bef0, 0xb4a18c87, 0xadd36444, 0xc0e53d71, 0xe14c845c, 0x3cb17a54, 0xab35f501, 0xb6f858fb, 0xb49f881f, 0x526dc4ef, 0xd79674c3, 0xf096e49a, 
    0x84855d6f, 0xcf384240, 0x5fcff219, 0x1ff6d55e, 0x96f0f5ec, 0x818fe1df, 0x339ded2d, 0xfe7edcaa, 0xba9455f2, 0xf082ddb4, 0x0ea40a00, 0xd77abd9e, 
    0x3430d4a8, 0x8ffc6979, 0x65a64a31, 0xf3add55d, 0xdca117fd, 0xdac177f8, 0x6b74875f, 0x64d93e6d, 0xc21586b2, 0x55d86ec1, 0x9f3aceef, 0x97d67a52, 
    0xfc974df6, 0x00ffddfc, 0x3152c3df, 0x4f9ac772, 0x4f76be9a, 0xd833b999, 0x23594950, 0x3083efe7, 0x01333e24, 0xf6296ff8, 0xfbaf55fe, 0xaf9a7c61, 
    0xb9fc1885, 0x57d48f98, 0x7cc2f03d, 0xc7b442fc, 0x00ff2578, 0xfda66bd0, 0xa8dde2b1, 0x18274f78, 0x3100ff9c, 0xfa2b275e, 0x87ae7fdc, 0x05a5c9d6, 
    0x639efae9, 0x684ccde1, 0x35d220be, 0x63e95246, 0xa8d3057b, 0xb122a9ee, 0xf435901f, 0x6d0bedd7, 0xb7baf62d, 0xd7566cfa, 0xc7b26c5a, 0x52a95ce4, 
    0xac4cc41d, 0xdfec7437, 0xa1db7c95, 0x4cd7a4d9, 0x9e761b1b, 0xf39f9c31, 0xed5ff59a, 0x87e19bd4, 0xb32e3c87, 0x673a0c43, 0x5c26d798, 0x4f639eac, 
    0x4d9f833b, 0x6ec520b3, 0xb14a7be9, 0x4b9599ee, 0x76aa6ad3, 0x6fcc3f5b, 0x9fbeedf6, 0xba266e6e, 0x1daa2dfb, 0x2edf2ced, 0x9e58ecf6, 0xab1df684, 
    0xfb57fcc9, 0x89bf3553, 0x4bb4adac, 0x329485a9, 0x5c92b896, 0x600a0fac, 0x1c5be8b8, 0x64c30080, 0xcff15a8f, 0x35195f8a, 0x3a5c155f, 0x4cc7e659, 
    0x163992b4, 0x2c2f731e, 0x27cf7332, 0xfddc0703, 0xe117782b, 0x8dc5efcd, 0xd142c766, 0x3ddfdaf7, 0x9826dacf, 0x02de2229, 0xe841984f, 0x03a490c4, 
    0x037a728e, 0x5830d18f, 0x3a58783a, 0x7fbe56b5, 0xecd8f091, 0xb29fd7c9, 0xf7faecc3, 0xf0843ef4, 0x8b3fc56f, 0x473c13bf, 0x00ffe16d, 0x6e67cb06, 
    0x6b1a05b7, 0x5fd6ed99, 0xb9db40b2, 0x70eeb82d, 0xe0dceb17, 0x786e5f73, 0x0e6f4a03, 0xdfc27ef8, 0x3e6a9c5b, 0x77241020, 0xab764177, 0x6007144c, 
    0x71b2653b, 0x7c9a579c, 0xa063f82e, 0x64d20b7c, 0xcc2ed3b1, 0xc6d0f7b7, 0x7e334fd1, 0x18804cf6, 0xb4814c2f, 0xdac3ee13, 0xf6c0a3bd, 0x9d275e11, 
    0xc4cc4378, 0xe7747b70, 0x55316aea, 0x54a24aa9, 0x1ac191d5, 0xca4d9738, 0xbce4d052, 0x42fbf145, 0x73abd6f0, 0x2f9168a0, 0x17537c88, 0x4baacdee, 
    0xb804c3e5, 0x3c6549c8, 0x93cb8e03, 0x62bee2d8, 0x00ffa3fd, 0xc073fd68, 0xad4bd3b7, 0x3e97b66a, 0x78b3ba3d, 0xe90fefb4, 0x8aa6454c, 0x990ba48c, 
    0x20cf92d8, 0xc6214adc, 0x0070cc4f, 0x4fedafce, 0xff0bbf0c, 0x068f6b00, 0xe5495bdd, 0x4125fe69, 0x2f84a814, 0xe040f9ef, 0x3e6fe77a, 0xb53fbfc2, 
    0xd57eeee8, 0xf27ccfa8, 0x37176adc, 0x314fe74f, 0x8efbec2c, 0x9e2449e2, 0x3a1b6bfd, 0x454f328e, 0x74e3ced3, 0x828b87a1, 0x93af6f57, 0x36f69b3d, 
    0x00ff75f8, 0x01c43709, 0x4ba24eac, 0x4637217d, 0xed74675c, 0x00dfa790, 0xbec21f33, 0xc3dc9ef6, 0x05e85518, 0xb9ecef78, 0x0ffcfdf0, 0xb84deff0, 
    0x0b75d578, 0x95d9fc88, 0x029c25b8, 0x8f36e047, 0xdcaed7c0, 0x6c13c9ea, 0x61e189b8, 0xf20aefdf, 0xad3d5531, 0x1e9a2e4b, 0x542a1d9e, 0x6440eed2, 
    0x3f927160, 0xfed63c1a, 0xbceafcf1, 0xe40e849a, 0x7a1f04a9, 0xf5a1db6f, 0x57e8fb5f, 0x75669715, 0xdfe63373, 0x3ea61a86, 0xffb66927, 0x091e2600, 
    0xe67e1dcf, 0x6cbfd26b, 0x477d475b, 0x33302ac2, 0xafa87f37, 0x5f0d3e9f, 0xa3f1c9dd, 0xcacb8d49, 0x4b72cd3e, 0x867ce060, 0xaefd8bbe, 0xbcd5a4dd, 
    0x5a21bb15, 0x0c9c51f5, 0x6b8e5ced, 0x504eadcc, 0xd92dc1c4, 0x2aaab4f4, 0xfdf3bbb1, 0xd5f0350f, 0x5be193d6, 0xc55badbb, 0xd14727f7, 0xb7a48120, 
    0xdd3324b8, 0x4848a54a, 0x8ab400e2, 0x23fc2b41, 0x790d7e77, 0x1a6fc427, 0xf1467c5e, 0xae25a176, 0x169b169f, 0x54bc23a6, 0x54572664, 0x75ef8445, 
    0x19cd3724, 0xaaf0e0c2, 0x732bc673, 0x7ecc55e2, 0xb5cdd624, 0xac6d8ec4, 0x63181a6e, 0x8d241a72, 0x58de7215, 0xb95d92c2, 0xe2e48cfa, 0xe200ffbc, 
    0xf845e314, 0x170c71c7, 0xb116d9df, 0x4a8e8ac4, 0x841929ac, 0xe5a7da31, 0x127f72c1, 0xf8e9d77b, 0x028ea22c, 0x7d757194, 0x6ffeede6, 0xcc3e3ff4, 
    0x9af85a73, 0x6807a1d2, 0x333e71a6, 0xd74400ff, 0x682e1df5, 0x4b10970c, 0xdc8e55f6, 0x042eba8c, 0x1f0e4e7b, 0x430e1d85, 0xd0af0010, 0xc0e7d91f, 
    0xf808fc90, 0xa696ba6a, 0x6fe3d53e, 0xde5ec411, 0x616c95cc, 0xb9718e02, 0x9c8c5162, 0xf638b19c, 0x5ec0c3f9, 0x89bff00a, 0xe2432c3e, 0x9b244d1d, 
    0xb3153ec2, 0x5975d746, 0x77cd3e55, 0x99318872, 0x6324d809, 0x25b0f391, 0x9a647c8c, 0x3f844ff4, 0x8a9f3516, 0xfcd425be, 0xdb2baa4f, 0x1d334fdb, 
    0xf2c94c33, 0xc55deb74, 0xe0810856, 0x03b1a070, 0xcd936ce6, 0x2f969978, 0x375b72dd, 0x4e599dfa, 0x46c45605, 0xbc7ddf94, 0x3dfcf18e, 0x5de203f1, 
    0x8e0fbdd6, 0x33bd746e, 0x92a68365, 0x893bfb74, 0xdd24ca54, 0x10f2fc1a, 0x7177e391, 0x8ff68a8c, 0xf69af783, 0xc48ff093, 0xdee4c150, 0x9e0eda6b, 
    0xc5795ad0, 0x8964668c, 0x76e36ecc, 0xf2416e76, 0x000707a9, 0x6e6da4f7, 0x970bec1f, 0xe1663cfb, 0xa04de210, 0x53d031b6, 0xa2780a3e, 0xed8f37d4, 
    0x6fb7b8a6, 0x41924d3b, 0x0eb99a1f, 0x7ac61801, 0x42e2d5fc, 0x2b5265bc, 0xb6c23ef1, 0xf5b0540e, 0xde5a7a14, 0x2fe1a35a, 0xb9d67a8c, 0x0b2fc63f, 
    0xeaec5a9d, 0x6b7b4373, 0x8bf42575, 0xabc0442e, 0xd865144b, 0x071e8cb1, 0xc65cebf5, 0xadf3e0a5, 0x7853d1fe, 0x1aba3f6f, 0x3176bebc, 0x9d91a0f2, 
    0x1885dbf1, 0xed2f5de9, 0x780be241, 0x0d4325fe, 0x9b3e8c98, 0x1852f76c, 0x2c57ee8a, 0x0e1d1b30, 0x57fb3c00, 0xf0357ca7, 0xed8f3a2c, 0x7a6de349, 
    0x68db3c68, 0x1cb81b92, 0x712d64a9, 0x71dab91a, 0x7fba818e, 0x5638bd7a, 0xf63974f6, 0x2ebe7cea, 0xd3291684, 0x2f4dba83, 0xd9461fb9, 0x5076e922, 
    0x00ff295b, 0xd4e7bc56, 0x73af8af3, 0x4bd7bca8, 0xdd036f6f, 0xa476485d, 0x3896a428, 0x17eaa6f4, 0x80c12c18, 0x27bdd6ef, 0x6283c7e0, 0x6efbc79e, 
    0xd52d01ee, 0x4d0393cb, 0xc7987c1e, 0x0447ae00, 0xf06a8ffa, 0x5e505127, 0x00ff5dd2, 0x598d4a33, 0xc107e1dc, 0x20ea10ef, 0x595b2a4f, 0x26cb7fb3, 
    0xf03d9093, 0x00ffd13a, 0xff5d430a, 0xbfd69e00, 0x00fff0f7, 0x34307d85, 0x630014d8, 0x79ac3e46, 0xb7cffea5, 0x519e00ff, 0x6b7d74fe, 0x5f1ed915, 
    0xfcdca7b6, 0xaf94fd9f, 0x267eb47f, 0xe122af79, 0xf4491d2d, 0x913f1224, 0x00ffa2af, 0x5a580b6b, 0x3d09c1ef, 0xedc376d4, 0x09982f80, 0xcb470ef3, 
    0x4f7d40c7, 0xf865be02, 0xbfeaa607, 0x9d247e09, 0x2f36c41f, 0xde956f6e, 0x31641419, 0x1e24c958, 0x87f415e3, 0xb76491ed, 0xb5d31c3e, 0x749b3727, 
    0xffbbe6b8, 0x5c8d4200, 0xb92dc5ae, 0x8c0210cb, 0xd8631974, 0xf45a6b70, 0x4de1d797, 0xc3ab0fad, 0x3dd93f62, 0x93cfbcac, 0xbfe29b8f, 0xb676d788, 
    0xf742e46f, 0xe1995d33, 0xfb897423, 0xb2c756c7, 0x3ae8dcaf, 0xf051aff7, 0x4f4bc2a7, 0xb6b55a8b, 0xdddaaf95, 0x2c1313da, 0x883184da, 0x25259ae5, 
    0x38a70dd6, 0x71becaf9, 0xf11a3fd1, 0xf0ca000f, 0xd64e8378, 0x7d6b1aae, 0x39d67836, 0x9c5f22ae, 0x41b4b079, 0x0c6bd7d3, 0xd80e3a90, 0x87f07faf, 
    0xf8fc2f88, 0x347dc5be, 0x5a8125be, 0xaed2bc67, 0x9314a93c, 0x238805b3, 0xe10f5bfd, 0xd79c23c7, 0x1aa1d4eb, 0x8b5239f8, 0x637eacf7, 0x8fb8bc3a, 
    0x78ae2d6b, 0xf115edf7, 0x7a9d3541, 0x91e80d5f, 0xdbe16541, 0xb5359049, 0x9609d186, 0x2053b533, 0xb780ca7c, 0xcc728623, 0xb38e0b38, 0x25f179f6, 
    0xd99f9ca6, 0x9e5d20af, 0xde7fcf66, 0xd5e40712, 0x82f63ae0, 0x4b921ffe, 0xa1794839, 0x21d7dbdc, 0x8c004b5d, 0x7a04e701, 0xab1d39f4, 0x6bbfc157, 
    0x606cd6b8, 0xe52c7986, 0xed876592, 0x8f8df531, 0xa7d3ef43, 0x1df3fc7a, 0x2aa57385, 0x94599f6d, 0x151f1ee3, 0x97bfd61a, 0xde04faa9, 0xb6b2bc2a, 
    0x784b4b8a, 0xb67360ee, 0x656df240, 0x838160e0, 0x7fb9b59e, 0x1bbc51f1, 0xbd53e3f0, 0xc4d14a93, 0x3d71694b, 0xe64ef1d4, 0x7c4660e3, 0xb005a01c, 
    0xd59e0b5b, 0x4b39fcc6, 0x2f102a9d, 0x545457af, 0x606be623, 0xdca3fc84, 0x6ff151d7, 0xffd57af6, 0x019f6800, 0x6ba341db, 0x901cdad6, 0x276d9131, 
    0x3ebaec80, 0x3aa32a5b, 0xd81d949f, 0x9c8307c9, 0xe1cf571c, 0x96f5b922, 0x78e6dee7, 0xe5a2709a, 0xd1f9a9c9, 0x78dea86d, 0x5ac4fbc6, 0x772fd99d, 
    0x724766a8, 0x006e6f7a, 0xa00f1cf6, 0x07bebcaf, 0xfff013da, 0x9cd54600, 0x1aeab40f, 0xfd48ab6d, 0xc60a2949, 0x26e07f32, 0x7ed445be, 0xe087f817, 
    0xbf3589df, 0x49cff80e, 0xf6d44697, 0xc3576142, 0xcd1771c7, 0x0764c8fb, 0x90f1a40e, 0x6b70e878, 0xda87afea, 0xfca2a9a6, 0x36b4f036, 0xd9dc7176, 
    0x530f9926, 0x6e390989, 0x2b0c633b, 0xb22fc6d8, 0x85079fbb, 0xae9fc36d, 0x2d3b8bbf, 0xda224f72, 0xa88dcd62, 0xd7fa5a4f, 0xd3283ac1, 0xc1a41bfc, 
    0xc4d9a480, 0xca071d49, 0xa92b7c0d, 0x660deaf8, 0xd692b045, 0x5979d2ea, 0x7b3c9023, 0x99ea0c80, 0x8ae47504, 0xffe23ffb, 0x0f0fc600, 0x27f0077c, 
    0xffb4aef6, 0xdba22200, 0xcca05959, 0xc20532d7, 0xc6732fa2, 0x35c9a04f, 0x1523e2e2, 0x997a7528, 0x78277554, 0x4c80ec58, 0xc000ff7a, 0xfc134673, 
    0x6a6e7ea5, 0xc667b7bf, 0x5bfa626d, 0x47f81fbb, 0x21653bbc, 0xec3d1d26, 0x9dc6c30d, 0x645848b7, 0x4f5500fe, 0x8e9f6df8, 0xf01cf41f, 0xff09feef, 
    0xea3afb00, 0x63e4a9e5, 0xf61809f5, 0x29defcda, 0x4ff04df8, 0x677b37c5, 0xbdb9a6d4, 0x3fb9b9b6, 0x5cdee278, 0x15f9fe67, 0x36b75fea, 0xc367daaa, 
    0xc988e2a8, 0x8a6f5de5, 0xfeb78d40, 0x7932ca58, 0xbee3a9e7, 0x1d7ccc6b, 0x17addbe0, 0xd4f05df6, 0xcf113737, 0xf3eba473, 0x058f7815, 0x634c8a24, 
    0x6bfdfafe, 0x6e00ffd2, 0xc08be269, 0x14483056, 0x29b8e189, 0x23ce0792, 0x00ff3160, 0xc5e91a7d, 0xf4519aeb, 0x81dd19fd, 0xd1fab295, 0x00ff666f, 
    0x394be043, 0xf911fe53, 0x5d54f3e6, 0xc71275c9, 0x88cae710, 0xfb4f9223, 0xdf912ac4, 0x7eb2d71c, 0x9727fecf, 0xc4edd650, 0x4e176c1e, 0x96667925, 
    0x1810837c, 0xb89373ea, 0xf10afa28, 0x6f19325d, 0x9ea1c44b, 0xc060c0e1, 0x41210767, 0x0f5c871d, 0xc1077aad, 0xbdbb2498, 0x5dde385d, 0xc83292e8, 
    0xabb6f7f6, 0x33ee3ee6, 0xe93e261b, 0xd481e750, 0xd1aff729, 0xa9715330, 0x2a3e966e, 0x858ee6b2, 0x71168caf, 0xbc9d7aea, 0xda7637b6, 0x485891b4, 
    0xcc165797, 0x89f60d01, 0x48c84024, 0x44112965, 0xf2a08e20, 0x1fc3df6a, 0xf8dcdc0a, 0xa02eeb50, 0xce5a9d1b, 0x9f0c6c3b, 0xfa48c695, 0x9b57f9f3, 
    0xe78d5a6b, 0x6d6cfc8e, 0x5ca258de, 0x0770738b, 0x7f54be96, 0xc93d7628, 0x499e2403, 0xc33ff535, 0x4b3525ad, 0xc1d626cd, 0x9a23fc0f, 0x864bef22, 
    0xe3ee1652, 0x3d53d06e, 0xbb634151, 0xaf743cb9, 0x2931ce8a, 0x9be8a84d, 0xfbccbffc, 0xab08877c, 0xfa4a9a4b, 0xfcfaea69, 0xd164cf95, 0x44e32cd1, 
    0x024b1508, 0x3a70ee48, 0x0f78b1d7, 0xc8b6da58, 0x600a801c, 0xbca28e67, 0x44e745a0, 0x705c7542, 0xc6f0a32b, 0x85a56da4, 0x9495e118, 0xf115f163, 
    0xc9b8aa54, 0x3cf43329, 0x49ab82c2, 0x00ff1dd9, 0x92f0aded, 0x00ffe2df, 0x0be2d1ec, 0xbc5578ab, 0x67bbe149, 0x84ab34d6, 0x3506bc1f, 0xf5402cdd, 
    0xe386f1da, 0x5eed29d4, 0x75ebe123, 0xa21d3cd3, 0x86492e5b, 0xf6c104c6, 0x4a3f468d, 0x77c03ffb, 0x57da6af0, 0x68167291, 0xb11c53a5, 0x8c9421b7, 
    0x06a14710, 0x257e36bf, 0xf8351eeb, 0x130fe361, 0xb1b776e9, 0xeaa60fea, 0x5b8bdb13, 0x815dbeb8, 0xe4b84d89, 0xfa48a502, 0x4e57d7d7, 0x3b4ae954, 
    0xe6d1981f, 0x9f41aa84, 0xf8007c4d, 0x9fe36773, 0xd7eade13, 0xb97408e0, 0x00c03161, 0xb79be4fd, 0xde867d02, 0xb67fe595, 0xf1208d0f, 0x6e91c5df, 
    0x7cd224ee, 0x0845033f, 0x4e4cc3dd, 0x4f3d6024, 0x7d409f0b, 0x51f8a76b, 0xf84e7bf1, 0xd776f077, 0x4a898fe2, 0xd59d3ae9, 0x3abcd59d, 0xe7b92d0c, 
    0xa02856ba, 0x727d722e, 0xaff50078, 0x7ac49394, 0x45358b8f, 0x1f0435d4, 0xb4f337da, 0xce3d40b1, 0xfc611f77, 0x4e3d5ff3, 0xa5e22b15, 0xaf4db434, 
    0x70d0eb99, 0xdba9e683, 0x3dbdd44f, 0x9172a4cd, 0xf5f3aa74, 0x3d90a96d, 0x1f950ebf, 0xf9cf74db, 0x9000ffe5, 0x59fccfeb, 0xcb4e7de2, 0xd3b7b85c, 
    0x45b32f9e, 0x92e064f2, 0xb1e6a9c3, 0x30e100ff, 0xe1f717f1, 0x45be00ff, 0x1ba11a7d, 0x62298e6a, 0x7d6677e5, 0xd931fb5b, 0xc8feadc3, 0xbdb8271e, 
    0x7d6b3e4f, 0xd889357a, 0x63c4a09c, 0x35fafe03, 0x0500ff9d, 0x7491b825, 0x18c0039f, 0x62ce9f88, 0x5a01e4be, 0x77b200ff, 0x8bbf99fc, 0x60ec00ff, 
    0x620de54f, 0xbf49c17f, 0x9fc0cbe3, 0x67a5bf49, 0x9446fe57, 0xcee41f7d, 0x8bfc2f5c, 0x00ff7aab, 0x86f7f291, 0x6f0ba2ac, 0xad480438, 0x1d07866f, 
    0xfa3f176e, 0x74cdfc00, 0x3da5de7a, 0x88cfa5bd, 0xa90e2b21, 0x926e8b1c, 0x2176a1c6, 0xf531900b, 0x1fd6fb3c, 0xe300ff86, 0xadf71fd6, 0xb4a2f47f, 
    0x00ff43bc, 0xfdef6522, 0x5af22f7d, 0x473a02fd, 0xf1e5e443, 0x5bf8a733, 0xdb1a4de0, 0xb5d3dac5, 0xae78b9a8, 0xf967468a, 0xc78383f6, 0xe9495fe7, 
    0x14082368, 0x00000a6d, 0xf80caf76, 0x2300ff6d, 0xeb3f8857, 0x7b2dfaf3, 0xbfda9da6, 0x4eaacd14, 0xbd89da58, 0x45a6fb99, 0x49030b4e, 0xbd3abaa5, 
    0xf39f6428, 0xb1d65ae9, 0x30109828, 0x2b6b0e72, 0xcf7fea4a, 0x7f5b6ca5, 0x5c511fad, 0x8e1ed971, 0xeea1af27, 0x78250d3f, 0x188f61d8, 0x7e2c5fef, 
    0xd990f6d5, 0x8fbad3fe, 0xeec51897, 0xea3c679f, 0x857d86dc, 0x7f95fc09, 0xe193fa2a, 0xbeca5fbf, 0x7faefd61, 0xfe5be7e4, 0xfb5f36c1, 0x3fc47d35, 
    0x5df911dd, 0x79c6f75f, 0x7b748f57, 0xae09f448, 0x1249420c, 0x87f91a53, 0x38195721, 0x6b8eb31d, 0xd17fd086, 0x5de2357c, 0x4a6d7e7d, 0x489110de, 
    0x3a5284fc, 0x1bbdda01, 0x8afc17e2, 0xf0f53fb7, 0xf31af47f, 0x49fe2f9d, 0xeb7f8ba7, 0xe22a7f9a, 0xeae95dcb, 0x939eb97a, 0x821f1c49, 0xe36315bc, 
    0x5a6a100d, 0x752db784, 0xc718ac24, 0xfa7bd02e, 0xfcf7d67b, 0xfe0f2d2a, 0x00ff5e7a, 0xfe00ffdf, 0x1fc22fb5, 0xff6213f9, 0xfdafae00, 0x59afb52b, 
    0xff3fc1b3, 0x000000d9, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(ColorBalanceNode, "Color Balance", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
