#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Binary_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct BinaryNode final : Node
{
    BP_NODE_WITH_NAME(BinaryNode, "Binary", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Mask")
    BinaryNode(BP* blueprint): Node(blueprint) { m_Name = "Binary"; m_HasCustomLayout = true; m_Skippable = true; }

    ~BinaryNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_MinIn.IsLinked()) m_min = context.GetPinValue<float>(m_MinIn);
        if (m_MaxIn.IsLinked()) m_max = context.GetPinValue<float>(m_MaxIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Binary_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->forward(mat_in, im_RGB, m_min, m_max);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_MinIn.m_ID) m_MinIn.SetValue(m_min);
        if (receiver.m_ID == m_MaxIn.m_ID) m_MaxIn.SetValue(m_max);
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        float _min = m_min;
        float _max = m_max;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_MinIn.IsLinked());
        ImGui::SliderFloat("Threshold min##Binary", &_min, 0.f, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_min##Binary")) { _min = 0.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_min##Binary", key, ImGui::ImCurveEdit::DIM_X, m_MinIn.IsLinked(), "threshold min##Binary@" + std::to_string(m_ID), 0.f, 1.f, 0.f, m_MinIn.m_ID);
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled || m_MaxIn.IsLinked());
        ImGui::SliderFloat("Threshold max##Binary", &_max, 0.f, 1.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_max##Binary")) { _max = 1.f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_max##Binary", key, ImGui::ImCurveEdit::DIM_X, m_MaxIn.IsLinked(), "threshold min##Binary@" + std::to_string(m_ID), 0.f, 1.f, 1.f, m_MaxIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_min != m_min) { m_min = _min; changed = true; }
        if (_max != m_max) { m_max = _max; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("min"))
        {
            auto& val = value["min"];
            if (val.is_number()) 
                m_min = val.get<imgui_json::number>();
        }
        if (value.contains("max"))
        {
            auto& val = value["max"];
            if (val.is_number()) 
                m_max = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["min"] = imgui_json::number(m_min);
        value["max"] = imgui_json::number(m_max);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue3a3"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_MinIn   = { this, "Threhold Min"};
    FloatPin  m_MaxIn   = { this, "Threhold Max"};
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[4] = { &m_Enter, &m_MatIn, &m_MinIn, &m_MaxIn };
    Pin* m_OutputPins[2] = { &m_Exit,&m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_min             {0.f};
    float m_max             {1.f};
    ImGui::Binary_vulkan * m_filter {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6637;
    const unsigned int logo_data[6640/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfd003f00, 0xbfcaaf53, 0xfc772ef8, 0x8dfb3fd1, 0x85ed00ff, 
    0x6f00ff7d, 0x7ae842fb, 0x3735ed87, 0x7e086bc1, 0xf858add9, 0x6a124f66, 0x21dcb157, 0x88f43f4b, 0x90d98a22, 0x2c6bde12, 0x6e1b52c6, 0xbc1131d4, 
    0x03f8944b, 0xff9d0bfe, 0xfe4f3400, 0x61fb7fe3, 0xff2a1f40, 0x3f2ec100, 0x193efbe4, 0x4fdc00ff, 0x774d00ff, 0x5ffdfb75, 0x8decb7cd, 0xf6c7bef1, 
    0xfca2fd71, 0x530ff119, 0x7d352ed3, 0x659a4837, 0x75b4b4ba, 0x5b538c59, 0x9bee6ecb, 0x984566b8, 0x315452b8, 0x3b97a550, 0xe267f487, 0x7e68169f, 
    0xb5aed006, 0x3a6b12bf, 0x5bf4877f, 0xa37ebe5d, 0xb5255daa, 0x22983bbc, 0x55c891ef, 0xc9a832cb, 0x4d1db0e4, 0x59516b00, 0x66f1163e, 0x0a9de387, 
    0xdef05bd7, 0x83f8a7b3, 0xe4ddba45, 0xd25d3a6a, 0xb5cddb5c, 0x10c9368a, 0xb2326c95, 0x910a1e9c, 0x00b556d4, 0xfc07f015, 0x29fe2316, 0x0b9f852f, 
    0x3fe9233e, 0xf0339ee8, 0xfee08cbf, 0xfffed4c8, 0xc1b7d900, 0xa6fbed2c, 0x6c996fcc, 0x56e79bed, 0x8e5700ff, 0xa9fdc08c, 0xc53bade3, 0xff867df3, 
    0xbefac100, 0x69776d9f, 0x35d2cfbf, 0x7af6628b, 0x10ac1d92, 0xb6251ecb, 0x66b52997, 0xcb226a1e, 0x8e796b21, 0xdf929fcd, 0xdb3f55f0, 0xad16fe13, 
    0x78f0959e, 0xf05057f8, 0x8de1b5de, 0x11bf4b6a, 0xc80fa526, 0xc784a36e, 0x729bb101, 0xb3ceb6b4, 0x2149e2ce, 0x0343a48d, 0x68595085, 0xe07ff503, 
    0xbe6f8d87, 0xf0177c25, 0x38b58b0f, 0xb5d4e0ad, 0xe90f00ff, 0x56d4adfa, 0x4b0acb8a, 0xba72b43d, 0x146266a0, 0x24019033, 0xad2719e3, 0xffe3b576, 
    0xad26b300, 0xc87ea063, 0x3d350a9f, 0x4edff24e, 0x0dbc6cd3, 0x5edddca4, 0x43b1ca5d, 0xc4a74904, 0x10bb23cf, 0x25415515, 0x49000089, 0x75d255af, 
    0x4a7f1d6b, 0xcbf4d4b3, 0x4d477dcb, 0x6d2e85bd, 0x59252d6f, 0x50279e61, 0x923a22c9, 0x21485919, 0x08822081, 0x3f880fa0, 0x0f1ea6e0, 0x4dc37ff1, 
    0xa4fd4d3b, 0xa7f818fe, 0x172f11fe, 0x68c842f8, 0x326db39a, 0xe96800ff, 0x910837b7, 0xf8bee547, 0x629eca5b, 0x9b3f1efb, 0x34b8dfcc, 0xbfee8331, 
    0x1f6c7f1f, 0xfd097c05, 0x2dbe6c9e, 0x7f8df64b, 0xb7a1d648, 0xdbda0f6f, 0xa736f146, 0x6b26c42d, 0x30d72574, 0xd9598da9, 0xadaa729d, 0x46edb3f2, 
    0xea1f5ff5, 0x7cd115de, 0x785cab1b, 0xb047f3de, 0x6dc29bf0, 0xf97519b5, 0xa2c58e62, 0x738c8894, 0xae424819, 0xe1d6265c, 0xe29c63b7, 0x891f9abf, 
    0x00ff3a7e, 0xc500ff84, 0xd85adf53, 0xe86200ff, 0x74adfb36, 0xf325095d, 0x036cd262, 0x8d6a45bb, 0xde6d77b5, 0x3420a4c5, 0xbe923cb2, 0x207624e9, 
    0xffe3971e, 0xe38fdb00, 0x191fc4af, 0x9f22de6a, 0x348a7fe2, 0x3226d437, 0xd640338d, 0x6d6cac2e, 0x702c0057, 0x2a801cc3, 0x723280aa, 0xcccc8dcd, 
    0xfff398c5, 0x3fd6f000, 0xe800ff1b, 0xff407cb2, 0xfba2c200, 0xd78e00ff, 0x82afe03f, 0x257e111f, 0x7eea5269, 0x8a0ff011, 0xc5a6553c, 0xf392b631, 
    0x6faed144, 0xab424921, 0x8cc6cb18, 0x3b740503, 0x3d309c73, 0xf01f74c5, 0xff1bdfc9, 0xfc8de800, 0xc200ff40, 0x00fffb5e, 0xd907508d, 0x3f49f05f, 
    0xe28bf81f, 0xe3b3ed9f, 0x781600ff, 0xd7b856b3, 0xf8aa433c, 0xcb7bee4a, 0x483792eb, 0x00b06ddf, 0xaa0a0000, 0x80a22aa0, 0xa0aaaaaa, 0x7fed0000, 
    0xf3dfb9e0, 0xee00ff44, 0xb600ff37, 0xf05fe515, 0x3af94f45, 0x00ff147f, 0xff7599d8, 0x35d6a500, 0x5cf0bfea, 0x7fa2f9ef, 0x00ff1bf7, 0xfc000adb, 
    0x3fbdafab, 0xb69fa6e0, 0x2a7e8d17, 0x00ffe9dc, 0xe04f3c09, 0x5c007f1b, 0x6a5b5368, 0x3597b6ba, 0x30176ae2, 0xfc39066a, 0x19ee8eb5, 0x6b20a93c, 
    0x1e1fa85b, 0xb290b05a, 0xc8cf0be7, 0x153c041f, 0xe32bf163, 0x237c8047, 0x0671cba9, 0x83f8af9b, 0xa5aed24f, 0x925965b4, 0x8963ee29, 0x002b0bd9, 
    0x48905cc1, 0x3dc83823, 0x00ffeb2b, 0xec672bf8, 0x0a5fe3f1, 0x07f17efc, 0x1bbbabc5, 0xe2093c79, 0x4bfbb459, 0xa41b463d, 0xd8d21d2d, 0x4412cc88, 
    0xb4d87048, 0x2905f791, 0xdce697b5, 0xd30f804a, 0xb3d900ff, 0xb3dfcce0, 0x217dc187, 0xbaf8203e, 0xee5ac4df, 0xba15a685, 0x00ff05f1, 0x8da60d97, 
    0xd1d69664, 0xb2aba5bd, 0x23d186a9, 0xb69c81b1, 0xa68dc73c, 0xbeb01970, 0x70eaa4d5, 0x9e555aeb, 0x11976ea1, 0x93c2dddb, 0xd27697c6, 0xcaaa4c5b, 
    0x458a0718, 0x79b08d57, 0x72ca5047, 0x5e110408, 0x28bbe17f, 0x53e9327e, 0xbf5383f8, 0x097cd7b7, 0xeba3cdab, 0xb5b6149e, 0xde022059, 0xb7beb705, 
    0x24729bba, 0x05ba76a2, 0xf931168a, 0x8a82db50, 0x97fe6dc6, 0xbf7c0540, 0xc5fe73fb, 0xa9fd159e, 0xa97d03fc, 0xdf7095b6, 0x323d7411, 0x9a37e8e8, 
    0xcd5bf16c, 0x468a2877, 0x9077ca82, 0x621a6814, 0x502ae6a7, 0x1ee82a96, 0x5150df4d, 0xf81f1f40, 0x5f3ac56b, 0x94e03f8c, 0x17e95f33, 0x87b46b5f, 
    0x9ede35e1, 0x986c79f2, 0x924cdb9e, 0x00c374da, 0x9161597e, 0xc8edd073, 0x954f1024, 0x3e19c17f, 0xc49ff82c, 0xdfb506df, 0x065a6a03, 0xfc8627a1, 
    0xa5ef7a35, 0x4b6c93f8, 0x1271be66, 0x5dd161c9, 0x9b7757a5, 0xb330f370, 0x4260cce1, 0x7faafb24, 0xb918be85, 0xe0bf26f0, 0xdecd34d9, 0xb4bfd71b, 
    0xbe6cb47f, 0xfef328d1, 0xded22cdf, 0xafb7fb7c, 0x1f13f798, 0xf8dd8695, 0x0f00a05d, 0x7c0bbf85, 0xc05bf031, 0x7c83679a, 0x637fa61b, 0xf34d6f78, 
    0xf665c97e, 0xfcf26789, 0xf9575ec9, 0x977366e5, 0x712ccf91, 0x14000e9c, 0xffd7f801, 0xfd5c0500, 0x8bcf75a9, 0xf867197f, 0xa88ffd69, 0x7ec36f78, 
    0x2f9abd06, 0x8e175fb3, 0x82e94e5d, 0x593cb68f, 0xff6ce5d9, 0x58705000, 0xecbe33c7, 0x033cb14d, 0x94fd51f6, 0x5afb5f7c, 0x0d4f47fc, 0xc33e6df8, 
    0x9bec5aa5, 0x88e7d759, 0x0199beb5, 0x46460c27, 0x086b5bf9, 0x201704e2, 0xe9aea8f2, 0x43c17fd0, 0xe3636bfc, 0x4bdb00ff, 0xa7a7aee2, 0xbc0d71c5, 
    0x4c699a1a, 0xc6aa2ab7, 0xb322385b, 0x23568095, 0xcadd9269, 0x52a9e49c, 0xf5033940, 0xdd09fed3, 0x00ff21fb, 0x1a7c29c3, 0xde76db3f, 0x122fc44f, 
    0x205e7779, 0xc5e779d9, 0xd927c30e, 0x086893ed, 0xee90b43c, 0x3c32bb2b, 0x1e417798, 0xf08a3e00, 0x3b3c8007, 0xbac1b3f0, 0x27fc844f, 0x7ee8dba4, 
    0x10a1d21e, 0x03dbd859, 0x24c935b6, 0xcc2c4992, 0x123bb3c4, 0xc4cccccc, 0x28e84992, 0x153f80a2, 0x9f8ae0bf, 0x29fe74f2, 0x32b100ff, 0x4b00ffeb, 
    0x7fd56bac, 0xf3dfb9e0, 0xee00ff44, 0xb600ff37, 0x00fff215, 0x56b312fc, 0x6ebfd3be, 0xdadb003f, 0xdb5a5c5e, 0x5ba9c3df, 0xac0c455e, 0xb010738b, 
    0x204794b8, 0x48a20e07, 0x23a77da3, 0xa87a6a74, 0xf80fea23, 0xd1fc772e, 0xff8dfb3f, 0x0085ed00, 0x107c707e, 0xc38fadf1, 0x011e8d5f, 0x15a776f1, 
    0x816efac4, 0x553f0de2, 0x55d18aba, 0xb9a078a6, 0x0c54578e, 0x42150bca, 0xe30c2400, 0xdfaf7524, 0x7c18db3f, 0xd7f0b443, 0x859ff580, 0x00ff1d3e, 
    0xdac7a784, 0xde85893f, 0x5b5ca69b, 0xdda42c09, 0x29c1dfa6, 0x40dc94bb, 0x3c458820, 0x73de64a5, 0xa73d8628, 0x7dfec8cc, 0x78a515fc, 0x65d55a77, 
    0xbf1ef1b4, 0x79abe171, 0xfad62221, 0x42de382d, 0x209405b7, 0xbc220bb8, 0x79b16070, 0x50a44922, 0x13322cbf, 0xfda9fd8a, 0xc11bec8f, 0x87b000ff, 
    0x1a0f3480, 0x01fe56ea, 0x4e4d74d3, 0xa3c6dbf6, 0xbceed55b, 0x5169a83f, 0x3d757349, 0xa46862b4, 0xe4694b86, 0xf6357d96, 0x091ec8c8, 0x37315fcf, 
    0xe3557d00, 0x0a1e8d5f, 0x18e06bf8, 0xefe269bc, 0x57f85b10, 0x26c2d2c3, 0x1e6d6d8e, 0x262667ce, 0xe42d4294, 0x51ce9455, 0x3c1bf91c, 0x321ba9dc, 
    0xbfcaaf08, 0x0afe63da, 0xef5be3fb, 0xf0cb968b, 0x4cdfe662, 0x368b26f0, 0x9e96fad2, 0x0888b792, 0x59e55970, 0x10307c17, 0x316351a5, 0x9999b5cb, 
    0x2f529995, 0x6800ff8f, 0xc7abda6f, 0xced5b4bf, 0x79613c82, 0x02dd746e, 0xa6930613, 0xdab223db, 0x480a472b, 0x973cf34c, 0x08f93313, 0x23cbf3cc, 
    0x1941dc16, 0x98fd55c5, 0x73ad67bf, 0xcbf8a0f6, 0x4407f8a2, 0x6b1fec9b, 0xa8f63ddf, 0x5a34eff6, 0x7463ac7d, 0xf4413893, 0x5a550c45, 0xcb422349, 
    0xee0320bf, 0xb55f809f, 0xfb45ede7, 0xff477c64, 0xe13f8400, 0xf09fce7d, 0x771ac2f3, 0xadd5bed9, 0x7775664b, 0x3323ecd1, 0x37f7792a, 0xb9bb4686, 
    0xee145999, 0xcaf64ac3, 0xb45fc9c3, 0xf054fd39, 0x69aa9d9e, 0xacd1151e, 0xfe5fbd35, 0xd66a0d12, 0xb52f18ca, 0xb72db37f, 0x0b54a7db, 0x6552fe24, 
    0xb6c0de63, 0x6077e1c5, 0xbfca2b70, 0x27d9af65, 0xb200ffc0, 0x8d758537, 0xa8afc113, 0x5e6b7f5f, 0x47bddb8b, 0x79493058, 0x22511126, 0x79144532, 
    0xaaec3089, 0xc8d2da41, 0x7b8df941, 0xff78005d, 0x00ff8b00, 0x68052f6a, 0xef74181f, 0xa5661a84, 0x54fcac6f, 0x4b96e1d4, 0xa43b045d, 0x9eb41530, 
    0xc2dd0de5, 0x961588a3, 0xe5153000, 0x44dc6802, 0xe2abdbc8, 0xf647db0f, 0xecc7f1c9, 0xbaa2e2fb, 0xfbf48c8f, 0x621f8bcf, 0xf04ddf9e, 0x9f658477, 
    0xd0c20bfb, 0xf356eece, 0xa7429250, 0x736bbe53, 0x62398a00, 0xe98e188e, 0x66343f4c, 0x92f6835e, 0xfbd9ef5b, 0xf09f0afe, 0x56fac767, 0x911e7197, 
    0x3c1812f1, 0x3abca93f, 0x8dba4693, 0xa4d83fd3, 0x762c13f3, 0x6cba1cc3, 0x76840abb, 0xc3214885, 0x6a40fe3a, 0xbff6b5da, 0x7a6adeaa, 0xa3c6e59d, 
    0xf7cc5ea9, 0x72975737, 0x2b4fb3b4, 0xdd9167b1, 0xc4cc2c89, 0x4992c492, 0xd907d024, 0x3f4af05f, 0x17fed3d9, 0x071ded4f, 0x7728b58a, 0x3ec06ff8, 
    0xcd37af4e, 0xb3fc328f, 0x963f867d, 0x8d877145, 0x2903dce7, 0x18c736fb, 0xa5ee5790, 0x00ff957c, 0x9ffdc604, 0x7e087eac, 0xd41e9ecb, 0xf1e76dd9, 
    0x8b618d0f, 0xe4855ac4, 0xa6985841, 0x01a4358c, 0xb17db5fc, 0x314acac2, 0x39cbb260, 0xebab2156, 0xa228005a, 0x01fc008a, 0x5c8200ff, 0x7cf6c97f, 
    0xb800ff33, 0xee9afe9f, 0xf8afeaeb, 0xd1fc772e, 0xff8dfb3f, 0x7c85ed00, 0x0400ffab, 0x9300ffb8, 0xff67f8ec, 0xfd3f7100, 0xd6d7dd35, 0x885bf09f, 
    0x7ed566ec, 0xdca94703, 0xafe9595c, 0x57b7b036, 0xf32c9016, 0x3f6d1145, 0xe86ca47b, 0x85e4821d, 0x0190802e, 0x0740ce65, 0x27b1bfca, 0x859f7483, 
    0xf8b0217e, 0x553ff1f3, 0xe0173cd6, 0x8b1b0e9d, 0x5d0e00ff, 0xbd855a69, 0x7588f7bd, 0x788b6b1b, 0xdddecade, 0x03739bcf, 0x2bc5d2a4, 0x2c63ac22, 
    0xf8002aaf, 0x8fda0ff2, 0x34fca7e3, 0x136fc7a7, 0xc4fe477c, 0x738400ff, 0xbfec6bfb, 0x5ffb2cf1, 0x269fbcda, 0xd63f28d6, 0xf2d94dec, 0x8dd17db7, 
    0x3a19e7d8, 0xc48fb5bf, 0xc587f1a7, 0x5ac34f3d, 0xa5fdb556, 0xde071fe0, 0x1a3ee9dd, 0x636cd986, 0xd80910b3, 0x580a73c9, 0x7fdbdb5b, 0xa50c48a4, 
    0x68952cd2, 0x039bbcd4, 0xdfe3531e, 0xe10f8dc3, 0x778dc527, 0xf11b7ec2, 0x0ff19fa6, 0x8ffcd345, 0x589ac423, 0xe6796f41, 0xb3ad1c41, 0xc8afb264, 
    0x399cd1ce, 0xc0430fe5, 0x6db5e200, 0x55176d32, 0x1eeed3bc, 0x498b4bde, 0xd21e099e, 0x59983be6, 0x92928a95, 0x2e92ccc6, 0x558c0e47, 0x10240886, 
    0x00fff66b, 0xfbf709fe, 0x27fb433b, 0x96b1237c, 0x7e894bea, 0xd347fc2d, 0xc3935013, 0x45b28c5a, 0x936c2d04, 0x5b380acb, 0xa2a22d63, 0xc415435d, 
    0x4daaab92, 0x9ee52222, 0x57f39334, 0x37f06af6, 0xf17f7c83, 0xeb1e6f86, 0xf01fb7f6, 0x781cbea9, 0xf15ec37e, 0xb4b3bd28, 0x5b5c5e80, 0xd81a415a, 
    0xb4c58822, 0x8c7a758d, 0x64a51c89, 0x594888b8, 0xfd98c5cc, 0x0400ff6b, 0xfca3fde3, 0x7e4cfb5f, 0xf13ededd, 0x5db58937, 0x3c096b42, 0xa54fa933, 
    0x86179768, 0x07227d6b, 0xc1c2d3bf, 0x1854850a, 0x7556e248, 0xde143245, 0x004d62d9, 0x8e00ff7a, 0xd3fe0f3e, 0xc3dfb59f, 0x0e1f89bf, 0x67f8307e, 
    0x7484bfe1, 0xbc4921d8, 0xa969af33, 0x6a5cc32d, 0x47ab5c71, 0x95b85934, 0x49e181e1, 0x8e6477e3, 0xc2a55b55, 0xbe12ef3f, 0xe055f8a0, 0x3a7c1cef, 
    0x397c99fd, 0x0f4f24e1, 0x3fbc8fa7, 0x8bf498e1, 0xeea96b36, 0xad2eb934, 0x799bfced, 0x292a7f24, 0x1b29a77c, 0xbb0c84ba, 0x03b65499, 0x7fae551f, 
    0xbc107fc3, 0x571de32b, 0x0f34d35a, 0xe6fae812, 0xf64da2a5, 0x4dcf526d, 0x6be28abf, 0xf93a7709, 0x3131a273, 0x1be4e836, 0x61940358, 0xe007d0d8, 
    0xe335ed5f, 0x0c1f88bf, 0xbf5b6dbf, 0x5ea37810, 0xb38400ff, 0xd6137ec6, 0x1734f5ac, 0x85a5ded0, 0x7ae9eab4, 0xb8a2ed6c, 0x8eb13071, 0x88482469, 
    0x098c242a, 0x68400213, 0xbf5de09f, 0x28f8bfc5, 0xbff0bf5e, 0xc5bed348, 0x40fcdea2, 0xd35e6cd4, 0xfdda3049, 0xf28a4d8f, 0x18c09c66, 0x5be56979, 
    0xed2a2347, 0xac00703f, 0x3fd0a770, 0xfe3aafe0, 0xd9feac87, 0x93a6953a, 0xff86fda6, 0x6cd14900, 0xfc79b52c, 0x97ed8f84, 0x97751a45, 0xc5649272, 
    0xeed1f6bc, 0xb6ee377c, 0x3fa96ae3, 0xdfc9fe4a, 0xffb33407, 0xf8570500, 0x790be2c1, 0xd12ce13f, 0x8f2bfb74, 0x227ee913, 0x701656b2, 0x2e08abcf, 
    0xdd480221, 0x5edb7ca3, 0x246ea2dd, 0x2ad2a848, 0x0728bf82, 0x5114fde9, 0x51140540, 0x3f841f40, 0xb13649f0, 0x8797b61f, 0x6fa9dec5, 0x331ddca7, 
    0xf3761650, 0xd774ab69, 0x3007f9d2, 0xda0421c7, 0x97cc8fb0, 0xb01204ce, 0xc4c459b4, 0x00ffaf1f, 0x0d7eb0e0, 0xaf7ac487, 0x7177fdec, 0xda5ef8aa, 
    0xe38278dc, 0xc4c7924b, 0xb09684da, 0x6a2db7ca, 0xca18d34c, 0x2046daba, 0xaba3f2c4, 0x078f2646, 0x57f9082c, 0xf0ef09fe, 0x045fc5db, 0xbea1e07f, 
    0x8ebff009, 0xa2711dfc, 0xa90eafeb, 0x47ab491c, 0x5b106d2c, 0x9bf6a13b, 0x32094766, 0x845886b1, 0x9589bc9f, 0x2b58ae9c, 0x00ffd7af, 0x842f58f0, 
    0x00fff870, 0xf10f3ec0, 0x258a3713, 0x3ad4f0b8, 0xe16bc9b4, 0xaa490cef, 0x86e25542, 0xe0f29a46, 0xc0591a4b, 0x3b43dd86, 0x2c24626f, 0xc037c2a8, 
    0xfa5ce407, 0x4fc4e725, 0xe1ebeb1d, 0xb400ffd8, 0x6800fff7, 0xc57ecaea, 0xb56ea66f, 0xa96b8ab7, 0x6f34fba4, 0x18b6c1e4, 0x36267fa4, 0x2676bb2a, 
    0xaf1f94ef, 0x3f6400ff, 0x1afeabd8, 0xde56c55b, 0xe08ff80a, 0x397c183f, 0x3e8400ff, 0xfcef78ca, 0xf6656541, 0x89cbbe15, 0x59b8b4e2, 0xefdb8eed, 
    0x204798f8, 0xd6e69c95, 0x8e10a308, 0xfc251f26, 0x6db4d51b, 0x9e26e227, 0x7179453c, 0xf057e8a5, 0xba3769dd, 0xa3b3b495, 0x6d774558, 0x155dab2d, 
    0x61998784, 0x00ad7913, 0x68639938, 0xd790e59b, 0x7fb2bfd2, 0xe3553c8e, 0x9a8b00ff, 0xf8a1a73e, 0xfff15877, 0x3458c600, 0xdf4e8dcb, 0xb1061ac5, 
    0x5046eb2a, 0x6ad16aed, 0xdab75a97, 0x6c81232c, 0x76bc82dd, 0x713649ec, 0x80b40389, 0xb69f7200, 0xbf2aed67, 0x9f5b3512, 0x46677801, 0xe083bef0, 
    0x6b53232d, 0x0d7f5b8b, 0x1bc7da58, 0xcffe6905, 0x600c990f, 0xae6e8115, 0x9ae40877, 0xbdb9b927, 0x86643996, 0x077d0458, 0xe3d712fc, 0x033e84a7, 
    0x5f52d37e, 0xfe51d7f8, 0xedb5d2c6, 0x2d0a6d16, 0xbd05504a, 0x5b5cf2ac, 0x923b8dca, 0x908fb83c, 0x4b21bf54, 0x19a86da9, 0x280ae4d7, 0xf17dfa03, 
    0x8de3a5d6, 0xf03fec3f, 0xc37bf886, 0xfffdf6fa, 0xddfe6b00, 0x3cd3a7d7, 0xe5d96dac, 0x3e5756f9, 0xcef97266, 0x1b57bbcd, 0x7fbe1db7, 0xa7e21ff1, 
    0x9f863fc5, 0x19df350b, 0xf03ffc5f, 0x0df6cf7d, 0xa8a9f695, 0xca785b59, 0xa200ffe8, 0x0625c0db, 0xdf503a17, 0x14986d2b, 0x915d4565, 0x84bced9d, 
    0xbe9efdd6, 0xf843fc1a, 0xb459e157, 0x517c1f4f, 0xa98500ff, 0xa74b79e5, 0x283a37ea, 0x3582bcb0, 0xa4398640, 0x8cf64913, 0xe30e56ed, 0x2e64dccc, 
    0xf36db8ef, 0xf6d3db4f, 0xed17f145, 0x1b1de081, 0x8d37fac3, 0x6f2ffced, 0xa43e4da4, 0x34bddb34, 0x7ba30e4f, 0xdfb66ce5, 0x2af06038, 0x55499907, 
    0x2889897c, 0x075014c5, 0x3c8b67e0, 0xe778aa53, 0x89cf5ac5, 0xb6afbb35, 0xecc55aeb, 0xcff585da, 0xd3f9b196, 0x1f49e6ca, 0x96ab006a, 0x01a07062, 
    0xfd15009e, 0x3ec2fe04, 0x93aef00a, 0x4f783ffb, 0xb604dac5, 0x8a97faf7, 0xc9a13ffc, 0xd1c45faa, 0x3ddb7c48, 0xecc7da2e, 0xed5c44c2, 0x06a4ad89, 
    0x57522c36, 0xa3e2a69f, 0xf7e25bf0, 0xfc1a7fc1, 0x9e94f105, 0x87eff115, 0xae3b3cee, 0x8bdc31a4, 0x59249d79, 0xc9f27122, 0x24b3911c, 0xb9cb908b, 
    0xcaca8018, 0x7ec0ca70, 0xd6cb7edf, 0x31f8359e, 0x1cfc25fb, 0x812ff0b4, 0xe179fc6d, 0x613f7ce9, 0xbeacdeaa, 0x5c3d4b24, 0xda2f7d4b, 0x09de966e, 
    0x45de962d, 0xe80ced8f, 0xb288b924, 0x0372c2ae, 0xb4d60738, 0x2cbec257, 0x858200ff, 0xdee24378, 0xafc137b1, 0x109f55f8, 0x5e6bfd34, 0x2d74d3bd, 
    0x66f14e73, 0xb3e22c8a, 0xcb0b75d3, 0xb8865b6b, 0xd0795d31, 0x6cf3826f, 0xc9fb816f, 0x6718eaa1, 0x9f8eafea, 0xfb213c1d, 0xd4387c3a, 0x5de36b7c, 
    0x553aec47, 0x188a23ae, 0xd98b6b80, 0xe02d25c8, 0x5bf94642, 0x00c8c069, 0x8a2a6606, 0x023d00cc, 0xd560fc8a, 0xffb5e0bf, 0xd5661800, 0x3cd3246f, 
    0x3d7be01b, 0xb576e635, 0xbcb6bbb7, 0x2ca2689e, 0xb7c82376, 0xe0821d28, 0x90800816, 0x05ce5548, 0x5f7df85f, 0xfa00ffc6, 0xff1fbe15, 0xfbbae000, 
    0x289300ff, 0x27e35703, 0xf68abfc5, 0xecb7b19f, 0xd941fba7, 0x8b7fbbf8, 0xae7b3ffc, 0x5eac4de8, 0xe4c51dc7, 0x41f3708f, 0x3692150b, 0x585b5c8e, 
    0x65f28eca, 0xdcb132cb, 0x2b7d98c5, 0xab0500ff, 0x589300ff, 0x8efdb7f0, 0x43fabf76, 0xde1a5f7d, 0xf12d9ee9, 0x1e12fc8f, 0xdf5e79c2, 0x27fcd151, 
    0x10cf18f1, 0xb5d8e686, 0x3cf09c86, 0xb7519178, 0xacb73786, 0x6d323876, 0x561e5f99, 0xffa7afd6, 0xbeb7e000, 0xf8cffe3a, 0xc1d3f059, 0x3ff361bf, 
    0x8dabf5b5, 0x6ebeed5f, 0x40b2af3c, 0x6df6f222, 0xbffdb7f9, 0xbe0db73b, 0x65773056, 0x6b203f40, 0x6f627fdd, 0x0a3e6b19, 0x3dfca2fd, 0xcaf8a273, 
    0x73afc0df, 0xc6b5dd0d, 0xc1ad7dab, 0x5f79daa4, 0xb9fc9167, 0xbab527ee, 0x8f742988, 0x0212240b, 0x6d6d3ce2, 0x5e15beae, 0xf827fbbf, 0xf15fbc65, 
    0x2dd347b7, 0x8fe26f7c, 0xb0bcba87, 0xae9f36dc, 0xba4543f8, 0x94a26fd5, 0x4390c542, 0x154e2269, 0xd10213a2, 0x2ea32307, 0x15a0eec2, 0x785a3f7e, 
    0xc19f4813, 0xfc802f7a, 0xbef8a747, 0x66d14ad3, 0xb4d7bfb6, 0x3f7d2efd, 0xa9b6d3ed, 0x2c4f2c7f, 0x658ec673, 0x2bdab216, 0x42bbf07d, 0x6b40b82b, 
    0x17f84427, 0x1100ffe2, 0xc78f2c7c, 0xf69d6efa, 0xc4e316dd, 0xb210fed6, 0x5b26b6b7, 0x584addcb, 0x3014711e, 0x55d82ca0, 0xb48c7340, 0x770e84d1, 
    0x3db5e2ed, 0xe55a6d4e, 0xd12d9d27, 0x026018d2, 0x1738dada, 0x6aac716c, 0x0baac64a, 0xc8594015, 0xd859ecdc, 0xfd3133b3, 0x8200ff1f, 0xd414fc72, 
    0xeff8273e, 0x774c5ac3, 0x085fdb5f, 0x53eb1a7e, 0x5de3aef8, 0x5dbce4d3, 0x24f15d3b, 0xb2ad5b91, 0xac25b346, 0xa368f68b, 0x48d1f085, 0xcc7d9255, 
    0x408dbb63, 0x14fdeb07, 0x2f1f4051, 0x46c100ff, 0x7778037e, 0xb9ec57e3, 0x4edd2be3, 0x772ddeda, 0xd6655ac2, 0xcd6aa4bf, 0x5aad7901, 0xa2e9fc08, 
    0xd94e1952, 0xc0c688a3, 0x7294a092, 0x3da6d1ac, 0xff4ef62f, 0xf8589300, 0x6200ff37, 0x00ff8d66, 0xaad730a4, 0xc75fe2d7, 0xf673db5f, 0x3f98fd8c, 
    0x5e893f6a, 0x17c68318, 0xf85aa40d, 0x8354e7b6, 0x83e3d643, 0xa6ac8552, 0x84b66691, 0x8aa5c148, 0x7f68b706, 0xec911475, 0xf711700e, 0xf6ec0750, 
    0x0f3de1af, 0x979617c4, 0xa78da67a, 0x787657ea, 0x96f734fb, 0x89c12ba9, 0x666c9ca1, 0x6defaf04, 0xf8e3e4ad, 0xa2ba89e0, 0xffd9f891, 0xf8930500, 
    0x0900ffd7, 0xa405edcf, 0xd7823dfc, 0x2df0b4ca, 0x9267ef97, 0xd535af3d, 0xfbce70ec, 0x100d3958, 0xca406d89, 0x73f307ab, 0xf7356db8, 0x3f8400ff, 
    0x3f2e8d6e, 0xf84a63d8, 0x5d5be3f9, 0xbabf463f, 0x2d8eb9b2, 0x54a62b1a, 0x652875d4, 0x80b7049e, 0x395f7795, 0x1f062ce0, 0x8bc542ca, 0xf8f56c2c, 
    0xc60bf143, 0xbc12dfb7, 0x175fe27d, 0xc15b716a, 0x9dfa6ba9, 0x1575abce, 0x92c2b2a2, 0xea4a2bcf, 0x50889981, 0x930440ce, 0xb49e648c, 0x45d1cf01, 
    0xd3fa0114, 0xcf0400ff, 0xfea129f8, 0x07b03fd1, 0xbe876fc4, 0x2cd4ba24, 0xc6635db4, 0xa5cfe76f, 0x2fdc91c8, 0x3a9b0e95, 0x514767ec, 0xca418996, 
    0x79e8099e, 0x5cf05f19, 0x7fa2f9ef, 0x00ff1bf7, 0x5ff50adb, 0xfca722f8, 0x7f8ac79a, 0xffba73ec, 0x1a1bd200, 0x2ef8aff2, 0x3fd1fc77, 0x00ff8dfb, 
    0x7e0085ed, 0x1445d155, 0xcffedf01, 0xfcd2165e, 0xe1f7f173, 0xbbf586a7, 0xbae8b65f, 0xcdb489c7, 0xccdbfa3e, 0x25e8fc68, 0x13398eba, 0x95cb1072, 
    0x11a43262, 0xfd35089e, 0x4d3a692f, 0x59a5818e, 0x9d659ae9, 0xd9a69dbe, 0xb6d69642, 0x502c9176, 0x542812c1, 0x0a40118d, 0xa000a0aa, 0x57000000, 
    0x27fb6ff3, 0xfcd3c97f, 0xb100ff1b, 0x00ff46cf, 0xfa6be8d2, 0x8a02a053, 0xbf02a028, 0xa1e03f20, 0x317c0bbf, 0xc100ffac, 0x69147e4d, 0x9d679a57, 
    0xec4fe361, 0xbee8ed0f, 0xb3fd2ad1, 0x9325a17e, 0xf31818f2, 0xfb49046f, 0x7077bfb2, 0xf52789f9, 0xff2abffe, 0xf9af6f00, 0xe5ec6f4a, 0xe77200ff, 
    0x282e9ffe, 0x00ff9403, 0xc4fe9482, 0x663f0f7f, 0x5fda81cf, 0x732bfc89, 0xbbbb0be2, 0xa54113af, 0x1aebdad8, 0xd1b7b999, 0x423d1eec, 0x172dede9, 
    0x95112b68, 0xc8f0fe83, 0xcbee5cd9, 0xbfe45fc8, 0x7c08df83, 0x00ffe23b, 0x82f68fd9, 0x1da7eef1, 0x83efdac4, 0xd262d0a1, 0x1852cc02, 0xf250f39a, 
    0x729491e6, 0xa28823ec, 0x2b817682, 0x32b6a592, 0xc17f9afe, 0xe400ff6a, 0xff2d3cd6, 0xaf9d6300, 0x57df90fe, 0xc7b31fc0, 0xed9f98fc, 0x7200ff73, 
    0x249dfe8f, 0x68950fa0, 0xff008aa2, 0x000000d9, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(BinaryNode, "Binary", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Mask")
