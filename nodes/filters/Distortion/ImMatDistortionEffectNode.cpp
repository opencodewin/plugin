#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Distortion_vulkan.h"
#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct DistortionEffectNode final : Node
{
    BP_NODE_WITH_NAME(DistortionEffectNode, "Pincushion", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Distortion")
    DistortionEffectNode(BP* blueprint): Node(blueprint) { m_Name = "Pincushion"; m_HasCustomLayout = true; m_Skippable = true; }

    ~DistortionEffectNode()
    {
        if (m_effect) { delete m_effect; m_effect = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_ScaleIn.IsLinked()) m_scale = context.GetPinValue<float>(m_ScaleIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_effect || gpu != m_device)
            {
                if (m_effect) { delete m_effect; m_effect = nullptr; }
                m_effect = new ImGui::Distortion_vulkan(gpu);
            }
            if (!m_effect)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_effect->effect(mat_in, im_RGB, m_scale, m_pow);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_ScaleIn.m_ID)
        {
            m_ScaleIn.SetValue(m_scale);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float _scale = m_scale;
        float _pow = m_pow;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_ScaleIn.IsLinked());
        ImGui::SliderFloat("Scale##Distortion", &_scale, 0.f, 3.f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_scale##Distortion")) { _scale = 1.01f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_scale##Distortion", key, ImGui::ImCurveEdit::DIM_X, m_ScaleIn.IsLinked(), "scale##Distortion@" + std::to_string(m_ID), 0.0f, 1.f, 0.5f, m_ScaleIn.m_ID);
        ImGui::EndDisabled();
        ImGui::SliderFloat("Pow##BarrelDistortion", &_pow, 0.0, 0.5f, "%.2f", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_pow##BarrelDistortion")) { _pow = 0.2f; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_scale != m_scale) { m_scale = _scale; changed = true; }
        if (_pow != m_pow) { m_pow = _pow; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("scale"))
        {
            auto& val = value["scale"];
            if (val.is_number()) 
                m_scale = val.get<imgui_json::number>();
        }
        if (value.contains("pow"))
        {
            auto& val = value["pow"];
            if (val.is_number()) 
                m_pow = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["scale"] = imgui_json::number(m_scale);
        value["pow"] = imgui_json::number(m_pow);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uef60"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_ScaleIn  = { this, "Scale" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_ScaleIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    float m_scale           {0.5f};
    float m_pow             {0.25f};
    ImGui::Distortion_vulkan * m_effect   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5920;
    const unsigned int logo_data[5920/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xcc003f00, 0x2ffca4fd, 0x75ad59f6, 0x23471838, 0xe31822c8, 
    0xdbd7133c, 0xfe9dd393, 0x57b6e6d5, 0x47b6699f, 0x535fe3cf, 0xfcf04b7c, 0x7cd1215e, 0x946b60a9, 0x1c1425c8, 0x23e3c8b0, 0xf03fcf91, 0xc3ebf81a, 
    0xa159238c, 0xca298f20, 0xed48fd02, 0x28bf62fa, 0x6d7a3ec1, 0xdb7eb23f, 0xd4257557, 0xd9159df5, 0x1c9c93ad, 0xebadf471, 0x1e6c8879, 0xde70cd98, 
    0x0a70ba1d, 0x9323e386, 0x5b0bbbda, 0x409a9f8c, 0x6e968c89, 0xb3d334d4, 0x24b5293b, 0xa1769969, 0xd4906a3d, 0xc881ca4a, 0xab753c07, 0x6da16e3a, 
    0xca5b7271, 0xe5b74732, 0x5e8fb31b, 0x0abeeb95, 0x565df4d3, 0xa4c9dbcc, 0xf2e44c59, 0xfcb112ed, 0x29f49a73, 0x5d592560, 0x79b1f148, 0xfcca30a4, 
    0x70499e8d, 0x5bec284b, 0xfc322b9e, 0xea4bb39f, 0x57f971aa, 0xf84b7cae, 0x293d7434, 0xcd0bfdf5, 0xfe11d692, 0x5eaa6091, 0x81e9524f, 0x0479008c, 
    0xbcd6010c, 0x90d6563f, 0x0d08c142, 0x6e2474c8, 0x76848e43, 0xd2b01535, 0xe8c8cbc3, 0xe368e3c2, 0x67d37369, 0xcd81f07d, 0x62219f9e, 0x0c8b9d08, 
    0x734ba057, 0x79853dbf, 0xe4d8c3f7, 0xcef1c283, 0x1ecbcbca, 0x8f7a0447, 0x495ddc6a, 0x58124875, 0xe4884725, 0x536e1b13, 0xc4e28af8, 0xb4d966be, 
    0x26a9b529, 0x62647ea5, 0x9e9efc80, 0xb37fedb5, 0xd3e18b97, 0x2f61ddf4, 0x9a3644ee, 0x4a5dbb65, 0x10f15dc5, 0x07c066c9, 0x28dcfcee, 0x15dfdfc9, 
    0x9bdbd0e1, 0x27f74289, 0xedb7f115, 0xf7d2f13b, 0xd7addac6, 0x85797483, 0xe5ec84bf, 0x0c5639db, 0xc646276f, 0x152ac1f6, 0x489b9d4a, 0xf3936338, 
    0x0b0b5660, 0x585e4d3c, 0x3cf6dde9, 0x18c2e17c, 0xb1774b5b, 0x3fb41fe9, 0x501f14fc, 0x8dc507f1, 0xdac0e76a, 0xe17f8d2e, 0x6bc190a4, 0x4fdbad73, 
    0x12aa9224, 0xe2fd44a2, 0x12c08d14, 0x4ba52a04, 0x273923b0, 0xbae1bfcd, 0x00ff7dfc, 0x7f83cf42, 0xfe7f02f0, 0x04175e3f, 0x4e1ba321, 0x3d47e8d1, 
    0x9fb34f2a, 0xbeca0fef, 0x45e960e5, 0xf7fc945b, 0x3100ff99, 0x4ca5dffa, 0x048fb6ba, 0x2883dba8, 0x3ffeba21, 0xbec65f8f, 0xb33df129, 0x0ee26778, 
    0xb0e960a9, 0x9fd899b4, 0x0e7a3271, 0xc02bc031, 0xfa0a00ff, 0xa80ee1fb, 0xe185bf9a, 0x00aadc39, 0xc7118c20, 0x07fc0fca, 0xd3f94a6f, 0x3fd092f6, 
    0xdb22feb1, 0x609bc2dc, 0xe50e75b9, 0x824c5eb2, 0x6d0076dc, 0xd79c3afd, 0xf229d8e7, 0x577d71d6, 0x35b37ee4, 0x5ec66e75, 0x8c5b3883, 0xad7ff96e, 
    0x2fb79775, 0x526a6967, 0x2a971c43, 0xe4a18c64, 0x7f5266a0, 0xb822a4ef, 0x8ea3295b, 0xea38c864, 0xbf167a05, 0x00ff6869, 0x7d29fc0d, 0xeec26e6f, 
    0xae4c9d58, 0x2e2ec0df, 0x1d67dc46, 0xde677a46, 0xb8ab25bb, 0x47096e46, 0xb6c373b9, 0xa8434e32, 0x78100ad9, 0x7ed76bea, 0xebb04a1a, 0xa7610ce9, 
    0xd1ea1f76, 0x01fbc472, 0xafea00ff, 0xcddbf026, 0x666d433b, 0x0a196632, 0x9f3bead8, 0x7da5a76f, 0xc2daf005, 0xe3d343d7, 0xdd76d99e, 0x738b46dc, 
    0x64f34936, 0x7880585e, 0x00c63903, 0xe1eb15e3, 0xb3f068b5, 0xe94dc927, 0x199eedb9, 0x1a4410b6, 0x729262e5, 0xb264c4d9, 0x7b70e0a2, 0xedf53967, 
    0xd6fe3d5f, 0xd67db31f, 0xf1a316ab, 0xdbb1c103, 0x26ad2d42, 0xd634d7bc, 0x2882043b, 0x80889bcb, 0x2128bb1c, 0x079bf897, 0x45b3bdd6, 0xa400e3d7, 
    0x39293272, 0xc783d71b, 0x9ad7d15a, 0x09dec5d3, 0xa63bb4d7, 0xacd5b675, 0x99e9346e, 0x44b2537e, 0xce83d868, 0x7e1c3c38, 0xce9ef515, 0x34f2e915, 
    0xd50a797e, 0x48d57570, 0xe91c1f3b, 0x08dfac33, 0x39a4f83c, 0x3a3a0bfb, 0x9071101c, 0xe5b5fe41, 0xa556b11f, 0xfe44fcab, 0x9bf6f0d1, 0x77a5c60d, 
    0xe992296f, 0x33b0fc58, 0x78de8764, 0xa4fbd80a, 0x834c77e7, 0xf766fa85, 0xb58b47e0, 0x87bf09af, 0xacec6f6d, 0xde12d16e, 0x5526f15b, 0xa2911893, 
    0xd2ce6dcc, 0x0a3fbd71, 0x3f81cff6, 0xf02dbc06, 0xc38b491f, 0x96b30ffe, 0x6b262ecd, 0x7796a4a9, 0x0090e799, 0xe05c421e, 0x28240812, 0x2b809303, 
    0x775970e6, 0x75d584b7, 0xf6a177cb, 0xb0748e99, 0x3b2c21f5, 0xf63b69e6, 0xfe757ee8, 0xf5107fda, 0x3fdd028f, 0x7da128c3, 0x84b85437, 0x53efab49, 
    0x68280391, 0x100c1cd1, 0x3f9524d9, 0x678c54c0, 0x0ea9223f, 0xbe3c8662, 0xe617b533, 0x00fff524, 0xdb4ff71a, 0xdf54e2b7, 0x2f6a7f11, 0xb37ccc19, 
    0x1d5ca269, 0xb2bcd102, 0xdc81638c, 0x909cdc1d, 0x321ee0cc, 0x49cec800, 0x6500ffec, 0xdee6d96f, 0x155f1bfa, 0x996e31eb, 0x25ca8204, 0xf92920b8, 
    0x51b090e3, 0xce3182d0, 0xfe0e3a72, 0xc0d128dc, 0xdf8e71d3, 0x62293c9b, 0x45ad1971, 0xc93fba3a, 0x0cbe1979, 0x1db58cfd, 0xef86405b, 0x0b16d553, 
    0xb78959a9, 0xa53c4c10, 0xe57d0007, 0x24bb71ce, 0x9f5bbd0f, 0xfe27c4f0, 0xfdfe0383, 0xc500ff4d, 0xa230d7d7, 0x07d5a65b, 0xd3dc93d4, 0x5ee9c1fc, 
    0xfacec563, 0xd1c1a21e, 0xaf38d64a, 0x26ebb780, 0x0e82d196, 0x727225d5, 0x7e8c584e, 0xfd902b4a, 0xb51f74ac, 0x21f7261d, 0x2c66b723, 0xc899e114, 
    0x468e6724, 0xa8f0e710, 0x9b6600ff, 0xfb1b75e0, 0x24c9985f, 0x01f4208d, 0x00ff0757, 0xfed21542, 0xf09511d6, 0x2ba02e5c, 0xc7865c89, 0xf88a4fa4, 
    0x15432998, 0x49aaed13, 0x7c74df36, 0x50990be9, 0x41707b10, 0x1bfca5af, 0xbf9ae9a2, 0x5da2d5ec, 0x5297ac5e, 0x67cbded9, 0x00373034, 0x1e946599, 
    0xf72271c4, 0xe9345fef, 0x02ce6290, 0x7b453b39, 0x756dc167, 0x6ba91dbc, 0x5dc33d29, 0x96a7c958, 0x866b4e87, 0x33ba775b, 0x7a9b0cc2, 0x8c2b116e, 
    0xbb623ce3, 0x97f91471, 0xee62ec2d, 0xe8911aa3, 0x6257c337, 0x68253a1d, 0x2eb44782, 0xb2d380c1, 0xd3c72ce7, 0x2b7d9e3f, 0xc3f8567f, 0x4ff3f069, 
    0xf3b5bb5b, 0x5fd7b610, 0xe9c62e30, 0xfa3390d0, 0x1fe235fe, 0x5a2a3e11, 0xb3bf1578, 0xd5b846a4, 0x64578926, 0xc3d9072c, 0xce89a170, 0x7f1c3930, 
    0x6bf6f93a, 0xfac65bdd, 0x156b4f9c, 0x70b8e6cd, 0xffccf696, 0x659c3100, 0xa6c78258, 0xda487237, 0x5f737a55, 0x14e0966b, 0xa2abb5d7, 0xcc33633e, 
    0x38fb4d21, 0xfbc82f6b, 0xaafd52cf, 0xcde13d3c, 0x872b0b42, 0xba51f79e, 0xadec2d95, 0xfd32c4b4, 0xa2b6dda1, 0x89e182e5, 0xef71fa1d, 0x1d3ca08f, 
    0x2de2736f, 0xbf54c31a, 0xaefdd912, 0x195be518, 0xb0221208, 0xf5e06307, 0xe74c47ec, 0xfbe17cad, 0xbd157c29, 0x7d6561f8, 0x5a151fe2, 0xa78937da, 
    0x1855f264, 0x0a47634a, 0x70497e79, 0x02fac9c1, 0xb03ec673, 0x3c09b4d0, 0x34dca747, 0xb9012dd7, 0x4e3c908d, 0x1937d055, 0x390f7204, 0x955de918, 
    0xcb278cbd, 0x9ccf6d47, 0x16abb797, 0xda2b1be7, 0xfe8b7fe6, 0xe15f782f, 0xec052bcc, 0x991aead3, 0xd24a133b, 0x9c4f3361, 0x138e0a70, 0xe347ae3e, 
    0xd47e1a5f, 0xfc75b5bf, 0xd1245e36, 0x47dbd3a6, 0x94fe3df1, 0x7c7a96b6, 0xf6374917, 0x9601377c, 0xe6486e49, 0x94a17c39, 0x808b7388, 0x7c6ee3c4, 
    0xf15b00ff, 0x17be88c7, 0xc277f1c5, 0xbadc7d9a, 0x46a0b96e, 0x1ea10689, 0xf3c2d24c, 0xb65cda88, 0x211f7048, 0x41922087, 0x85f91807, 0x140f352c, 
    0xcdd28af8, 0x57f79e67, 0x4d776ed5, 0x248d3c71, 0xfc234b93, 0x584eecce, 0x4e124b92, 0xf7d2244f, 0xcefe24a5, 0x25f3f596, 0xf21885d1, 0xefd6df5b, 
    0x7ea747f4, 0x64097fcc, 0xa8e391f8, 0x692bf56f, 0x9c6cd2a5, 0x673bc9dc, 0x30b84f13, 0x72eab18c, 0xfaf86ed9, 0x7664e8d7, 0x0387663f, 0xd6e37a92, 
    0x0fe0d3bc, 0xfbf0e1c3, 0x4d541ac1, 0x1681eb0e, 0xf7e30064, 0x71783f8c, 0xf88f93df, 0xc63d7a0d, 0x2c71e5af, 0x823c2812, 0xbcdee339, 0x6b6f556c, 
    0xeb912d3b, 0xc2a8e261, 0x88c658dd, 0x4f8a7a92, 0x889afa28, 0xfd6436eb, 0x9a8a3df2, 0x3f8bed4f, 0xef7fe8f9, 0xd3b1e49a, 0x199efbce, 0x0fea2dfb, 
    0xecebe27d, 0xf9714444, 0x800c9cc1, 0x7d02dc4e, 0x6be40f4e, 0x2b6b3fd3, 0x5b026f67, 0x93cc0774, 0x6a72fdaf, 0xd800fff1, 0x0935698e, 0x2f81ebb5, 
    0xce22ad98, 0x32e33949, 0x38af07a6, 0x00ffec35, 0x5cd2fdb4, 0xd6da76f8, 0x1677a162, 0x691b0eda, 0x837e0c47, 0xc0eb7d8e, 0x4a0c17a9, 0xe9ea734b, 
    0x7d5155c9, 0xb6cd67d3, 0x6ca05e5a, 0xb8a5cd6d, 0x3933009f, 0xa0c49170, 0x38b1b364, 0xf7750055, 0xf84c731c, 0x461bf1d9, 0x8f34c982, 0x4a5c5c06, 
    0x5fd24dba, 0xfb8aeadc, 0x461b0dc1, 0x66440561, 0x6df4fd45, 0xc99103d8, 0x2ef1675e, 0xa695fdb1, 0x7143a5c1, 0x525b8629, 0x51196826, 0x1515999c, 
    0x38480632, 0x8e81e7f5, 0x275ee5b5, 0xe1dfd2d3, 0xc650b714, 0x687fdcb1, 0x66449ea8, 0xc0db610e, 0xbbccfb67, 0xc83875f6, 0xd3afb003, 0x0e86ec32, 
    0xd5d7c492, 0x73e263ef, 0x2aace25c, 0x6517353c, 0x8ff8c9d4, 0xa6a5dd0d, 0x375eac9b, 0x9d09359c, 0xcf6275e7, 0x8112231b, 0xf930ce73, 0x71b5eb39, 
    0xfd759fd3, 0xc7173e8f, 0xff69daa5, 0x5dfc1200, 0xb6b6f604, 0xa24532d7, 0x934586d9, 0xb031b850, 0x5882ab24, 0xc6082c63, 0xefc9c9d5, 0xfc0fdfe6, 
    0x3de36d31, 0x510f1d26, 0xc0596479, 0x5200ff96, 0x6d2967d6, 0x5e08a4a4, 0x1b93bf51, 0x95bc52b9, 0x7360bb1f, 0x077ff48a, 0x896f5cfc, 0xcffe12df, 
    0xa3c95ba3, 0x96c31ff8, 0x3ae9d951, 0x7c29023e, 0x2272f710, 0x906bbe9d, 0x10ce30c0, 0xcc190785, 0xa1d47866, 0x25594d27, 0xc12e8763, 0x384d7cfb, 
    0xf4c9ddcd, 0x4ee7963d, 0x6aae93f8, 0xa8b38e3a, 0x647a695c, 0xfaa45136, 0x3889696a, 0x08ed1b79, 0xbe1c395a, 0x92df6106, 0x82179231, 0x6ed02b32, 
    0xebf8287e, 0x8727f044, 0x7438b4ef, 0x2d77cdc2, 0x7a73b1be, 0xe16dcc93, 0x46cb228d, 0x613eb8b1, 0x4f628805, 0x5a51e9dd, 0xe1cb93eb, 0x3516b83b, 
    0xae64cc95, 0xd14e2c17, 0x5a00ffc7, 0x3dd3e09f, 0x00ffc2d7, 0x766a5b13, 0xcb765a57, 0xf76e71a3, 0x9f58de96, 0x6319c830, 0x85838c24, 0xc5b37fe4, 
    0x3c31bc7c, 0xa14b13d5, 0x30b095f7, 0xedc549a3, 0xbfe4adcc, 0x74844fad, 0xf154439d, 0x888fc5c7, 0x4d0cebf3, 0x5ea4a9e6, 0x06831d09, 0x18959870, 
    0xe2206686, 0xa9497030, 0x0f6500ff, 0x3e8daf06, 0x4eaacf27, 0x49e95bc4, 0xe660ca98, 0x39a8ca46, 0x780c44cf, 0xf0a78aef, 0xc48f5cdb, 0xc0851e5f, 
    0x6e0d1b02, 0x0c4bf3fa, 0x7b620ab8, 0x1e5c2369, 0xc708929c, 0xece77bb5, 0xf035e077, 0xf5f9c3a7, 0xbe40983b, 0xcb7626d4, 0x84d857a9, 0x7f469ea2, 
    0x9a4f9f84, 0x9db54abd, 0xd8ba3d2c, 0x6700fff8, 0xa31ce219, 0xbc67bbaa, 0xc4d83245, 0x631b2190, 0xad23411b, 0x47a97941, 0xce38d29d, 0xe62e5533, 
    0xfaa99821, 0x0ff0d00a, 0xbc8d0f85, 0x79dd3243, 0x475ba6ab, 0x3782cab9, 0xdd00e0b1, 0x00ffe43a, 0x93c36bc0, 0x49eae254, 0x63b78ee8, 0x73b4f521, 
    0x755ead98, 0xcb586e1c, 0x7f52d00f, 0xf8fc376c, 0x7e00ff4b, 0xe82bfc5b, 0xe9043ffb, 0x2d164011, 0x07854f1f, 0xe7b24d1b, 0xffa6d2eb, 0x4c378400, 
    0x66a000ff, 0x8000ff9f, 0x9215fec9, 0x8eb45dcd, 0xbe8a0387, 0xb2dfc9e7, 0xf06281bf, 0x78e081d7, 0x24cb7e2c, 0x789324ea, 0x2440ce1b, 0xde06e01e, 
    0x9d3f3d00, 0xcdc7da0f, 0x3d3cd4bf, 0xdbca0d61, 0x81249c38, 0xc8bcf2a5, 0x7fd07ddc, 0x8f1b9288, 0xbed66bf6, 0xa6ed6915, 0x3ad86678, 0xc6986d84, 
    0x64f1cf73, 0x93bd00ff, 0xcd7ccde9, 0xadde52fb, 0x2e8d00ff, 0x80e669b5, 0xb276e95b, 0x93436c49, 0x361a7f2b, 0xc98d73c0, 0x5f6dcb20, 0xc77a0f94, 
    0x58eb4f0d, 0x56611fcb, 0xdcb470a4, 0xb192eca4, 0x3c13bfe1, 0x89ef2543, 0x11b4b4e7, 0x2b4204cc, 0x159db87b, 0x70183452, 0x60b9e43b, 0x4e8f931f, 
    0xbc2cd06b, 0xdfa07517, 0xc9b5a54d, 0x7078b2b4, 0x322fee5a, 0xb7c15d25, 0x160b7200, 0xc91dc118, 0xd311aff4, 0xbc2ceeef, 0xa6eaa54d, 0x4d593017, 
    0x2324f36a, 0x9ddd55e6, 0x557207aa, 0xb0f979f0, 0xe0257d05, 0xbd2476ad, 0x543d7b5b, 0x691673eb, 0x52ee8e23, 0x709b4ad2, 0xcb476065, 0x0800ca86, 
    0xd7dc03e0, 0x4308f8ed, 0xd657bad8, 0x9ad8e4c7, 0x6c8ff8fc, 0x00ffbdf6, 0xfb751ee0, 0x47877856, 0x7eb6d6f0, 0x4f53f81d, 0xd2b0c9fe, 0x8fbfb63c, 
    0x9866987f, 0xd90e6685, 0xac9dd83b, 0x633b79ec, 0x9e64cc53, 0x8bafe027, 0xac23bced, 0xdac13d43, 0x2bc7a2b2, 0x6ee0c231, 0xfed8fcc1, 0xcee24395, 
    0xe2911e85, 0x656b42cd, 0x91daec9b, 0xb8a4886b, 0x93cb62c9, 0x01f20c23, 0x6209106c, 0x73928c14, 0xf6c3578e, 0xd1b9cd13, 0x2c024743, 0xfd19a9f2, 
    0xe76f40de, 0xc38c055f, 0x93531925, 0x18f4a9d3, 0xd7a9540c, 0x6e2d7885, 0xdea3fb7d, 0x4f8378df, 0xee227d82, 0x59db6055, 0x20cb0a20, 0x2067a42a, 
    0x21ed1fd6, 0x00ff5af1, 0x210e3fc0, 0x432db5d2, 0x46dd7b53, 0x4b7b5bce, 0x464c2549, 0x340f53fe, 0xa9f2516d, 0x7a120065, 0xfa84dfd5, 0xb4859725, 
    0xb7551aa4, 0x8f23d7d9, 0xd8169835, 0x619f3ca3, 0xdfe29f5e, 0xdfc2bfd9, 0x628427b4, 0x634be33a, 0x922048e2, 0x86533f3d, 0x75070256, 0x388fefc2, 
    0x626d0391, 0x80941fbc, 0x637e4e46, 0xa5c2a904, 0x423ff4a4, 0xfa13b1cd, 0xb98271b3, 0xa5a29ff9, 0x97341adc, 0x0d0ff796, 0x9dc795dd, 0x073bc20d, 
    0xc8b9408a, 0x393d7860, 0x8d7ecdf7, 0x8b4d5ff8, 0x5ba1d04e, 0x74d25875, 0xb48bb059, 0xc031e00d, 0x90af39ec, 0x0b7c257e, 0xf7ec2ff1, 0x8fe1cfaa, 
    0xd6465a17, 0x5af7ccf7, 0xfb66ab76, 0xc0e2efed, 0xca482857, 0x56b912b2, 0x6c871b19, 0x869ff413, 0xbfac61fc, 0x783d7c83, 0x6f4fb1d6, 0x480b9f2e, 
    0x23e37051, 0x02ee6823, 0xc0f31c95, 0xe3e935c9, 0xf1797f13, 0xdde15f58, 0xfccb3a76, 0x0a7aeea6, 0xcad96ff6, 0x6278ddc8, 0x210d0969, 0x5fc862b9, 
    0x1c785525, 0xfeb70576, 0x9eaff739, 0xbd748e87, 0x345f2449, 0xcb104ddb, 0x1c367047, 0x7dad67fb, 0xdd1ffb05, 0x3c8737c1, 0x679e1f45, 0x0a065d94, 
    0x63129158, 0xcd7c3b80, 0x780e9ce6, 0xcf301fc9, 0xa5a28a95, 0x9cb9ef46, 0x4d374aeb, 0x2960d21e, 0x337d1cc0, 0x87de9447, 0x5350adf2, 0x34f1571d, 
    0xf3573d65, 0xcfec65ae, 0x6c3da939, 0x8366db7c, 0x27a2d249, 0x8ac49174, 0x0047ea39, 0xbfdad313, 0x6b00ff35, 0x78db16ef, 0xce4de2a3, 0x6b106b8b, 
    0xf744291b, 0x711e3113, 0x81813494, 0x370a9bf9, 0xe2182833, 0x8f91e34c, 0x7e8a1fd1, 0xbef0b528, 0x4fdcb380, 0xd461b415, 0x4430b3b4, 0xb30c9c4c, 
    0x7de40170, 0xd7915f71, 0x253ed7f7, 0x0935afd6, 0xf2addbfc, 0x23cb9279, 0x6e7bce7c, 0x318ee73c, 0x7acd7d92, 0x534e3f9c, 0x8fe8ad73, 0x5aabcfa1, 
    0xb4af298c, 0xa023f9db, 0x56cdb5d4, 0xd7690c3f, 0xb3aa7953, 0x93d927c9, 0x18c3d498, 0x0d745842, 0xdd8d309f, 0x7390eb78, 0xe7095fe9, 0x8b8400ff, 
    0xaeac8d5e, 0x6dd7fea7, 0x0188f3ea, 0xee5c180b, 0x701de523, 0x1eaf88bf, 0xec8deed5, 0xc6cac176, 0xaca5dad1, 0x51480163, 0x41070e9c, 0xafb0d3bb, 
    0xa767f855, 0xc25ef8dd, 0x28db100f, 0x7b2449ba, 0x39e25f27, 0x506efa1b, 0x933bca07, 0x9d7edced, 0xadf69b82, 0xf5f9b174, 0xe3878e7d, 0x246e86ee, 
    0x411336b3, 0x85ba1c7d, 0x6e49e4dd, 0x79ab7cca, 0x8c238560, 0xbb31f664, 0x6e3e7261, 0x8fb822c7, 0x7b189e85, 0x780c00ff, 0x799752bb, 0xc9fe2c48, 
    0x4f121c1f, 0x902bae3f, 0x21898ff1, 0x7f4c3cd5, 0x8ae09db0, 0x7f6318ee, 0x92ac8a25, 0x8c430215, 0xf0240102, 0x5f93eb73, 0xc32b7849, 0x78b3f6d6, 
    0x4071c26f, 0xbb156fab, 0xa7823a6a, 0x8c853149, 0x2e70e331, 0xd7aafa49, 0xa43867c6, 0xaf1e35ea, 0xe4d947f0, 0x3e6b4f58, 0xfc92ae66, 0x5f879f5e, 
    0x2bfcd923, 0xdbf4d311, 0x0bc7c858, 0xb4733cbb, 0x1378b457, 0xc12d5053, 0xe798726c, 0xafbc22a7, 0x14461eca, 0x57fa1974, 0xd26be143, 0x05c910ad, 
    0xbed60f58, 0x594e950e, 0xb1d2cf6a, 0x8d5223f4, 0xbfd64397, 0x96801f6a, 0xc177b49f, 0xd93acd3b, 0xfac4dbd2, 0x8dfe355a, 0xc9dc237e, 0x092d292a, 
    0xa0640739, 0x76f03c6d, 0xbe621c9c, 0x7b23f85d, 0x1b7cab75, 0xe3edadf0, 0x8c359baf, 0x0140156c, 0x31aa9057, 0xaf47bbe8, 0xee6b921c, 0xba7a876f, 
    0x591c654f, 0x1d79db0e, 0x90af777b, 0xda6927be, 0x1e6fc02f, 0x414cf8dc, 0xdda49926, 0xc3b46eca, 0x1262c430, 0xc70ceca0, 0x06c220ee, 0x1d69e724, 
    0xc4adaf41, 0x253c6c3e, 0x2dfaf213, 0x72e0acc2, 0xd5f02fde, 0x3c13af86, 0xdd992fb1, 0xd77be4c0, 0x7ac87eb9, 0x6ba4a326, 0x710d239e, 0x48bc4db3, 
    0xf2422d9d, 0x92cbdb64, 0x1100404e, 0x9e41de81, 0xa9fe78c4, 0x5bb5bc08, 0x1b495888, 0x72eaea80, 0x3f981e18, 0xf0897d95, 0xbf4def3e, 0x6c8a06f0, 
    0x8e258e62, 0xa5421331, 0x030c234b, 0xf0181dbb, 0xfefc3ce7, 0x12e6e195, 0xd7b1b17c, 0xdac9dd7f, 0xf8ab45e7, 0x2ed14a8f, 0xf0d71784, 0x7857ca5a, 
    0xae045f49, 0x0de6cf48, 0x8400ff52, 0xf4dfc3ef, 0x00ffb318, 0xfccd95bf, 0xf64df142, 0xb626e293, 0x742cd5b4, 0xdc35d6f8, 0x190d9797, 0x94f9c966, 
    0xa063dc08, 0xdc2a47ce, 0xf05ff37a, 0xf41f6b9e, 0xf8bfe831, 0x00ff271b, 0xcd89d723, 0x5d186b16, 0x8fe56327, 0xb85a5fdb, 0xf70e3cd3, 0xbced6011, 
    0x90640c89, 0x86613eae, 0x958f04c1, 0xa88c334e, 0xa6f5f935, 0x7ce53693, 0x8a798c15, 0x9ebd8f36, 0xefab3dbd, 0xfea3db6f, 0x00ffdc49, 0xfe0ffdf5, 
    0x137c2585, 0xfe9b75a4, 0x5300ffb9, 0x49e4a25f, 0xf31a0c2c, 0x3c370ffd, 0x7949eb6f, 0x2ef1fd22, 0x6dc1792d, 0x630792b1, 0xe0afbdd6, 0x0773b7ae, 
    0x5cec6e87, 0x0c6d7343, 0x786214cf, 0xf9149955, 0x8d0d6d72, 0x71ccdcd8, 0x8c93649c, 0xff5d8ad7, 0xfb97cb00, 0xd72bfde9, 0xc87f0f3e, 0x00ff503f, 
    0x00ffa6af, 0xd75771d1, 0x3e93b760, 0xc8a37a5e, 0x8b461fbe, 0xc87acdae, 0xd6285b1e, 0xdb899578, 0x838381bb, 0x23fb9ad3, 0xcda28de0, 0x4aad49a4, 
    0xaaa136ef, 0x923c9b37, 0x8063c41d, 0x463b4f8a, 0x579c0438, 0xff003ec7, 0x57cd8f00, 0xf957bdfe, 0xf09b7dad, 0x7d44fe37, 0xfcc3fd33, 0x9c6b7ecd, 
    0xe9879636, 0xcd7a3c9c, 0x1ee4ce9f, 0x298b5584, 0x08f3de5a, 0xad7fb77a, 0x00ffb056, 0xffc3535b, 0xfeab1f00, 0x94aff5f7, 0xd856de67, 0x65e107fa, 
    0x838191dc, 0xd6afe39c, 0xf8f6ebbc, 0xaa9d4ef0, 0x3ec34ff8, 0x4ef3b825, 0xfd7369a1, 0x04a48a9e, 0x2459a468, 0x90ddb83b, 0x07728cd1, 0xef9a8327, 
    0x1f7418fe, 0x2be61ff0, 0xbfb9fd9f, 0xff6891e4, 0x8717f600, 0xdc4400ff, 0x7561de57, 0xf9993fc1, 0x6a4c2766, 0x00fff9b1, 0xeb1f8fe0, 0x65f11a5e, 
    0xcf15979e, 0x7427ecda, 0x1bbaa28d, 0x70e79cba, 0x8e7364c3, 0xfb4acf71, 0xaf6ee15f, 0x507ca575, 0xa4ad2cd3, 0xa6eeedf2, 0xaf13398e, 0xe8710204, 
    0x417d304e, 0xdac057fa, 0x3d94fc5f, 0xc7bbfe2f, 0x3efc765f, 0xc19200ff, 0xccd77fa0, 0xaf00fa7f, 0x083ecc9d, 0xd57bc51a, 0x167fec11, 0x523c8523, 
    0x7b5b6b1e, 0x5bdd96c7, 0xca41cc75, 0x5fedb20c, 0x1ee7f241, 0x9b19d7a4, 0x6905fa4f, 0x0ef800ff, 0xbdf8b42b, 0x342300ff, 0xbfeaf51f, 0x0fd71bfa, 
    0xb5551d5f, 0xc2dd6337, 0x41a88452, 0xd9ffd0b5, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(DistortionEffectNode, "Pincushion", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Distortion")