#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Hue_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct HueNode final : Node
{
    BP_NODE_WITH_NAME(HueNode, "Hue", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Color")
    HueNode(BP* blueprint): Node(blueprint) { m_Name = "Hue"; m_HasCustomLayout = true; m_Skippable = true; }

    ~HueNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_HueIn.IsLinked()) m_hue = context.GetPinValue<float>(m_HueIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Hue_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_hue);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_HueIn.m_ID)
        {
            m_HueIn.SetValue(m_hue);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        float val = m_hue / 360.f;
        static float hue_width = 0.1f;
        static float featherLeft = 0.125f;
		static float featherRight = 0.125f;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_HueIn.IsLinked());
        ImGui::HueSelector("##slideer_hue##Hue", ImVec2(200, 20), &val, &hue_width, &featherLeft, &featherRight, 0.0f, zoom, 64, 1.0f, 0.0f);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_hue##Hue")) { val = 0.0; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_hue##Hue", key, ImGui::ImCurveEdit::DIM_X, m_HueIn.IsLinked(), "hue##Hue@" + std::to_string(m_ID), 0.f, 360.f, 0.f, m_HueIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (val != m_hue / 360.f) 
        { 
            m_hue = val * 360.f; changed = true; 
        }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("hue"))
        {
            auto& val = value["hue"];
            if (val.is_number()) 
                m_hue = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["hue"] = imgui_json::number(m_hue);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf3b0"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_HueIn   = { this, "Hue" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_HueIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Hue_vulkan * m_filter   {nullptr};
    float m_hue             {0.0f};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5896;
    const unsigned int logo_data[5896/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf6003f00, 0x2e796b0b, 0x51893b9f, 0x3fbc26d7, 0x32b991f6, 
    0x3c017a6b, 0x981fc712, 0xfcd546af, 0xb0f09f6a, 0x69333c6d, 0xbba5ba22, 0xe0c63bcf, 0x38c07890, 0xd73cd7e9, 0x13d47e96, 0xf05a937d, 0x5c12cce6, 
    0xbf227e8c, 0xcb3a94a3, 0x3dfab9aa, 0x8e8cbd74, 0x7f8cc377, 0xc0633eb4, 0xbce55de9, 0xc78381c0, 0x0fbff36a, 0x24baed5c, 0x411d49a6, 0x9dbd5de9, 
    0xec0bb6c2, 0xcd92718d, 0x87b357d0, 0x8643934b, 0x83cdb536, 0x8fb31b3f, 0xcb1756a5, 0x72c38b24, 0x65da6970, 0xc6cdbde5, 0x70e8a07c, 0xef773b14, 
    0x177badd3, 0x177df480, 0x3e11b35c, 0x4e266593, 0xb30ac95c, 0xf971f01a, 0xba122cdd, 0x916fe5a6, 0x69543ccd, 0xb81c8fbd, 0xffa81c7c, 0x2656f500, 
    0xb3904fbc, 0xf2f1da29, 0x5f73dca7, 0xe0db7844, 0x9ddeb52d, 0x8500ff25, 0xa1afadd1, 0xbed36656, 0x06701279, 0xadac5e7e, 0xe80800d8, 0xcdd73a30, 
    0xef962efe, 0xd3b8bc45, 0x74590bb5, 0x5909f8fb, 0xa4506e6d, 0xdac1918b, 0xc8111cc0, 0x0d820c24, 0x836d163c, 0x64bf69cd, 0xeed1e5fd, 0xca0aaf10, 
    0xf06c4fdd, 0xb4d5c8b5, 0x47892b0b, 0x36604cef, 0x495eb50f, 0x8abbb0e5, 0x4bf6d9e2, 0xee438713, 0x9e71450e, 0x1e16bb14, 0x66bab416, 0x19940fdb, 
    0x7d0038c9, 0x4c5d466b, 0x26ba43de, 0xca000b0f, 0xfa0872e8, 0xdea052d7, 0x94460f9d, 0xe94c2a9f, 0x0ebf683f, 0x0c8fe247, 0x1300ff68, 0xe4f2e534, 
    0xa43a962a, 0xe13ce344, 0xd6ae6718, 0xf408fdca, 0x4bfc9daf, 0x030febe2, 0x5cef6ef8, 0x6bc3fcd4, 0x85631506, 0x7ec8d272, 0x9e4c8fea, 0x3ffa8ae7, 
    0xc400ffe1, 0x5ac0237d, 0x8b17bd5e, 0xc28fb7e7, 0x7db25617, 0xa472edb3, 0x0aa79d49, 0x9fbb900b, 0xc94880ee, 0x7c2cbf22, 0xbc39e377, 0xdd9be275, 
    0x60c5324f, 0xd6e9ba92, 0x9efd1c72, 0x3dc877df, 0xf7648c33, 0xc48aaf39, 0xcf49dee3, 0x78ef4a86, 0xe9efb376, 0x2e669ef8, 0x9bded5b7, 0x548f8ebd, 
    0x22bea0fd, 0xcf13eade, 0x509778a7, 0x72e46cd0, 0xd769d8d1, 0x1fa33806, 0xd693fad4, 0xf9c27fab, 0x00ffa7f8, 0xffbff643, 0xfead8100, 0x785bc835, 
    0xbc3ac44f, 0xc3c3e266, 0x09a7d6ba, 0x6c6c1924, 0xbb159924, 0x613860a9, 0xa5e21ec7, 0x7f8500ff, 0x13faefe2, 0x00ff4d3c, 0xc27f8982, 0xf1e331be, 
    0x67737752, 0xeacdea80, 0xf8be3edb, 0x7d717d35, 0x6eaf15f1, 0xcfdd32a4, 0x87248d0c, 0xfe6e8df8, 0xc45345d5, 0xdedd1c1e, 0xe23ee34c, 0xc30d3eb3, 
    0x3bb4f111, 0xfd703f06, 0xf673abfd, 0xd744b6b5, 0x9c71307c, 0x2beeefb9, 0x93556df6, 0x68fed97a, 0x8637ebfa, 0x38b5fe77, 0x4b650e7d, 0xb8b05982, 
    0xa51e5deb, 0xe9f0822c, 0xc9f040f3, 0xf8e10c18, 0x1f03f520, 0xbe730d42, 0x756f811b, 0xc1212b9b, 0x01389eb9, 0x5fb8ed3f, 0xf19b5eeb, 0xc39646c7, 
    0x72a99ee2, 0xfc295681, 0x7f0e8a90, 0xff8e82e5, 0xda9aee00, 0xa2921a15, 0x00ffa6ba, 0xf9a4181b, 0x2dd1845d, 0x5c80b3a1, 0x753748dc, 0x7f753fc1, 
    0xc2977ba5, 0x29f41a5d, 0x4d07b9be, 0x5cfd97b4, 0x7a9d8967, 0xa0fb29e4, 0x077d9efa, 0x0a4ff27a, 0xc1e789e9, 0xc8377273, 0x8a6e4fe4, 0x3ba75278, 
    0x19a7dfdb, 0xee959e23, 0x3c88075a, 0x96c004e8, 0xccee0d94, 0x3f9ec5bf, 0xce92afc8, 0x673fddb9, 0xd6e6a94f, 0x34d9a3d9, 0x8db7a179, 0x554b0456, 
    0x72407127, 0x93d471ce, 0xf6dfbcd6, 0xa603f88f, 0xecf069fc, 0x4fb3c5da, 0x2a0de36b, 0x256161c2, 0xe2f6d1ae, 0x692b9a11, 0x335f3972, 0x09503700, 
    0x9beeea1d, 0xbb0443e2, 0xdccdbc1d, 0xcb5fafe0, 0xe36db915, 0x9610d366, 0x721b2c76, 0x831d8c85, 0x3dfd1ca8, 0xd179f2eb, 0xaaaa60c5, 0x3c9a6ed4, 
    0xdd744639, 0x26f2b9e3, 0xf8bf3889, 0x95316532, 0x51bea70d, 0x4e3b08c6, 0x9aa31e41, 0x5962bfe1, 0x63f1573c, 0x8f8ebac2, 0xdfdda369, 0x953fa343, 
    0x6ce3a41e, 0x3022f532, 0xf438c3ed, 0x71c6c019, 0xf049615f, 0x1df14777, 0x63fbd6ed, 0x465ea16d, 0xacd95cf2, 0x5c49beed, 0xc4fcfc92, 0xe1246e2b, 
    0x2bc63386, 0x8717f0b9, 0x77f02d7c, 0x2b3cd142, 0x9536daa0, 0x35fba9a3, 0x2499b7ad, 0x108b1bd8, 0x199bd959, 0x35cf493d, 0x27fe78f7, 0xa9523995, 
    0x9f955782, 0xd3747b32, 0x2bf658d5, 0x95705a63, 0xf9a9ed1d, 0xf85efb3d, 0x5500fffa, 0xe07585f8, 0x2b5b8647, 0x634e0e0f, 0xb44182bc, 0x498e79cb, 
    0x416500ff, 0x27f99ec2, 0xe007aeb8, 0xcffbc29f, 0x8632fe89, 0xc29211d1, 0xdcde13d7, 0x3f13e105, 0x27568f2a, 0xb5a63e80, 0x1f6b00ff, 0x0ff14316, 
    0x8df89cf6, 0x926e58aa, 0x965cf3da, 0xb0eb1dde, 0x8e108bb0, 0xb37cc633, 0x7db5d7d7, 0xfc3bfb83, 0x87e18724, 0x95b72081, 0x3f6ed501, 0x49252fd2, 
    0xd84bab4b, 0x5401000e, 0xafd7d381, 0xca68f15a, 0xd75d71b6, 0xf4df69c4, 0x4ee1c84b, 0xd39caa58, 0x780eaf3b, 0xeef04c3b, 0xdba76d8d, 0xc250962c, 
    0xdb6d58b8, 0x38e78e6a, 0x7a4f7dea, 0xb2c9fed3, 0x8b9f00ff, 0x6af8fbbf, 0xf3b82d56, 0xa6af9649, 0x9295e254, 0xabee853d, 0x83cfe723, 0x323e2470, 
    0x53def0c3, 0x53abfc6d, 0x351bbdf6, 0x3bb10a4f, 0xa81f3173, 0x33862fac, 0xa60de2e7, 0x7f09e609, 0xffe81af4, 0x77286c00, 0xc9141e6a, 0x6f0f2ec6, 
    0x56b57da5, 0xfca38793, 0xeaeb4ecf, 0x0e4ff3ec, 0xd746636a, 0x94518df4, 0xc1de58ba, 0xaa3bea74, 0xf2c3ac48, 0xfd97be06, 0xbd262da0, 0x00ff16d7, 
    0xebda8e4e, 0xfc48964e, 0x432a859b, 0x8d948938, 0xe5373bdd, 0x9668385f, 0x06d33569, 0x184fbbfb, 0xcdf94fce, 0xa2d7997a, 0x1d1e867f, 0x189ec0f0, 
    0xb537d320, 0x202b97c9, 0xc79da791, 0x4e669b3e, 0xa78b5729, 0xd6166238, 0xdf7af4b3, 0x395532f0, 0x46cc2e21, 0x99b605f1, 0xba266e6c, 0x1db235fb, 
    0xdd8e49c6, 0x3d71dbed, 0x573bec09, 0xf6937896, 0x4d7c689a, 0x73970669, 0x5d86b530, 0xa484b4f3, 0x71c11406, 0x20075bc6, 0x23d93000, 0xe273bcd6, 
    0x57ddc567, 0x6d4e37c5, 0xfb74d03f, 0x87448e57, 0x199693a9, 0xe024e739, 0xa49ffb60, 0x7ff8081e, 0x575ff17b, 0x7074d0b1, 0x9784bad6, 0xc269e222, 
    0x24e02d92, 0x8c1e84f9, 0x38400a49, 0x38a027e7, 0xce35c7fc, 0xeca98aa5, 0xd5478f30, 0x3ef2f475, 0x9d89133f, 0x7a532879, 0x4b78401f, 0x9fc57fe2, 
    0xb723be89, 0xde82f7f0, 0x0a6ed9d6, 0x1157d734, 0x03c97e09, 0xe3b6e416, 0xaf5fc0b9, 0x7dcd8173, 0x44fbf0b9, 0x7f780d6f, 0xb859834f, 0x02f1d1fe, 
    0xdd5d1ac1, 0x30adda05, 0xed80bd51, 0x8aebc996, 0xbf852ff3, 0x813f740d, 0x1a96449a, 0x7f9bd76d, 0x146d0c7b, 0x64efb7f2, 0x8e8201c8, 0x49503e32, 
    0xbdda23f5, 0x6916c1a3, 0x789d1f7b, 0x3872e6db, 0xfa39dd6e, 0x8761f29a, 0x734e3ac6, 0x2af7d595, 0x178a3a85, 0x115f399b, 0x1f1ad0fe, 0xad4b3587, 
    0x788c4607, 0xfe30c58b, 0x5f12ade9, 0x2325182e, 0xe4982521, 0x93cb8e03, 0x5fbee2d8, 0x00ffa3fd, 0xc073fd68, 0xadcbb297, 0x3eb7b66a, 0x78b3ba3d, 
    0xe90fdfb4, 0x8da6454c, 0xe602291b, 0x83bce476, 0x19872871, 0x1cc0313f, 0x91d47eea, 0xf6c7f0cb, 0xcd65f0b7, 0x9b56beb4, 0xa55864e2, 0xdf5f088d, 
    0xf5f88af2, 0x857ddece, 0xab6b7f7e, 0x0b356e70, 0x7d96e78b, 0xcce5e642, 0x9dc5ccd3, 0x49dc719f, 0xaddf9324, 0x169ec61e, 0xe555849b, 0x26d56b2b, 
    0x85ba35b6, 0xf2f5d5e3, 0x36f69f3d, 0x4d7c74f8, 0x4eabe1e3, 0x215d4ba2, 0x675cc677, 0xa790ed74, 0x1f3300df, 0xd3de577c, 0x1528f95b, 0xf18a017a, 
    0xe16fd9df, 0xe11bf8f3, 0xe8709bde, 0x475ca8ab, 0xc1adcce6, 0x7e24e32c, 0x037fb50b, 0xab73bb5e, 0xe2524c24, 0x7f878527, 0xc1dd2bbc, 0x8a9242a5, 
    0x50e8a9eb, 0xdc2f2487, 0xe3c0ca84, 0x9e347e24, 0xfe787f73, 0x424d5e75, 0xa9547207, 0xdf34b907, 0xbfea43b7, 0xfeaed0f7, 0x7d371d69, 0x187e9bcf, 
    0x277e9bea, 0x66c7b669, 0x1dcf091e, 0xd16be67e, 0x1b6c00ff, 0xc2477d47, 0x9f19084a, 0xcf57d4bf, 0xef0600ff, 0xd1f8e4ee, 0xe5e5c6a4, 0x25b9671f, 
    0x0df978b0, 0x5cfb117d, 0x78aacfc8, 0x6b859c30, 0x337056c5, 0x5f7364b4, 0xafaa4e5b, 0xbdb727cb, 0x9cba33fa, 0xbe49a8d4, 0x66789c87, 0xbdf049eb, 
    0xe2abd6e5, 0xe8a393fb, 0x9034f096, 0xeeb9135c, 0x24a45265, 0x455a0071, 0x11fe9520, 0x5e83d793, 0xc603f151, 0x7c105f17, 0x6f717d63, 0x1e9d1661, 
    0x2cdeb1a4, 0xc2910965, 0xc77cc222, 0x19734352, 0x15feedc2, 0xb915e339, 0x3fea22f1, 0x6d69ea10, 0xf6d68c3c, 0xa351bc73, 0x6a2cd190, 0x18cb2717, 
    0x1fb04b52, 0x2b4ece88, 0xcf217ecf, 0x82f18bfd, 0xbf2f18e2, 0x8d636db2, 0x56253716, 0x18c28c14, 0xe0f253ed, 0x3d893fb9, 0xe39cf2eb, 0xb163c53e, 
    0x76d3c233, 0x7cda6e8a, 0xe6c4878f, 0x74733115, 0xe2d4a221, 0xd3c6643c, 0xb9b4d45e, 0x0c712fe0, 0xb75465bf, 0xc0459761, 0xe1606b8f, 0x8cd051f8, 
    0xfd0a0031, 0xfc9efd02, 0x1ff06f0d, 0xf5d4a0e1, 0x1baff661, 0xf6228ef8, 0x8c5359f6, 0x71121446, 0x8c5162b9, 0x38b19c9c, 0x033c9baf, 0xf80cbfe0, 
    0x3ec4e29b, 0x4952d521, 0x5be123bc, 0xd55edb38, 0x35fb5425, 0xc020cadd, 0x48b01332, 0x606f20c7, 0x647c794b, 0x846ff49a, 0x9ff5159f, 0xd524fe8a, 
    0x2baa513c, 0x294fdbdb, 0x9399663a, 0xa1d6e9e4, 0x0311a48a, 0x6241e1c0, 0x27d9cc07, 0x32c8ed9a, 0x9131e2b8, 0xc9de51a1, 0x3f2f3bbd, 0x054b8f3d, 
    0x7b92f787, 0xd0a4eed8, 0x4bfc203e, 0xf1e3d7b8, 0xa695ceb5, 0x69bad8b2, 0x77f6d93f, 0x244a2b12, 0xf2fc1add, 0x7fe39110, 0x5a8f8c71, 0xd7837ff6, 
    0xf099fe7a, 0x4350c497, 0xfaebdde4, 0xb5619c06, 0x8c188bf3, 0x669413cb, 0x72b3b31b, 0x3848950f, 0x46bd0738, 0x8386c835, 0x33dec270, 0x6d12273a, 
    0x828eb11b, 0xc54bf09d, 0x00ffaa36, 0x9ea62d10, 0x36fdfcdd, 0x83f91157, 0x8c61c021, 0xf7d5fc7a, 0x384ef0b5, 0x6b0bca3a, 0x57b5ad5b, 0x25f5c84b, 
    0x7f8b514a, 0xc687f081, 0xb85d770d, 0x67e1bdf8, 0x00ff2ed6, 0xf686a6b4, 0xe94beeda, 0xc0445016, 0x66144bab, 0x07632c46, 0xd77afd81, 0x3978a82f, 
    0x16dacfb5, 0x11e70c5f, 0xcb6b00ff, 0x2a1f63e7, 0x03df1909, 0x5d310aa7, 0xae45ed2f, 0xe111bfc0, 0x57cbcf82, 0xea5e2dd3, 0x556e8b46, 0x8e0db8d9, 
    0x7d1e0087, 0x19bed46b, 0x431d12f8, 0xaef1a2f6, 0x6d1e2cbb, 0xdc0d29b4, 0x2d94540e, 0xdab91a73, 0xba818e71, 0x3bbe7a7f, 0xf5a7861f, 0xba9b4ae7, 
    0x1cb92f4d, 0x57cda732, 0xdbe87397, 0xca2e5d24, 0xea3f650b, 0x9efa9cd7, 0xea5c5071, 0xdbd23d4f, 0x57f7c0db, 0xc2b11d52, 0xf463498a, 0x18176aa6, 
    0xef80c12c, 0xe027bdd6, 0xb9e382bf, 0xd4cd1ab2, 0xa7ab5b02, 0x3c960626, 0x018e31f9, 0xf5098e5c, 0x56d1d51e, 0x3d77e551, 0x7cd5c168, 0xc107e188, 
    0xea1000ff, 0x5b2a4f20, 0xcb7fb359, 0x3d909326, 0xffd13af0, 0x5d470a00, 0xd69e00ff, 0xfff0f7bf, 0x427d8500, 0x461b0c9a, 0xb7fa5855, 0x1bec5f5a, 
    0x1de7f97f, 0x47136f78, 0x1d0a7bb8, 0xfb29f9d9, 0x00ff5f28, 0xf34bfc69, 0x2d0175a4, 0x3cb10f1d, 0xe86be48f, 0xd6c2da9f, 0x5af0b816, 0xb01d75cf, 
    0xe6db58fb, 0x91c37c02, 0x1fd0f1f2, 0x9aafc053, 0xdae9013e, 0x895fc2b7, 0x15f14647, 0xd59bdb8b, 0x19558676, 0x4932560c, 0x7dc5b807, 0xd862fb1d, 
    0x3487cfa5, 0x79434afd, 0x6b8e4cb3, 0xd528f4bf, 0xdb42ecca, 0x2800b19c, 0x3d9641c7, 0xd7be0687, 0x00ff8b0b, 0x5d228e63, 0x2945ae14, 0x4ab200ff, 
    0xfd523e77, 0x20be8af7, 0xde6867cd, 0xae792644, 0xba91f0cc, 0x8a643e44, 0x1f55f6d8, 0xf79c4127, 0xbff050af, 0x8b5f5bc2, 0x95aea55a, 0x5adddaaf, 
    0x6d96291f, 0x72c41842, 0xeb9212cd, 0x3e92d306, 0x749caf72, 0x4fbcc64f, 0x2712d7c0, 0x6edd3488, 0xa66dcde0, 0x35c512cf, 0x8f774ac4, 0x3a881636, 
    0x2c23ed7a, 0x15db4107, 0xf10fbeef, 0x3f9af00d, 0x374b5fb1, 0x99562189, 0x8fbbf4ee, 0xec24452a, 0xff0862c1, 0xf8c35600, 0x35e7c871, 0x424cb5f8, 
    0xcbdb2f8e, 0x7ee2df66, 0x583a397b, 0xe3b13785, 0x3fb400ff, 0x35d7e4c4, 0xa2377ce9, 0x1d7e16a4, 0x5b3799b4, 0x99106d58, 0x32553b63, 0x1610cc07, 
    0xb35c70e4, 0xa9e3020e, 0x45fc9efd, 0xfdc5a76b, 0x4a81249b, 0xff9e296f, 0x0f24bd00, 0x35c1abc9, 0x0f4f0afd, 0xb072f648, 0xe5dca179, 0x0b5d21d7, 
    0xe7018e0d, 0x39f47a04, 0xc14fab1d, 0xd6b86bbf, 0x7986616c, 0x6592252d, 0xd6c75c84, 0xbf0f3d36, 0xfbbec64f, 0x171ecc21, 0xbaf60a19, 0xfad45b7a, 
    0x5a7e2dfc, 0x7f1f698a, 0x585e141f, 0xb52545db, 0x393077bc, 0xdae4e1da, 0x03c1c0cb, 0x7bb73507, 0x1fbc51f1, 0xbd54e7f0, 0x44d24993, 0xf73c6949, 
    0x9b334533, 0xf119818d, 0x055b00ca, 0x5cedb9b0, 0xaea8c397, 0x5f54a834, 0xa8a8a65e, 0xc1d6cc47, 0xd403dd0f, 0x73f14fd7, 0xbfd578f6, 0xdb018f68, 
    0xf5bae85b, 0x2c2c87b6, 0xe0495b65, 0x968f2e3b, 0xa7cea8ca, 0x33b604e5, 0x0ecec183, 0xe7fcf42b, 0x1d864a11, 0xadddd9cb, 0xd743af57, 0xe8f249c4, 
    0xe03a3fb6, 0x85f1bcbf, 0x3b7588ef, 0xa1d6bdbc, 0xd32d7697, 0xb007707b, 0x7d057de0, 0xd03af0e1, 0x17edc3b7, 0xce0d7056, 0xb4daa6a1, 0x9092d48f, 
    0xfe2763ac, 0x7de46b02, 0x888fe14f, 0x8ff80d7e, 0x8ceff05a, 0x6d7499f4, 0x0a2d6c4f, 0xe2391ebe, 0x0c79bff9, 0xf15c8783, 0x70e87890, 0x878fea6b, 
    0xa2a9a6ba, 0xb4f0367c, 0xdc717636, 0x43a647d9, 0x39c9e1d4, 0x0c633b6e, 0x033cf32b, 0x3aeda772, 0x3cabafeb, 0xe4eb3bec, 0x9ee47a76, 0xb6c4b445, 
    0x6b3da136, 0x68009feb, 0x8ef04f63, 0xff421e93, 0x4e44a200, 0x1a940f3a, 0xf1524ff8, 0xaec33aec, 0xcda5259f, 0x473af2a4, 0x00f76820, 0x0832d519, 
    0xf615c9eb, 0x8cdfc55f, 0xbfc007fa, 0xea6a7f03, 0x118d6df2, 0xa3acac6d, 0x40ea9a19, 0x7bd158b8, 0x067d329e, 0xf27aae49, 0x76f753ab, 0x93520a3d, 
    0x307aec52, 0xcf750c96, 0x368f06fc, 0x72fc5f0f, 0x4f7532bf, 0x46e3b3db, 0xdd2d7db1, 0x1d1e6893, 0x0e9390b3, 0x704df69e, 0xd26da7f1, 0xe8271916, 
    0x00ff5405, 0xe5f8d986, 0xef4100ff, 0xa0e07f0f, 0x75f100ff, 0x5395fdcf, 0x8600fffa, 0x9987e632, 0x09e26b8d, 0x9ff055bc, 0x6e8a9fe0, 0x4da94ff6, 
    0x736f7b73, 0xc5f17e72, 0xfe07b8bc, 0xdfe915f9, 0xdaaa2eb7, 0xa2a8c35f, 0x7695bf8c, 0xdb08275e, 0xa38ce57f, 0x9e7a9e27, 0x177ccd2b, 0x179ddbe0, 
    0xdcf05df6, 0xcf111757, 0xd36ba573, 0x8347bc32, 0x8c49911c, 0xad5fdf7f, 0xcded3f7a, 0x1be06934, 0x89db6408, 0x71979da2, 0x3011e703, 0xbe00ff18, 
    0xb3e5768d, 0xc2aacae5, 0xd02f676f, 0x02a60fc7, 0xf8d4f5a7, 0x1e65ce2e, 0x356f9a1c, 0x7197dc45, 0x7c0e712c, 0x243942a8, 0x42bc00ff, 0xcff11da9, 
    0xd92ff66a, 0xf2c400ff, 0xb8dd1a6a, 0xd3054b80, 0xa5595e89, 0x0131c8b8, 0x3b39a78e, 0xafa08f82, 0x9aa3d316, 0xac48bcf0, 0x83a10ef7, 0x851c9c01, 
    0xae830e04, 0x03bdd607, 0x5d12cce0, 0x6f9e2ede, 0x1d39f46e, 0xdb7b7b64, 0xb8493255, 0x63b23163, 0x780e95ee, 0x7a9f421d, 0xb910e7fc, 0xc7e7a6a3, 
    0x2f9c60e2, 0xc3f85ce6, 0xa8a91e63, 0x77614bda, 0x154bab6d, 0x5cdd9184, 0x3704305b, 0x309224da, 0x29e54ec8, 0x8e204411, 0x633579aa, 0x6e858fe1, 
    0x75283c6e, 0xe71a5097, 0xdb8eb356, 0xc6959f03, 0xf9f3fa48, 0x1aeb9b57, 0xbc8ee79d, 0x58de6d6e, 0x8d2d5e62, 0x985a1ec0, 0xb143f9a3, 0x240349ea, 
    0xf535499e, 0x25cdc32f, 0x26cd4b35, 0xff33c2d6, 0x8aee0800, 0x94e1d2bb, 0xdbb8bb85, 0x54cf14b4, 0xeeee5850, 0xf42b1d4f, 0x2ac016ee, 0x5793f6f2, 
    0x7df5b2b2, 0x00ff4a7e, 0x973eb585, 0xa6eea32e, 0x478b3df7, 0x9ba86609, 0x9cecae42, 0xaf753c77, 0xb316f064, 0x39906db5, 0x9e031400, 0x41f28a3a, 
    0x0b199d17, 0x4d577ad4, 0xdb485de1, 0xe164144b, 0xb57e9495, 0x4165aefa, 0xd4352962, 0xef946afa, 0x0f7aa41b, 0x92f0aded, 0xec07e3df, 0xab0be2d1, 
    0x49bc5578, 0xd667bbe1, 0x1f84ab34, 0xdd3506bc, 0xdaf5402c, 0xf51886f1, 0x88577b0a, 0x74dd7af8, 0x966807cf, 0xb16192cb, 0xa37d3081, 0xbed28f51, 
    0xa11ef0cf, 0x7f69ab6f, 0x340bb967, 0x588e2952, 0x46ca90db, 0x1adc2308, 0x95f8dafc, 0xe1d778ac, 0x4dfc8b87, 0xc75edba5, 0xfc6dfa7e, 0xead6e2d6, 
    0x6260972f, 0x00396e53, 0xb53e52a1, 0x9a1fe6f8, 0x7bd3ea9c, 0xe89f9fae, 0xa326ed7c, 0xf4b9a739, 0x873fc0bf, 0xf1377e96, 0x7eabe645, 0x964b8700, 
    0x0f001c13, 0x70bb49de, 0x1c6dd827, 0xfe95d77b, 0x8332bed7, 0x85153fc7, 0x4a93b8bb, 0xa16820d0, 0xc434dc5d, 0xaf0742e2, 0x3ea0cf45, 0x2bfcd3b5, 
    0x7ca7bdf8, 0x693bf83c, 0xbbc443f1, 0xea4e9d74, 0xb408e6d2, 0xcfb35818, 0x4055ae72, 0xc938a75e, 0x7c0d8027, 0xa8493ca6, 0x5d52abf8, 0xf607fd46, 
    0x2ccdfc8d, 0x49eeeb56, 0x6f877ddc, 0x85bfd77c, 0xd4c9e974, 0x569276ad, 0x79fdeff9, 0x0ae5b49e, 0x746f5254, 0xd2ea9e5f, 0x45ba4839, 0x8b00ff79, 
    0x6f0f646a, 0xf647a5c3, 0x78fe33dd, 0x3ae400ff, 0xe2573ce0, 0x5ccb4e6d, 0x9ed3b7b8, 0xf245b32f, 0xc392e064, 0xffb1e6a9, 0xf130e100, 0xffe1f717, 
    0x7945be00, 0x99cfc7d3, 0x1e7a5ada, 0x9ffba843, 0x76cc7e56, 0xb27feb50, 0x2f2e8a0f, 0x6fcd1363, 0x3bb1c6ae, 0x88189413, 0x46df7f60, 0xa3e07fb3, 
    0x9b2e1277, 0x110358e0, 0xafc4b413, 0xfe6c05e0, 0x67f2bfc9, 0x00ff301e, 0xed7ff2b0, 0x00ffc20a, 0x00ff8e82, 0xbe80b7c7, 0x4a00ffb2, 0xf27f30f3, 
    0xffebad2b, 0x439ac800, 0xcbafc2fd, 0xd0623ef3, 0x8657a22c, 0x5a910870, 0x751c04df, 0x00ff5cb8, 0x35f303e8, 0x947a6bd0, 0x3e97f6d6, 0x3aac8420, 
    0xba2d72a4, 0xd8851a4b, 0x8f810c84, 0xb1dee7a9, 0x51f52ff4, 0x6bbd00ff, 0x15a500ff, 0xf23fc47f, 0xd77f5e26, 0x2500ffd2, 0xc69f85af, 0x96924ffd, 
    0x857f3ab2, 0xadd104be, 0xbbad5dfc, 0x86978b5a, 0x7f66a4e8, 0x3c38689f, 0x86f4757e, 0x8120a29a, 0x01a0d046, 0xffe1d58e, 0xe4bf0d00, 0xfd07f16a, 
    0xaf457f7e, 0x5fedb171, 0x4a373cd4, 0x128a329c, 0x296e528c, 0xbeacf4b3, 0x34685811, 0x95461dba, 0x00ff1ccb, 0x69b3959e, 0x81e0ac1a, 0x58739083, 
    0x3fdf4fda, 0xedb6d2e7, 0xa88fd67f, 0xb3fbaaae, 0x744f5daa, 0xc63369f8, 0x8af11846, 0xaef663f9, 0xf6cf8ab5, 0xb87cd49d, 0xfb742fc6, 0x1956e739, 
    0x670afb0c, 0xabfc55f2, 0xfd864fea, 0x87f92a7f, 0x00ffb8f6, 0xfb6f9d93, 0xec7fd904, 0x75d5f8d5, 0x2d9fc56c, 0xca83f72f, 0xdaa37bbc, 0x704da047, 
    0x92481262, 0x39ccd718, 0xc0c9b80a, 0x5c739ced, 0x8bfe8536, 0xeb12afe1, 0x566af3eb, 0x91e288f0, 0x74a408f9, 0x377ab503, 0x15f92fc4, 0xe0eb7f6e, 
    0x35e800ff, 0xfc5f3ae7, 0xff164f93, 0xfe34d700, 0x7e67ef55, 0x639754ed, 0xcea419a7, 0x0a3ec10f, 0x887ef1b1, 0x5b422d35, 0x5692ba96, 0x6897630c, 
    0xeb3dfd3d, 0x1615fe7f, 0x3d00ff87, 0xffef7f2f, 0x5a00ff00, 0xfc0fe197, 0xd77fb189, 0xda95fe57, 0x8eadcad7, 0xd9ff7f04, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(HueNode, "Hue", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Color")
