#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <Erosion_vulkan.h>

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct ErosionNode final : Node
{
    BP_NODE_WITH_NAME(ErosionNode, "Erosion", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Morph")
    ErosionNode(BP* blueprint): Node(blueprint) { m_Name = "Erosion"; m_HasCustomLayout = true; m_Skippable = true; }

    ~ErosionNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Erosion_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB, m_ksz);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        bool changed = false;
        int _ksz = m_ksz;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled);
        ImGui::SliderInt("Kernel Size##Erosion", &_ksz, 1, 30, "%d", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_size##Erosion")) { _ksz = 3; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_ksz != m_ksz) { m_ksz = _ksz; changed = true; }
        ImGui::EndDisabled();
        return changed;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("ksize"))
        {
            auto& val = value["ksize"];
            if (val.is_number()) 
                m_ksz = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["ksize"] = imgui_json::number(m_ksz);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\ue9c9"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device            {-1};
    ImGui::Erosion_vulkan * m_filter {nullptr};
    int m_ksz {3};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5260;
    const unsigned int logo_data[5260/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf5003f00, 0x73a4259f, 0xfe395f83, 0xf11393d0, 0xc27adc06, 
    0x1fbace9f, 0xb85bfc12, 0xfa98f8bf, 0x1d2a9d2e, 0x79d12d3e, 0xcc6db891, 0x419058aa, 0x0a3f5ec7, 0x6b697fe3, 0x93f8b6a6, 0x8391b168, 0xfafe670a, 
    0xaa30c8af, 0x749fae71, 0x0b67dbcf, 0xa243b645, 0x80a0fd13, 0xadd02b9e, 0xd7d106ae, 0x055ae615, 0x27aafdcb, 0x53bb2623, 0xd39efda8, 0xe70465cd, 
    0xf58e7301, 0x58f33bd7, 0x59b985da, 0xb57149d2, 0x6ac7754b, 0xaba2faa4, 0xa906c37c, 0x5183d769, 0x01f91790, 0xd77a2e1c, 0xc12b78a5, 0x778817fa, 
    0xefd8dc5b, 0xcb00ff94, 0x3d022b41, 0x0cd335f8, 0xd324ea1c, 0x30230e47, 0xe23641a7, 0x491e8edd, 0xe68a6077, 0x90094ffc, 0x0607e72b, 0x67e23bbd, 
    0x0aefabc1, 0xe1a7ae59, 0xf06ab5cf, 0x74cbfb01, 0x0f95a58d, 0xe3222427, 0xf59e3b6e, 0x2ade57e2, 0xad2dcd33, 0xc86b8bca, 0x90204909, 0x10bac180, 
    0x7b0ef254, 0x530bcb55, 0x86d6ee0e, 0x31d47174, 0xee19bc70, 0x5aee0c9f, 0xded6c2f7, 0x3092967b, 0x35a33e40, 0x01197abf, 0x9e013c65, 0xf037afb8, 
    0x8b06b95e, 0xaed4b4e0, 0x57a05824, 0x2ad8dd21, 0xe2c93daf, 0x112f0bba, 0x114be241, 0x15756775, 0xaf900dcc, 0x8e00870b, 0x5e9120a3, 0x4d092266, 
    0x34aa23c9, 0xe2238eee, 0x6bdb8bdd, 0x249d7890, 0x64c7ed27, 0x54228ffb, 0x32d40f0a, 0xde5d3f95, 0x159fe5d5, 0xf0c131be, 0xdb8043ef, 0x6fd5b8a1, 
    0x1999fd50, 0x76f5c54e, 0xaf777afa, 0xf1bdf851, 0x6ff84813, 0x6d4e4de0, 0xdee22564, 0xc7826244, 0x699254ce, 0xe4323672, 0xa462e4e7, 0x9e0b0990, 
    0x7a7ec539, 0xd5faf43d, 0x84dad7fc, 0x2373718d, 0x9ffb2516, 0xb957faf0, 0xb37ee196, 0xbfec691e, 0xf8b1e613, 0x8d6e82c5, 0x06fe893f, 0x7589ef95, 
    0x6bf25eed, 0xb68bb5c9, 0xc7de6696, 0xd0cf61ce, 0xa8a00f1c, 0x9ff5b47f, 0xffdd0bfa, 0xfff7df00, 0x9aca1a00, 0x65e548fe, 0x1ec0ec16, 0xd500ffa3, 
    0x6900ff51, 0x3e00ff4b, 0xf09ff9af, 0x69f6adaf, 0xfff29168, 0xfca95900, 0x023ed7c7, 0x4df1a389, 0xc81c92ac, 0xfe739243, 0xf69faec9, 0xe287759d, 
    0xf363a06d, 0xc7404879, 0xe19b55fb, 0xe1bf682b, 0x0464b720, 0xfe533760, 0xdaafadc9, 0xe13fd19a, 0x64e45967, 0x0e329efd, 0x61e0eb7d, 0xfaa8f525, 
    0x17b5f433, 0xf4319aec, 0x688e857b, 0x560038c9, 0xdb8f9ac4, 0x048ebcae, 0xe9f5c84b, 0xaed700ff, 0xc26d4e60, 0x393d0315, 0xaf4957fa, 0x777873e8, 
    0x4a199a5a, 0xda40a1fc, 0xa241d573, 0x37b8ec4e, 0xd2aba3f0, 0xfb250b56, 0x7d20e74c, 0x7aadd7d8, 0xaf98c2af, 0x9a96dbb5, 0x686b33de, 0xe79cd60e, 
    0xf5409e03, 0xe9f6f438, 0x58a35f5e, 0xdcee420d, 0x9f43f34b, 0xf6090eb8, 0x86f07caf, 0x513696a0, 0x1a035b5a, 0x2305a044, 0x5e730f3c, 0x47d71ac6, 
    0x72f39883, 0xeca9c738, 0x0b821dfe, 0x00ff8011, 0x3dee2031, 0xe62bfd73, 0xf607db4f, 0x75597d5e, 0x133e896f, 0x2d2e1896, 0xd5bd25ed, 0x153be4ac, 
    0x8db451c4, 0x10ef1f3a, 0x4eee15a0, 0x93bdd673, 0xb328f14e, 0x31c4a87d, 0x5ccd95e7, 0xb50df1bd, 0x69a897f6, 0x36d7eaf7, 0x13bcd0f7, 0xd1dd0646, 
    0x20c390ba, 0xe4093282, 0x73d2d71c, 0x593eb5c2, 0x56a9081f, 0x225555c3, 0xaaba2c7c, 0xa6b2dfea, 0xb1ec34bb, 0xaabc1dc9, 0x87619ce4, 0xd89ff37a, 
    0xce5ac793, 0x438de2b9, 0x5336d6c1, 0x0b4b506a, 0x4b8d20de, 0x09706534, 0x8a870e00, 0xfd534bfb, 0x63bcac99, 0x76e85fa1, 0x3d3c2ddb, 0x17df217f, 
    0x8e4b1cda, 0xd82a6e84, 0xbdfe8fe3, 0xfe0dbf75, 0xfd307c1b, 0xf4bb3490, 0xdbcb74d0, 0x13b7b847, 0x3c6d376a, 0xa02a2f97, 0xdb0c0962, 0xdc770341, 
    0x6cbcda51, 0x9d4e0d36, 0x6b85784a, 0x78f419bd, 0xadc6d59c, 0xcc67982a, 0x997fd5d2, 0xabf143f9, 0xc5ef25e2, 0x85da885f, 0xd361c6c5, 0x6dad5dec, 
    0x1af198ad, 0xef3f2329, 0x5c3fc931, 0xe0871576, 0x785e0c9f, 0x3a96c5c7, 0xd76c9b1e, 0x140e7717, 0xd4abe86d, 0x7200f4b1, 0x3aeb674d, 0xc58f78ca, 
    0x88aade1a, 0xd90b7551, 0x0423406e, 0x636c766f, 0xbe7a1f27, 0xfe8cfdd0, 0xe1852e0c, 0xa24ef1f7, 0xa97bc991, 0x395a6d26, 0x38b7ec98, 0x6e0097e1, 
    0x80df332c, 0xbc5e733a, 0xad9430f9, 0x91c7960d, 0x6a63da4f, 0xeeddd439, 0x7f814f7a, 0xe80dcf67, 0xb6b61b1e, 0xbab44d97, 0xcdf28d9c, 0xceae6e71, 
    0xc84800c4, 0xffc071e0, 0xffdf1a00, 0xe12f8500, 0x6903fa8f, 0x9f06f8bf, 0x22df5de1, 0xa5e66b8e, 0xb36d5256, 0x956054dc, 0xe1a77cac, 0xc48ba308, 
    0x1ca7ac50, 0x93ef3f36, 0xa1b55f5a, 0xd24dfc11, 0xa7db4ccf, 0xfe5c85fe, 0x55fc2f9f, 0xcbfeed36, 0x5d2de87f, 0x1173ed1f, 0x39fa886f, 0xbf8cfee9, 
    0xf47815fa, 0x7dccfad3, 0x6932f619, 0xd5802341, 0x912c5996, 0x30c45da2, 0xbd06d3cf, 0xb9dac56f, 0xb68db5f1, 0xb725f6b7, 0x69794417, 0xc95d85d0, 
    0x6b2abfd7, 0x7eec2ccf, 0x064ebed6, 0xf624081d, 0xc79fa4e2, 0x6985661a, 0xa971950e, 0x2758d2c2, 0x8a1c63cd, 0xb09c1b66, 0x00ff333b, 0x56fa014d, 
    0x38ab938a, 0x7ddaa6a8, 0x4525670c, 0x99ec467b, 0xbaf85edb, 0x7afac2cb, 0x514c5e5d, 0x0c543bdb, 0x03d791b3, 0x0ff08afc, 0xf7d1fe1b, 0x1ab9c6fa, 
    0x11248fe9, 0x702b4102, 0xfbcf30c4, 0x5a8f6724, 0x781e4ff3, 0x76f157f3, 0xdddcf3aa, 0x7eab713c, 0x85d838ee, 0x39308041, 0xb55ecff6, 0xb5871781, 
    0x5a6a120f, 0xdba0956e, 0xa62b7599, 0x273845c0, 0xe9493d23, 0x2bec938c, 0x12166cf4, 0x730e0e9e, 0xfef99157, 0x2696323b, 0x1fbeb45c, 0xaf8bf5cc, 
    0xbc137f8a, 0xa1697b5b, 0x00ff4678, 0xe9e28e51, 0x99b5b5b7, 0x01487e03, 0xe9c000b2, 0x1c18c093, 0xecafe8d7, 0x5bede0e5, 0xe163f840, 0xcc7df1b4, 
    0x6b20beb7, 0xcbe49665, 0x6657f72e, 0xf26c862f, 0x4edf7657, 0xf80baf38, 0x48aff01b, 0x8de39ffd, 0xc0ac41fc, 0x68cce5fa, 0xf220cbf1, 0x0ca82cd2, 
    0x2ab91e03, 0x9ae948dd, 0x2dc0cbfa, 0x5704b90e, 0x5b9376af, 0x92e215c8, 0x32aedc36, 0xf1b90639, 0x26558a58, 0x53732c94, 0x1c5c62c3, 0x5f3c76db, 
    0x24b63fc6, 0x9e7a3777, 0xc3fef083, 0x9cad3aed, 0x7d7b2386, 0x62701316, 0x8f8446a4, 0x1f7a0b4e, 0x197ca597, 0x9ee3d3f1, 0x5b1de3b3, 0xb5aed350, 
    0x4e6d3589, 0x77774cf1, 0xe368284b, 0x368d415e, 0x0e8ebcfc, 0xaee30038, 0xd7fed071, 0xcff00d76, 0x34d789f6, 0x38ea16ed, 0xf3b7ebf4, 0x0aee1623, 
    0x813b2801, 0xd75870c7, 0xda82ad81, 0x642e5846, 0xb89e8c73, 0x54c578ae, 0xd345a76a, 0x3e94cba5, 0x364e17af, 0xc7d677d7, 0xfc3dfb7f, 0x8400ff36, 
    0x910ee2e7, 0xec9bc8a5, 0x37ed93e2, 0x2035d647, 0x573bf1e3, 0x64d3aff1, 0xac0dfbb2, 0x0a84a270, 0x031885a3, 0xf7f2958e, 0xfaf05bec, 0x32c33b4d, 
    0xb1589678, 0x31217573, 0x25cb7f64, 0xb7cd5fc8, 0xd357c01f, 0x1fe56b33, 0xea73f164, 0x8c9b57bc, 0x9353cfa9, 0x8a85dfb1, 0x4c510fa5, 0x473112c4, 
    0x595b549f, 0xba2466b5, 0x7942cfa9, 0xb4d8fea4, 0x899e00ff, 0xcb9fd7f9, 0xf376d6fd, 0xe7c6e7be, 0xc6dfa2c4, 0x892cd116, 0x3f030ff7, 0xf57a6fdd, 
    0x17deda4f, 0x31da886f, 0xa9ec6300, 0xb400ffd4, 0xd4f4e52b, 0xddf163ee, 0x6d6412aa, 0xf7ebc98d, 0xfda3be1a, 0x00ff59ae, 0x747863e1, 0xba3df201, 
    0x06707c86, 0xa9555ce1, 0x72689d4a, 0x057deeee, 0x0911cb0a, 0x03fca7df, 0x895f35c6, 0x5e87f07f, 0x677d714f, 0x2fb7b621, 0x771e471a, 0xbc60f84a, 
    0x0037009c, 0x8c335e4f, 0x4f92579c, 0xfc8ebfae, 0x15ac7773, 0x102faf48, 0x80238206, 0x42afa202, 0x7a40384e, 0x07e35bd7, 0xa87ac48f, 0xfcf80e49, 
    0xfc4044c2, 0x478267a4, 0xbcd6bfd3, 0x7468c5e3, 0x1bdc172f, 0xaa40f623, 0x80fcdbbc, 0xc6400665, 0xe1a25f31, 0x1a78aab2, 0x5b53116b, 0x63eb6fef, 
    0x6776fcf3, 0xd359135f, 0xb215ad8c, 0xa7597530, 0xa6732c53, 0xc9d846c7, 0xff0f72ce, 0x92beae00, 0x11349dfd, 0x5d06cde0, 0x3e97107e, 0xca2dd432, 
    0x603396e9, 0x1bb011a4, 0x198c7e64, 0x18c195b3, 0x7ec63d18, 0xef22376f, 0x23c97b5e, 0x62a0ec79, 0x89a3a4d2, 0x14cc0a64, 0x91caf69f, 0x354f3dd7, 
    0x9fec0ff4, 0x78ad7b7d, 0x00fff692, 0x01a79152, 0x831c4342, 0x386e8be4, 0x02a0e845, 0x00000000, 0x79050e00, 0x512296b9, 0xeaaf29a5, 0x865146e7, 
    0x69546c8d, 0x4d7f5f4d, 0x869f2c35, 0x7c1500ff, 0xea227347, 0xd9361717, 0x7a7391cb, 0x673300ff, 0x931c37ae, 0x097dcd93, 0xc5474de1, 0x29f808de, 
    0x2d1ae8a8, 0xf2eaddba, 0x2b6949da, 0xbd7cce4a, 0x55f93ef1, 0x7c082e83, 0xf54e8f61, 0xda9357ea, 0xb8278627, 0x5cb305fb, 0x31255228, 0x779ce12e, 
    0xf0996bc6, 0x466d886f, 0x2bc5a9a7, 0xdbe6c95b, 0x5432663c, 0x6e4762ed, 0xc27cadc7, 0xa63827c5, 0x59423fb4, 0x52a5b27f, 0xf363bf37, 0x9a56c6af, 
    0xb7e89aac, 0xb8a55dd5, 0xee0eed88, 0x0019a95f, 0x6a0ef09c, 0x7b3a9d2b, 0xa4c711ef, 0xe1f2feda, 0x01ba05ee, 0xff76b6d4, 0x7eea3a00, 0xce9af83b, 
    0xac96e2ef, 0x2d3074ba, 0x47089b9d, 0x306b1790, 0xe3e5c7fb, 0x56f913ef, 0xe1d3ecbf, 0xc68ff147, 0xb86b327d, 0xdfa248de, 0x84983fa8, 0xff548e83, 
    0xa74cdf00, 0xa810f435, 0x96e7d2e9, 0x3cf85c9a, 0x432c2344, 0x76d21d8c, 0x7cbd8ffb, 0xe0c3a001, 0x9ae908df, 0x6d592c54, 0x60c348a0, 0xcf40e10c, 
    0x34fe4c1f, 0x455e63ed, 0x24461a63, 0xd53cf790, 0xbcc5f9ab, 0xaa76c80e, 0xb7e6022e, 0x1e780bfe, 0x176a123f, 0x07a3ae1a, 0x6de2adda, 0x162a4591, 
    0xf3d47347, 0xded303c1, 0x68a56ebe, 0xceb44ed2, 0x39d65ad9, 0xf8043f1b, 0x5d80558f, 0xd1cca445, 0x059ccac9, 0x4f4dfcc8, 0xe30a00ff, 0x08f4dfc4, 
    0xf15ff39b, 0x7cadacaf, 0x22100c33, 0x078a4a2c, 0x2fb48b0a, 0xfc2f15b0, 0x00fff123, 0x98eba776, 0x3b0fb487, 0x7eeed2da, 0xbd1efc2c, 0xd5f15a8b, 
    0x72129caf, 0xc37d2189, 0x15081b23, 0x8bed47f4, 0xbff1b438, 0x2336cb87, 0xafe43d5b, 0xca57b871, 0x4bf50e1f, 0x2bde86ef, 0x26fb6b9a, 0x3cd10857, 
    0x3508ae52, 0xdbedaff4, 0x889f2573, 0x4ab2db34, 0xc09c0ec5, 0xc1090e10, 0x70ea1320, 0xd55d237f, 0x216329a8, 0xf4a9690b, 0x26575c18, 0xa3275512, 
    0xbc7cacfe, 0x1e6b3397, 0xa0d48e25, 0xf7174946, 0xbdea788a, 0xe2ec1abf, 0x36de42f8, 0x681258bf, 0x9d6fbae0, 0xb6192eef, 0xd7310690, 0xbcd2d3e9, 
    0x11f14cb7, 0x49f79637, 0x23f106bd, 0x9b9f8c81, 0x5ab2579c, 0x865ff130, 0x6778342e, 0xfb0db548, 0x83c4cac4, 0xe33c6518, 0xc1717282, 0x53bfd2ed, 
    0x2c6c558c, 0xcdcfada9, 0x6f25a7fd, 0x7b3cf668, 0x1a76f7c4, 0xf62fb1be, 0x69709c65, 0x4a386271, 0x7f7c57a0, 0xb18c9113, 0x076e9f24, 0xd9dff56a, 
    0xfed6c4f3, 0xd616d418, 0x691695e9, 0xa8d8e758, 0xe315f503, 0x4fb6441e, 0xf9d1bc25, 0x64d84633, 0x5968a503, 0xc6d048b3, 0x0366611f, 0xe06ba67f, 
    0xe17994f1, 0xf4a13728, 0x58266ef9, 0x232b447c, 0x16efcbef, 0x5d2208eb, 0xec19de3e, 0xf3244024, 0x8e7bee06, 0x892bb6a3, 0x05f189f8, 0xede00bbc, 
    0xc7e2fa52, 0x6e2fd34d, 0x672d99e2, 0x7965108a, 0xf823b63c, 0x710e708f, 0x69adc7c1, 0xe6f015fc, 0xa9e9a1ad, 0x1d79a90e, 0x142b5ff4, 0x00ff19f3, 
    0x613e4681, 0xfbaf4ac7, 0x3ecffe46, 0x61c3f82f, 0x12beeaa6, 0xb6b8b5b3, 0x659920d3, 0x26dbc4d3, 0x45394072, 0x68270620, 0x1c49721d, 0x29e1cc57, 
    0x2925db47, 0x9a857e68, 0x92307963, 0x99f92094, 0x689d06f1, 0xb77b0b75, 0x1973cd23, 0xe0c92d93, 0x9fed6b82, 0x10c313d9, 0x3d2be045, 0x54fb2070, 
    0xcd6acbb1, 0xb89505dc, 0x557e82fc, 0xe387f7f1, 0xd55d277d, 0xce5a7d34, 0x08f2326d, 0xb8a0d9de, 0x06928e42, 0x1929ab00, 0x5f43c753, 0xd515fc59, 
    0x7c0c9f75, 0x844dd334, 0x4c0bec65, 0x31b829f8, 0x7e1f58f3, 0x2fe3eed5, 0x7ee6cbcb, 0x8f57837d, 0xaf3df332, 0x6b4b97c4, 0xc6312369, 0x6bfd1c08, 
    0x1a81cfe9, 0xd3f0953f, 0x14daba48, 0xd7378d4e, 0x83af792c, 0x8b00ff75, 0xd90f7b2d, 0x48ca6cee, 0xcf18f3ad, 0xd1d7f90d, 0x00ff195f, 0xd93f4b6a, 
    0x858fe0a7, 0x35329d34, 0xa8593cd4, 0x654b1169, 0x8894eb6c, 0x27cb0414, 0xbd80e3b6, 0x5e13d04f, 0x93717a25, 0xe5ae5684, 0xe19dd4cd, 0x9215eb63, 
    0x24e5a33d, 0xff91f9d2, 0xe3d77400, 0xffd4fe0a, 0x8847b400, 0x78fc9a24, 0x59b450db, 0x358ab09c, 0xfe51248a, 0x53e0edca, 0xa3e100ff, 0xfa8f687f, 
    0xfb3ff51f, 0x00ff17f9, 0xc25e5d13, 0xfac74b6b, 0x00ff1cf9, 0x717f7e53, 0xb99edae2, 0x0bf8ad7f, 0xb29c5ac3, 0x4fe3c5b5, 0xce2c6b79, 0x31043377, 
    0xa74f82b2, 0x5f317f9a, 0xc100ff53, 0xfe9fd945, 0x33505b11, 0x3e29df19, 0xb97e14e1, 0xbec32bfd, 0xbb36fc1e, 0xc130c09f, 0x8738e579, 0xcbd39d50, 
    0xe3013890, 0x8cf77684, 0x9fed55fe, 0xf84b50f0, 0x265278c3, 0xe236642a, 0x08ae0744, 0x3afe8f21, 0x51ceeab5, 0x2b4a6596, 0x348adffb, 0xd69775a3, 
    0x895ff252, 0xc0a482f1, 0x67111071, 0xf46a0782, 0xf57a876f, 0x0dc5dcf2, 0x974b62bc, 0x756c5557, 0xa7e7781f, 0xdd2aaea1, 0xe7d08d00, 0xdb73ae7b, 
    0xadf19f03, 0xd7400f3f, 0xeedb9137, 0xc4602268, 0xde4e8acc, 0xf88ed333, 0x9e7d8d1f, 0x48556d0e, 0xebaa5af9, 0xa6a83541, 0x79925093, 0xcae9962e, 
    0x98bb2483, 0xb8737a92, 0xdf55d803, 0x1757690f, 0x231717b6, 0x6391581e, 0x13c3535f, 0x981fa78f, 0xe6ae59ae, 0x158aefd4, 0x8f8d641e, 0xb7bd6294, 
    0x2e8637e1, 0x0de249fc, 0x8cb74b2b, 0x12c72e9d, 0x0fdeb6dc, 0x569f2439, 0x073d0020, 0xcc92afb1, 0xec99db2b, 0x855b467d, 0xbab4a675, 0x3cae4ffd, 
    0xd2b10127, 0xb30cf7ed, 0x63cf9622, 0x78b057b4, 0x8810561f, 0xcb2f9c14, 0xc479c5fc, 0xa300ff30, 0x006e00a0, 0xdb4a1f67, 0xdada2fd0, 0x468fd168, 
    0xe0ebfc18, 0x5ac659e1, 0x654cf5b3, 0x918dce08, 0x4ac17fc7, 0xf85a07fe, 0xa73de183, 0xd8060dc5, 0x53e9af47, 0x35a96b43, 0x56d77cba, 0x198d30d2, 
    0xca91d5b1, 0x7cdd3f28, 0x9963141e, 0x960c0ff8, 0x2b7c041f, 0xf67cca1c, 0xb83a12b3, 0xc7cc2ce7, 0x7dd5f73f, 0x07656399, 0xeb1ffe8e, 0x8eb91f1e, 
    0x6a77932b, 0xfd721cc9, 0xd17c30df, 0xa770f493, 0x3dcbaff0, 0x307ec47b, 0xd4ad6df0, 0xc9f565fa, 0x1e25b7b9, 0x41f0c532, 0x7d4d05c1, 0x4aa9db74, 
    0x82f9899a, 0x9dd4a98c, 0xac0fddde, 0x35fc1fbe, 0xf823fed3, 0xf66b5bae, 0x8ab3b3b7, 0x24699e36, 0x305e951c, 0xf2e7b9a3, 0xe34fbc06, 0xf16ba1e6, 
    0xeeade213, 0xec633cb3, 0xec6dbb56, 0x1ccbcf20, 0xaf11a831, 0xb53e0ee8, 0xdacfe099, 0x4600ff22, 0xac734bf8, 0x8b0f9bea, 0x3b6b9ea4, 0x29b72378, 
    0x892aca88, 0x98c7b09f, 0xbd52c7d8, 0x7df39a3a, 0xd5b95f2b, 0x48de720c, 0x65234ff3, 0x780dee41, 0x585aa1d1, 0xb4644b89, 0xa7138a3d, 0x5c675e18, 
    0x1e46d586, 0x78f69f0c, 0xff67dfa5, 0xf31b3c00, 0x7cd62baf, 0x529da94b, 0x4cd7ece7, 0x40befbb6, 0xa58a81ad, 0x260900ff, 0x3f00ffb5, 0x62df7f92, 
    0x3642c5bd, 0xb17c1ed5, 0x3db3bb52, 0xb06cf69b, 0x47f0538b, 0xdcb8248a, 0x66a10ecd, 0x4703e8a9, 0x82fe4f70, 0xa66f7f29, 0xc3e37832, 0x342ac708, 
    0x133ff068, 0xf66335fe, 0x9100ff5b, 0x00ffc50b, 0xffb012f6, 0x5557d100, 0xfff7f65b, 0xc3f39100, 0x8f06f61f, 0xf99f9af9, 0xfed1c799, 0x00ff1a47, 
    0x554f5d91, 0xdd3c9ff9, 0x48f6c759, 0x011c6498, 0x35b6d2c7, 0xb5d1554b, 0xbab31d53, 0x3996a38d, 0xcf75d63c, 0xf5c578fc, 0xfcb5ca1f, 0x2100ff55, 
    0xffe2feb3, 0xb7fb2a00, 0x9fbb15a4, 0xfa893f2d, 0xc24bf08b, 0x3c897f9a, 0x8f7eeb52, 0x2a37422a, 0xdf27c006, 0x8597f615, 0x162d5bf4, 0x1b7b2bca, 
    0x1c61ed68, 0xe44289ed, 0x5f539ffa, 0xbfcefe22, 0xff5d35f2, 0x6bfdb900, 0xee2f7dec, 0x20bfd227, 0xe24daace, 0x87a66f5c, 0x4e3dbcec, 0x6da50a0b, 
    0x5d4cb74e, 0xfeef41c1, 0xac0dab15, 0x73205562, 0xffd2cb9a, 0xfdeb8300, 0xf52f6a2b, 0x2aaff58b, 0x31e8233b, 0xdfeba13f, 0x2359090d, 0x2bcac7c1, 
    0x3a8b3fe1, 0xed771a74, 0x384be317, 0x52c71653, 0xc8b3bc9d, 0x0031981b, 0x579c647a, 0xbf0d7fdd, 0xe8fe47d6, 0x33be87af, 0xccc900ff, 0xc2fecff8, 
    0xaf257f12, 0xeafea3b5, 0x3ff1cb8f, 0xfce54cef, 0x15fbe179, 0x481e17b0, 0xcf686732, 0xbcc21e45, 0x58b755b3, 0xea528d34, 0x61685232, 0x323d30ca, 
    0x2200ff42, 0x7d3cd96b, 0x612000ff, 0x0679f5fe, 0x2200ffb5, 0x00ffb5e6, 0x86fe475c, 0x5a0396b5, 0x3f666777, 0x3c765949, 0x6fd1c6fa, 0x6624f321, 
    0x6a709cdd, 0x3f4cf6c7, 0x7fcc7fde, 0xff8f2685, 0xf07f1e00, 0xd66b5723, 0xd9ff533c, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(ErosionNode, "Erosion", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Morph")
