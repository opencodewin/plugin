#include <UI.h>
#include <imgui_json.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include "Laplacian.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct LaplacianNode final : Node
{
    BP_NODE_WITH_NAME(LaplacianNode, "Laplacian Edge", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "Filter#Video#Edge")
    LaplacianNode(BP* blueprint): Node(blueprint) { m_Name = "Laplacian Edge"; m_HasCustomLayout = true; m_Skippable = true; }

    ~LaplacianNode()
    {
        if (m_filter) { delete m_filter; m_filter = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
        m_mutex.lock();
        m_MatOut.SetValue(ImGui::ImMat());
        m_mutex.unlock();
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (m_StrengthIn.IsLinked()) m_Strength = context.GetPinValue<float>(m_StrengthIn);
        if (!mat_in.empty())
        {
            int gpu = mat_in.device == IM_DD_VULKAN ? mat_in.device_number : ImGui::get_default_gpu_index();
            if (!m_Enabled)
            {
                m_MatOut.SetValue(mat_in);
                return m_Exit;
            }
            if (!m_filter || gpu != m_device)
            {
                if (m_filter) { delete m_filter; m_filter = nullptr; }
                m_filter = new ImGui::Laplacian_vulkan(gpu);
            }
            if (!m_filter)
            {
                return {};
            }
            m_device = gpu;
            m_filter->SetParam(m_Strength);
            ImGui::VkMat im_RGB; im_RGB.type = m_mat_data_type == IM_DT_UNDEFINED ? mat_in.type : m_mat_data_type;
            m_NodeTimeMs = m_filter->filter(mat_in, im_RGB);
            m_MatOut.SetValue(im_RGB);
        }
        return m_Exit;
    }

    void WasUnlinked(const Pin& receiver, const Pin& provider) override
    {
        if (receiver.m_ID == m_StrengthIn.m_ID)
        {
            m_StrengthIn.SetValue(m_Strength);
        }
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve * key, bool embedded) override
    {
        ImGui::SetCurrentContext(ctx);
        float setting_offset = 320;
        if (!embedded)
        {
            ImVec2 sub_window_pos = ImGui::GetCursorScreenPos();
            ImVec2 sub_window_size = ImGui::GetWindowSize();
            setting_offset = sub_window_size.x - 80;
        }
        bool changed = false;
        int _Strength = m_Strength;
        static ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp | ImGuiSliderFlags_Stick;
        ImGui::PushStyleColor(ImGuiCol_Button, 0);
        ImGui::PushItemWidth(200);
        ImGui::BeginDisabled(!m_Enabled || m_StrengthIn.IsLinked());
        ImGui::SliderInt("Strength##Laplacian", &_Strength, 0, 20, "%d", flags);
        ImGui::SameLine(setting_offset);  if (ImGui::Button(ICON_RESET "##reset_stength##Laplacian")) { _Strength = 5; changed = true; }
        ImGui::ShowTooltipOnHover("Reset");
        ImGui::EndDisabled();
        ImGui::BeginDisabled(!m_Enabled);
        if (key) ImGui::ImCurveCheckEditKeyWithIDByDim("##add_curve_strength##Laplacian", key, ImGui::ImCurveEdit::DIM_X, m_StrengthIn.IsLinked(), "strength##Laplacian@" + std::to_string(m_ID), 0.f, 20.f, 5.f, m_StrengthIn.m_ID);
        ImGui::EndDisabled();
        ImGui::PopItemWidth();
        ImGui::PopStyleColor();
        if (_Strength != m_Strength) { m_Strength = _Strength; changed = true; }
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;

        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        if (value.contains("strength"))
        {
            auto& val = value["strength"];
            if (val.is_number()) 
                m_Strength = val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
        value["strength"] = imgui_json::number(m_Strength);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string(u8"\uf3b6"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    FloatPin  m_StrengthIn = { this, "Strength" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[3] = { &m_Enter, &m_MatIn, &m_StrengthIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    int m_Strength      {5};
    ImGui::Laplacian_vulkan * m_filter   {nullptr};
    mutable ImTextureID  m_logo {nullptr};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 100;
    const unsigned int logo_height = 100;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6558;
    const unsigned int logo_data[6560/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03640064, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfc003f00, 0xc7e50db1, 0xf0b881b8, 0xadf30300, 0xdf460edf, 
    0x52e87ad9, 0x2343ac76, 0x1cf502fe, 0xe169443a, 0x5c66fd1b, 0x36dc4d09, 0x013eb196, 0x3c232b65, 0x17bc1f80, 0xbbe355cb, 0x7c36dbf3, 0x499f1025, 
    0xc12500f1, 0x791b6e10, 0xb57ee507, 0x4725d632, 0xbe739c73, 0xc40d2025, 0x9e317090, 0xfb9ae298, 0x9ec3128b, 0x74852af5, 0xdcc05644, 0x9331dc00, 
    0x083ecdef, 0x89c2d951, 0x54c8281c, 0x70e41720, 0xefb93e38, 0x8aa0afd2, 0x7e1dc7d9, 0x5b01e6b4, 0x9e712a69, 0xe42afc99, 0xdaa12252, 0x8b214624, 
    0x008c5c84, 0x2339e30a, 0xc5d5e49c, 0x2a2df5d7, 0x2fd52150, 0x918d3162, 0x0aa77b9b, 0x20c08380, 0x3d3d638c, 0xddb352cd, 0xc964a689, 0x0e9063d0, 
    0x7bbc9f33, 0x26d5de9e, 0xb67de59f, 0x2c239a25, 0xdde4c665, 0x8c2323b7, 0x6aa65bd7, 0x302b1ed6, 0xdc86f859, 0x8a65a1db, 0x04ca763d, 0xc2636049, 
    0x932ad789, 0x31f37e2e, 0xb7db3259, 0x670e1bb0, 0x7123bc88, 0x024e9de1, 0xbb7459e2, 0xf5d367b7, 0x37a4284f, 0x2f952bb1, 0xb5ad721b, 0x58da5681, 
    0x4e2e2b2b, 0xd32e5829, 0x55bac2d4, 0x5068e682, 0x60242d9f, 0x1927c0bb, 0x953e35c7, 0xda85157d, 0x681f2ccb, 0x8b25e584, 0x10840e38, 0xe4e0d8c3, 
    0xda03c41e, 0xe489b8a3, 0x548927d4, 0xaa5286b4, 0x9c7392ab, 0xb5e70e60, 0x31cb1746, 0x73984f90, 0x2707b1bb, 0x9ed1908a, 0x0da5618b, 0x7cd64757, 
    0x74be3c19, 0x6b535cfa, 0x0dcb25da, 0x95bc5886, 0x67207496, 0x59644b02, 0x5a1b6680, 0x437abf1d, 0x7c86775c, 0x3589373b, 0xcc2d2c38, 0x49565942, 
    0x58b1934c, 0x32348ae1, 0x12e02b4b, 0x881d5155, 0xe0ed5850, 0x34768013, 0xb6eab60f, 0x5e2c9d31, 0x141de2c7, 0x4b32cd9b, 0x296fc610, 0x1b20c918, 
    0xe662607e, 0x54f7cb60, 0x15004f48, 0x7dbbf8d6, 0x358aa715, 0xb3680e5f, 0x5ba77dc3, 0xbfbe6cde, 0x1d9264b0, 0x56505057, 0xd568e369, 0x3265c054, 
    0x02aa0af9, 0xe6c6c9c4, 0xcc6e6976, 0xf9e62f88, 0x6b5b00ff, 0x419179f8, 0xc3c732f1, 0x270df669, 0xa71e9ac3, 0xbf001e69, 0xb9d5f4d7, 0x0120b8bb, 
    0x1116b7bd, 0x3416008c, 0x960154e1, 0xffd2ce6d, 0x9be9c200, 0x00ff84fe, 0xe000ff04, 0xacf02f82, 0x77870fab, 0x2deb5677, 0x68a5abd6, 0xa63080c1, 
    0xcdd670ad, 0x9618783c, 0x8ce6b731, 0xbb8e03f2, 0x00ff584d, 0x00ff6785, 0x7f856f53, 0xf87f68f0, 0x3d489e9a, 0x7dd7e65e, 0x7f7b8111, 0xdd87f725, 
    0x0986944a, 0xf3288aa1, 0x9c2c14f7, 0x314b127b, 0xd6c452c7, 0x90e58387, 0x7424bee9, 0x49ad3b56, 0x3e901462, 0x7158eb57, 0xe0353a96, 0x199f4f6e, 
    0x3cb71afd, 0x9e68bc1f, 0xfedbc124, 0xbf1e018e, 0xbde6942c, 0xa2b8ebdf, 0x43d77ff5, 0x9eb2b49d, 0xed2d68f6, 0x96e779e1, 0x068d4445, 0x1410334b, 
    0xad38a90f, 0x76f810ef, 0x2c34055f, 0xfbadb5ba, 0xa4f8a65c, 0x27327fb1, 0x83a52c8b, 0x6c3c04f5, 0xb46ec7b8, 0xe3590ebf, 0xcc953df1, 0xffb45961, 
    0x08543700, 0xa1ad19dd, 0xc73ec079, 0x8c00c1cb, 0x33eaa8e7, 0xfd7b52df, 0x4536ca36, 0x985aa72b, 0x0618cf55, 0x791e7c77, 0xcef69419, 0xab55d871, 
    0x487d91bb, 0x356fecec, 0x2cec6d59, 0x799ea46d, 0x0cc31164, 0x26cf4b48, 0x77008c71, 0x703acc37, 0x9dbe6d05, 0x0df4e163, 0xeefaf676, 0x186614a2, 
    0x85b6cc5f, 0xcaf381d8, 0x50d6fbad, 0x6087da49, 0xb09d9b2c, 0xfe822e63, 0x9396c3eb, 0xbb234134, 0xdfa60fb3, 0xb6b9915c, 0xb5911c4d, 0x72ba0fb2, 
    0x19b16c86, 0xe9577e05, 0xa3edd89c, 0x92b24401, 0x420ceb0c, 0x2a61ba0f, 0x33dcb84c, 0x332677b9, 0x34d07aea, 0xde29f595, 0x3ca8cd5e, 0xbb24ccb3, 
    0x8c043b64, 0x9f2ba436, 0x08af2a94, 0x7c002701, 0xbbe280bd, 0x329e869f, 0xf0657bb3, 0xb1e08897, 0xd737c29f, 0x7573cbb1, 0xed3c43a8, 0x2902b1a1, 
    0x86441b75, 0x224a8b68, 0x7247b420, 0x7a8b614c, 0x389b963f, 0x2112b905, 0xa11b0d75, 0xd1c684ca, 0x9e5ccfc1, 0x715ba582, 0xaa0b4faa, 0x11e66f45, 
    0xf75ba612, 0xeb030cd2, 0xe8097282, 0xe8c07832, 0x5985b6b5, 0x4753cf5e, 0xd6177ec7, 0xeb781d7e, 0xb2f6f05f, 0x74d764bf, 0x4b4b4a7d, 0x56e50b91, 
    0xb2949d68, 0xcac87537, 0x2308eab0, 0x18df77ad, 0x9a78033c, 0xb58bafc5, 0x56c38b66, 0x92b8269e, 0x881b2bf2, 0x571eed9f, 0x84af1198, 0x675bb90a, 
    0x05bb0a62, 0x8cc57c0e, 0xe7d8963f, 0xfbe24b3c, 0xc7db114f, 0xd565a43e, 0x67bf427c, 0x4aefedd3, 0x751ae008, 0xb656b4b5, 0x7cd855d8, 0x54ddd2d8, 
    0x04305c16, 0xa739e6be, 0xbec6b3f8, 0xe2aff82b, 0xef78109f, 0xff4bbc5d, 0xd14a1100, 0xde176adf, 0x706f7154, 0x1a2b3516, 0x04484028, 0x380e1490, 
    0xd236c0c1, 0xfa8e5372, 0x1476fde9, 0x7153b96a, 0xfdef9a96, 0xeb2f7774, 0xbe865f86, 0x47b6b406, 0xb278ac0d, 0xeede6ecd, 0x355ee9d2, 0x909d4bd2, 
    0xf2520965, 0xa6d28e4a, 0x710c4349, 0x8c25ac9d, 0x1c3ae864, 0x6d7a7850, 0xb4a8ec7e, 0x8d8d3d33, 0xba414aab, 0x56860ab8, 0x4462e538, 0x20b8f22a, 
    0x0083e89d, 0xc68f5eb1, 0xbfbb1d3e, 0xf8197ed6, 0x7f8b1b42, 0xc33f0ded, 0x969c5976, 0x652fc610, 0x988d5297, 0x1dd9c9ed, 0xa7b07bfc, 0xe0036095, 
    0x5b7ce216, 0x525d4be2, 0xe8f408ee, 0x0591be4d, 0xc0dad9ba, 0x1558efe0, 0x93e492cb, 0xf2521e99, 0x5fd00eb6, 0x4100b50b, 0xeab3f29e, 0xba267a53, 
    0x56e64f7f, 0x7b4f3cd4, 0xc62c7b75, 0xd8b25b4b, 0xd2e63e5f, 0x020a6627, 0xec9401a8, 0xa8aaaa40, 0x005555b8, 0xfdaf8a01, 0x00ff79bf, 0xfcdff43c, 
    0xf17fdb17, 0x385b9215, 0x54adc8a4, 0x7d41469f, 0x4a693472, 0x4395a91c, 0xe03c788e, 0x957e7efa, 0x4b0df8d1, 0x55291ee9, 0xb358e450, 0x5f01f61c, 
    0x2bacf527, 0xb586b73c, 0x9e408031, 0xc471d003, 0xff5be39f, 0xa6580f00, 0xb7b1e29d, 0x93ccfe70, 0xcac73827, 0x7c19ab7d, 0xfaef8e23, 0x0fc22fe8, 
    0xcff2f8df, 0x4b2c5f4e, 0x685e5bab, 0x08e434f0, 0x59bb7bd6, 0x2767626d, 0x6492a8ee, 0x4e00bb25, 0x8546310e, 0x8727a267, 0x95daed5f, 0xf1e485d5, 
    0x6e3a9815, 0x084a8055, 0xcc03a131, 0x5778d525, 0x308ef918, 0x0a9c3ca7, 0x71c36e8f, 0xaa0a3112, 0xfedc7306, 0xdf03283c, 0x2f7ac5a8, 0x4f883fc5, 
    0x6a167fe3, 0x92d62c9e, 0xf2ce78fc, 0x4b3226e2, 0xad365724, 0x10e9b66e, 0xbf247007, 0x0090d7c9, 0xd6c833c6, 0xfacad637, 0x28ef3719, 0xbfb5cfbf, 
    0x2996e6cc, 0xb4e3ef6f, 0xd8d4ad11, 0x9b362430, 0x04a358e4, 0x13825896, 0x8bf935ba, 0xb17cc930, 0x7acefc04, 0x55f80d4f, 0xb9d94d2f, 0x33bbb0b1, 
    0x6496d642, 0xdb7e48bb, 0x50b71423, 0x4340e3c1, 0xcdee922b, 0xc2e4c80e, 0x9a2a42b1, 0x8c75fae9, 0x1dc5026d, 0xddc3f5d5, 0x753071c1, 0x91e5bf58, 
    0x8170a1da, 0xa2244163, 0x95252345, 0x1fae4259, 0x4d834173, 0xebdd0f6f, 0xaef328de, 0x1648fbb4, 0x95f361cd, 0xa2aed465, 0xdcde168d, 0x927838a3, 
    0x96d4fc28, 0x3162f748, 0xe78d6d0a, 0xf68d478a, 0x76e5e536, 0xbdc5f07f, 0x035ec33f, 0x11cfdb5b, 0xdb4ba678, 0xb963258d, 0x6ed06391, 0x376bd852, 
    0x25f79871, 0x629c35b2, 0x44fb07d2, 0x80910c6c, 0x12548691, 0x9ac78849, 0x5fd037eb, 0x9f2ededd, 0x427af666, 0xd95af3cc, 0x922776cb, 0x24e69828, 
    0xb2aa4092, 0x5cca2fb2, 0x81e7b122, 0x77a3ab80, 0xdba8a526, 0x026a5fdc, 0xa845b04f, 0x946cef98, 0xc85b5b3a, 0xb6118c15, 0x670e0a01, 0x04e45c54, 
    0x8d1b1897, 0x44dd5f62, 0x076f4164, 0xc0620991, 0xe7b82da9, 0xa09d27a0, 0x13e07b60, 0x1bd642cf, 0xdc99bd8a, 0xa50adf69, 0x35d3b2b6, 0x326a1a8f, 
    0xd4414f78, 0xa965fb61, 0x7d71214b, 0xa7b86b77, 0xf7ec2dda, 0xedb79847, 0x1a8f641e, 0x5cd824b6, 0x467ae0c6, 0xcdc32783, 0x7a17c00f, 0xbb1d9eec, 
    0xb17d094f, 0x20beed57, 0xf1559775, 0xcfc8e83c, 0xb2916661, 0x6cb3852d, 0x22e6e206, 0xb1aec6f2, 0x08e6af79, 0x0aaff3e4, 0x9fe245db, 0x85211e85, 
    0x3aeb9421, 0x5b8b6b10, 0x6a2b0794, 0x2f6119e4, 0x27da6d8c, 0x32cfb970, 0x37bd6060, 0xa8abd6e2, 0xfee2dff8, 0x257189a0, 0x96c870fc, 0x95ba357a, 
    0x21a81d2b, 0x1585e06c, 0xb4421155, 0xa72a2a7f, 0xe200a824, 0xa591ba9e, 0x0d00ffef, 0x8cc37ffd, 0xaf890ff1, 0x115fab35, 0x7357aff8, 0x162fe275, 
    0xdc35cbdf, 0x6c8f6db1, 0xcb2d4146, 0x62f70304, 0xd1289e49, 0xe688db80, 0x38aff85e, 0x36cb592e, 0x00921337, 0x573afdc0, 0xbb2be34f, 0xb1a6d426, 
    0xa64d90b2, 0xdadb325b, 0x1ece0fcf, 0x9128b738, 0x8e047272, 0xeea99065, 0x0db0d2e3, 0xb36ff6a6, 0x5fafb3cc, 0xc1f731ee, 0xad3f00ff, 0xbaddb025, 
    0x60e06010, 0xa3ed7a64, 0xfcdffd0d, 0xa3c15074, 0x23144b3b, 0x3729c6a8, 0x3ff4fcb7, 0x9d8d58ad, 0xe14dd832, 0xde5f764d, 0xc4960c03, 0xc725a763, 
    0xfcf0af35, 0x547cd3a8, 0xd93f3118, 0x3f461092, 0x8dae6aba, 0xbec09310, 0x8d309428, 0xb4314b56, 0x3f772eb7, 0xb7d6d703, 0x96e90efe, 0x361e94ba, 
    0x86c05dfb, 0x5c0f6f3b, 0x012c84dc, 0x220c9495, 0x9e9cd093, 0xb2867e70, 0x8986f67e, 0xfff7d938, 0x7c348600, 0x4ff6f007, 0x59de58b0, 0xcd35d6ec, 
    0x056f4146, 0x16433282, 0x980bb29c, 0x5297b7c4, 0x60ce8a95, 0xb8c51261, 0xd85951b6, 0xbd5b0aa0, 0x3c6dd6b6, 0xfae8a419, 0xa72ef100, 0xc6a76f7d, 
    0x8ddd43fa, 0x9b355a50, 0x79df923c, 0x4b7716b6, 0xcc67db0b, 0xc0ce3411, 0xa1729b37, 0x5cad9a4f, 0xbb758507, 0x6cd8b4d8, 0x5fb4bfac, 0xc716bd4d, 
    0x21d28651, 0xf27ac91a, 0xdd13c53a, 0xa646f27c, 0xd57137de, 0x2aaae7b1, 0x9dd58eac, 0x137fe169, 0xb24acb78, 0xbc4983be, 0x36b75cf1, 0xdbd9c0ac, 
    0xce2b754d, 0x99ecb2b3, 0x22dee6d3, 0x7e72db5d, 0x1ce32c4f, 0xd1f36a8a, 0x0efcafe9, 0x7bd9a29e, 0xc357b3bb, 0xbfda8cba, 0x33e0b48a, 0xa2accfac, 
    0xfed627cc, 0xd995e178, 0x0359e69a, 0x76651b1c, 0x972576b9, 0xccca0a0d, 0x7499e102, 0x1a3cf160, 0x1dc5907c, 0x0cbc8287, 0x5ddddc82, 0xf3bc9645, 
    0x7998a56e, 0xea96c089, 0xc72ad272, 0x651b2285, 0xf2c24a0c, 0xc3ebd20e, 0x083ef7d7, 0x40835997, 0xf8143f5b, 0xf7f2f29e, 0x8c35dac3, 0x3ae41d2f, 
    0x867b9643, 0x3e50158e, 0x195108ce, 0xa32d3f8a, 0xddb69a1a, 0xe3478eab, 0x6199febd, 0xafe0c5ad, 0x27c1dc0a, 0x1a26b484, 0xb085f667, 0xc4fd3a45, 
    0x4e9d232d, 0x9365a1e0, 0x214c5d73, 0x80cb9b25, 0x333f06a2, 0xb3374e33, 0xf507fedf, 0xd7fd85f8, 0xb7faeb6f, 0x3f2d0d5d, 0x9556f058, 0x8b78d9ac, 
    0x8dc7bac3, 0x563d3b56, 0x27c8db3b, 0xae2d6dd6, 0xdb56d256, 0x70721c75, 0x6090dcf2, 0x0e11eb5d, 0x045042a2, 0x2b1e7220, 0x7cd4419b, 0xb1f4ba74, 
    0x6778f36a, 0x9626d654, 0x0dda4d58, 0x355f5b42, 0x639aaf4b, 0x6294e72b, 0x970a850c, 0xe5e3b605, 0x5a0012ae, 0x3cfcb058, 0x0fdd8d83, 0x00fffca9, 
    0xde77769d, 0xf022d51d, 0xe63581fe, 0x68697b9d, 0x73a90275, 0x6ec96c77, 0x8cd22eeb, 0x61c811b2, 0xb5eb911b, 0xa334cf88, 0xfa47cb0b, 0x32c100ff, 
    0xdacbed9c, 0x8f7e00ff, 0xd4173bf1, 0xd9db74ac, 0xfb5545df, 0xa89fde15, 0x07a64759, 0x3541aa88, 0x356743bb, 0x12c594c7, 0x9131b7ed, 0x0794ca49, 
    0xec60e08c, 0xbf757e2d, 0xd301cbb3, 0x882b7bf4, 0xa5f8d7d6, 0xed2d784b, 0xb97c1cd8, 0x73b78b95, 0xe12085b4, 0xfdc1f7aa, 0xfff51922, 0xa0b60700, 
    0xdffad6aa, 0x46dbb48a, 0xc83cf285, 0xb7b24d16, 0xcac5ca6d, 0xbb55a6e7, 0x73f1208e, 0x1d7ca6cb, 0x53e445f0, 0x8a5c9b85, 0x022a6748, 0x7367a948, 
    0xcb914c30, 0xf5f17923, 0x1dbc6eef, 0x4d7289a0, 0x0dfddeb8, 0xad54d4ac, 0x659ef8e7, 0x6c301239, 0x360a1828, 0xb7010c0c, 0xc938f538, 0xd5eb00ff, 
    0xb946339d, 0x5b8c1dd5, 0x49941852, 0xb5afc435, 0x72db5d22, 0x319edbcd, 0xaa813dc9, 0x4ed10da7, 0xf4a08f33, 0x915a83ae, 0x7448cb34, 0x90d8769b, 
    0xf17aadc2, 0x57e61ab6, 0xf636e6da, 0x8750ed8c, 0x04b72ba3, 0xc9d95a91, 0x42ec19d9, 0x7a5a7697, 0x5c5d51f9, 0x5669f75e, 0xe1ee2e0c, 0xdc23d972, 
    0x3b857d80, 0xd2df62fb, 0x0ffdfee3, 0x1ab12afe, 0xa88c9c51, 0x0a3ae13c, 0xd3fe9b6f, 0xdc3ab4d2, 0x778dddb4, 0x97139e40, 0x65de4cf7, 0x404abaea, 
    0x7e0815ce, 0xd3659c73, 0x76a51fa7, 0xd934071f, 0x6f7c1875, 0xba541a34, 0x2ed0b6a8, 0xee529927, 0x88b6651b, 0x65725e00, 0x8c534a20, 0x9bb4a040, 
    0x38ef3e8e, 0xd4311a57, 0xa1362dfc, 0x8b277263, 0x720db74e, 0x2399c5ac, 0x5254857b, 0xd83b8531, 0xe3781de7, 0xe0bb9e1c, 0xb7e0d967, 0x71993ff1, 
    0x8d6bebe1, 0x30e9c446, 0x7b4bc27f, 0xcdbc0571, 0x4b0cf12a, 0x98990b6e, 0x8decfda8, 0x1f40bc1d, 0x3296c135, 0xd5447d12, 0xf9ae1bb6, 0x7ff663e9, 
    0xb264ae29, 0xf4c98ab5, 0x5e429bab, 0xc5be883b, 0x4315c205, 0xd9b9c398, 0xfe0e86e7, 0x5e6d8848, 0x7fc3671b, 0x838f3514, 0xdb961b5e, 0xb5edd74c, 
    0x37bbb636, 0xaa8be870, 0x9d0d73cb, 0xb58da0fb, 0xc4aa3015, 0xb696dae4, 0xe6b1bddb, 0xb970d593, 0x63431a9a, 0xc9ddad7d, 0x42fe963e, 0x679f2edd, 
    0x8e237a7f, 0x8abcb356, 0x84bbe0f1, 0xa39272b0, 0x04f2a632, 0x342b028e, 0xb0dd768a, 0xa84bc39f, 0xf27ccb5b, 0xd7c07ff8, 0x87051bf1, 0xbde5d353, 
    0x19432d9d, 0x88a122b7, 0x23e36e90, 0x3e0eb9e5, 0x8a4ca96c, 0x2d2a7499, 0xc49fe646, 0xf04e73ed, 0x5ae85e02, 0x6a5df34c, 0x8bbb9dfa, 0x49e676ad, 
    0xde9abe65, 0x748fcc78, 0xccfd21cd, 0x7846d9b7, 0xd5d215d5, 0xdedd8560, 0x45feb25b, 0xa8d11be2, 0x42ccbd3d, 0xb5e04845, 0xf3f3ab88, 0x7634967d, 
    0x8d094eea, 0xdd8edbb1, 0x06e2672b, 0x7588478e, 0xe7d4a62b, 0xe9fa1ed6, 0x66ae6f9d, 0x6296a559, 0x49d66924, 0x455e9911, 0x24b88c90, 0xf2717438, 
    0xc31fe7ba, 0x656e1872, 0x2bd29ab8, 0x376038db, 0x2231630f, 0xb5dde339, 0xa48220d3, 0x64186207, 0x54eb03a9, 0xbe359f9d, 0xb7b4a05f, 0xd350e22f, 
    0x98eb346c, 0x775717a7, 0xa6805c51, 0x557b3bde, 0x9d333996, 0x4da4d9c1, 0x067af998, 0x734c4fce, 0xf48437d6, 0x59a5f34b, 0x69abb9b6, 0x4cbed7f7, 
    0xe9dff156, 0x2c59db10, 0x321602ce, 0x5944a20b, 0x8460e611, 0x23239691, 0xb8bd9607, 0x5f26eed3, 0xab3bebec, 0x1e80cd12, 0xcf51cdf3, 0x7b306220, 
    0x69d7d481, 0x3ec693f0, 0xa90ef01f, 0x06f105e2, 0x26a97995, 0xa64ba5ab, 0xcc95f5ad, 0x29f3f421, 0x53a4dc5c, 0x23e97c44, 0x912cc2db, 0x621e4112, 
    0xcaaf2267, 0x279bd4b6, 0x93a1652d, 0x37d06baf, 0x346eac89, 0x667a2491, 0xc28e2893, 0x628e5227, 0x65560680, 0x2177e507, 0x1e1e7ca4, 0xf14dc557, 
    0xe32f508b, 0x474963bd, 0xd446cb26, 0x636dac6f, 0x1fb13c52, 0xe59727db, 0xbf0c6000, 0xc6f4e941, 0x851fc497, 0xf013bed7, 0xd8ae815e, 0x8f78dadd, 
    0x77d777c2, 0x36ebdb51, 0xb8cac30c, 0x6ead9b0a, 0xda1e60a1, 0x6c7755e1, 0xcd87b571, 0x7983481b, 0x2c8ef8ce, 0xe2633c2e, 0x6eee6e88, 0xd744b56d, 
    0x8f164baf, 0x984c3b7c, 0xb8bd1fcb, 0x1e3cb1b2, 0x38e3399d, 0xf26fb7e9, 0xddee9c35, 0x39f2d3f7, 0xb5c5025d, 0xb44c774d, 0x6eae0555, 0xb97c84e2, 
    0x630c9ce5, 0x6fd5a4f1, 0x5dacdd3e, 0xcedba1ce, 0x0d4592ba, 0x4fcc1dcb, 0x2b3d675c, 0xe15ff8b1, 0xd6f1977b, 0x6d647d87, 0x2ead7875, 0x1d89d6be, 
    0x3064c4c2, 0x581bf746, 0x448c0a3e, 0xdf032741, 0x060faca1, 0xf1512b78, 0x7af6a4e6, 0xed088271, 0xfdbb6b20, 0x0d51f64a, 0x60b88da5, 0x3ce4691a, 
    0x4174862a, 0x23dd9dd5, 0x56747745, 0x91bfd969, 0x8f228c8d, 0xc8412811, 0x4741e2e0, 0xfdd7fecd, 0xd454affc, 0x9326e15b, 0x8f8d2d7b, 0xe267fc87, 
    0xc498ada8, 0x76ebcbda, 0x71ba50fa, 0xd9d0d6d5, 0x455f61cc, 0x92bb5d69, 0xbfb5da09, 0x7f18beb4, 0x87f13ed1, 0xdf1616fe, 0x4da9adfc, 0xe9c16cbd, 
    0x9bf9f5a7, 0x9d1d5ab6, 0x2d1d5fac, 0x6b6b222d, 0x6937bc18, 0xa95a5ba8, 0x569f11f9, 0x39f5f6d2, 0x81c4a5c2, 0xebf5e07b, 0xade0755e, 0xd575f535, 
    0xc03117a3, 0xf7745ab6, 0x6bb065a1, 0x320193b5, 0x286f0480, 0x767a3f9e, 0x332cc785, 0xaaf0ab5e, 0x1ec6c7ea, 0xbbb4d63f, 0x6b11e778, 0xd3b5179e, 
    0x924b1784, 0x367bb624, 0x9b117b70, 0xc0e96136, 0x6df138ea, 0x366df61e, 0xcc6dee39, 0x0129619e, 0xa3b45355, 0x11245b02, 0x0830c8cf, 0x5be9f320, 
    0xddf65e45, 0x00fff2bf, 0x64ef3426, 0x13fcb7f5, 0x84b5d0b4, 0x8028f4d0, 0x6b8abbbb, 0x359ee518, 0xe7695446, 0x5abec032, 0x2a5fc9b1, 0x399e2529, 
    0xc4484270, 0xda59e5aa, 0xe62cb086, 0x56ef564d, 0xea9eb3ba, 0x3b4b740b, 0xda286d4b, 0xb1f993a4, 0x238948e5, 0x4a135154, 0x072c49dd, 0x3f47361f, 
    0x45249b0f, 0x6d4980a0, 0xabd1d810, 0x33361b6c, 0x310b3db8, 0xdb6e490a, 0x57b4e940, 0x6949a779, 0x8aba6aa1, 0xb51dbe6b, 0x56f42df1, 0x1bbb2b82, 
    0xe9f6b6fd, 0xd68d646e, 0x94e2ee78, 0xa21cca32, 0xb30ab265, 0x8842ee26, 0xa71197b6, 0x41d372f1, 0x746c6cd0, 0x50070dfb, 0x2545cbf0, 0x9a56ccad, 
    0xdc2a8d94, 0x475aa793, 0x2a133c77, 0x6b8ea498, 0x91549694, 0x94d1d824, 0xd5aeb12a, 0x5285ef3c, 0x8f54372d, 0xdcc2684f, 0xc35ae85b, 0x573992dd, 
    0xa87dc692, 0xd940c673, 0xf79821db, 0x9a6a1118, 0xc5fad784, 0xa45058a8, 0x5b6b647b, 0x35532328, 0x1e59c0d5, 0x08358e15, 0x242464a8, 0x55a0aa71, 
    0x276e43e1, 0xd3d35a4f, 0xb585d7e1, 0xea627d0b, 0x133fe333, 0x3edd4b95, 0x55fadc36, 0x7525cc92, 0x97fc00b8, 0x631ccb12, 0xd2e8ceca, 0xc8a0de37, 
    0x7c8d8ab8, 0xbff4d71f, 0x42d7a9cb, 0x9fdd7cf1, 0xbbd5d3e5, 0xe7d2757a, 0xc535cb99, 0x499a56c8, 0x4004621f, 0xceab90e4, 0x701df400, 0x6a472405, 
    0x86d0d1fd, 0x49d4e438, 0x8e3c30f2, 0xe5cf3f4e, 0xf73b2053, 0x2c75c4fc, 0x5aefa1a3, 0x7ac6192d, 0xabc3ecd7, 0x4d7cab47, 0xab07fcd1, 0x5f78dcb3, 
    0xbef6f7c6, 0x0c6dd51f, 0xd9bc5181, 0x925c5b42, 0xd3f60a41, 0x61a44a32, 0x96914499, 0xe5832309, 0x75a3e6fa, 0x97b76aad, 0xdbbedbd7, 0xb7247173, 
    0x32e6c30c, 0x2339b333, 0xcf7f2cb7, 0x5bbb514a, 0x9e8924ca, 0x64955337, 0x18f52038, 0xbd22b823, 0x3e1ce223, 0x8400ff1e, 0xfeb94b87, 0x3b1d9ac8, 
    0x35add356, 0xbb34ae18, 0xd1425a92, 0x49187001, 0xc22533b8, 0xbc8d844e, 0x14741ca3, 0x00ffbe77, 0x4200ffd5, 0xfd258d9e, 0xd59c5a7f, 0x6f78caad, 
    0xdb5d90c3, 0x57c800ff, 0x7c885b52, 0xb621ced7, 0x144eb431, 0x64fe6274, 0x42f7938b, 0x91b500ff, 0x3e776dad, 0x7418e085, 0xaf68171b, 0xaeb8dbf5, 
    0x00c30575, 0xd6e6aad0, 0x41f82336, 0xa3979966, 0x2688816e, 0x431d3a3e, 0xea33fce1, 0xb4838fda, 0x56db4a0d, 0xfdb491d2, 0x5e165f42, 0xb1b66040, 
    0x49d892b4, 0xef8e9521, 0x45a55529, 0x1a697ef9, 0xc8cc003c, 0xc6ebcd95, 0x53fbe2ca, 0xc5334d93, 0x14abc2a6, 0x33437797, 0x2a4221ac, 0xbc2abf10, 
    0x8faa0098, 0x9f545595, 0x2d4e99bf, 0xaf7ffe5a, 0x91afe7cb, 0x00ff3b0d, 0xc8eb2f5f, 0x3d4f65e6, 0xc13b5acb, 0x3c8c386a, 0xfe8059bb, 0x494eee23, 
    0x0570e0fa, 0x1fd7ec37, 0x00fff3f3, 0x6afd1f93, 0x459fb3d0, 0xf6ea8b48, 0x3179c9b2, 0xc6dc4ef3, 0x00ba9f02, 0xcf310652, 0x06d3d741, 0x845ffba7, 
    0x6fc6e7bf, 0x00fff8fb, 0x44534fe3, 0x08bfec91, 0xe38b62ed, 0xd867c24f, 0x8186daae, 0xf5d62d71, 0xafdb4c04, 0x04635886, 0xef3fedfe, 0x3ecc6b90, 
    0xc387b119, 0x4e9d2e9e, 0x50644b24, 0x5270ca47, 0x0dc38d53, 0x7365948f, 0x7090f1b4, 0x854ff5b8, 0xbe59f21f, 0xbbd87f0b, 0xa100ff73, 0x5fe535ea, 
    0x52e43f0e, 0x70fd8ff1, 0x4500ff8f, 0xaff85ccf, 0xe697bfe0, 0x4bada58a, 0x3f72eb3f, 0xb1b23004, 0xc9716c93, 0x505dbbf6, 0xed80983f, 0x76c9f4f2, 
    0x00fff4ed, 0xdd27878f, 0xf69ed353, 0xc28f48ef, 0x7cd137be, 0x75716d01, 0xe12e853f, 0x3ecdeb6b, 0xd465db79, 0x200f97f8, 0x2390a05d, 0x3f300088, 
    0xc919a776, 0x7f85073c, 0xfed7c6e3, 0xfd9fb5bd, 0x777aad36, 0xe0e4bf8c, 0x00ff3bfc, 0x00ffe660, 0x732b6ed0, 0xbf35c723, 0x6f4fde10, 0x2c2e2c69, 
    0x99b7e54d, 0x8c99b670, 0x329ee14a, 0x0879cecd, 0x09badf0e, 0x1507403b, 0x3110abcd, 0x6845f2d8, 0x0ff23fea, 0xd1eb3fd2, 0xd574f4bf, 0x2b7d3b9a, 
    0xcc4b9266, 0x24abb749, 0xf91e703f, 0xa0d3f907, 0x3d2fe663, 0xa6f5084e, 0xf063f59f, 0x0f9646fe, 0xeb5f9fbe, 0xec2bf559, 0xa032bf8a, 0xede9c13d, 
    0x71b9b65d, 0xb3f0ad2e, 0xfb72afc1, 0xd5bd4f9f, 0x0067cb34, 0x2dca9602, 0x813c56ee, 0x5cdd12c8, 0xf0fe3c37, 0x26ae988e, 0x1bfd913e, 0xaeec1af9, 
    0xf894e4bf, 0x9ac3fe7b, 0x5893febf, 0x1e957b52, 0xac993686, 0x166dc95f, 0xc392b79e, 0xc8ad1b65, 0x4cb52382, 0x2387b6bb, 0xb4cd50b9, 0x8c93bb9f, 
    0x0cdce664, 0x99ce85da, 0xf4f239a1, 0x3a3227f9, 0x65960244, 0xd99e802c, 0x9371bdda, 0x319ee4b8, 0x00ffa393, 0x00ffc8c7, 0x6af47f71, 0xff95aed6, 
    0x93762300, 0x00fffbfe, 0x7b28d9e8, 0x25abebbf, 0x0db2752f, 0x4a935767, 0xe16d2fd6, 0xb2c6d882, 0xab907960, 0x00000090, 0xe200604f, 0xc200ffa9, 
    0x00ff7353, 0xf85fd63e, 0x4ce19f0a, 0x8cfc5ff1, 0xf500ff57, 0x5556fad3, 0x736fd83b, 0x0000d9ff, 
};
};
} // namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(LaplacianNode, "Laplacian Edge", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "Filter#Video#Edge")
