#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "RefineSlower_data.h"

static const std::string key = "tianlu2024";

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct UpScaleRefineSlowerNode final : Node
{
    BP_NODE_WITH_NAME(UpScaleRefineSlowerNode, "RealWorld Upscale Refine Slower", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Upscaling")
    UpScaleRefineSlowerNode(BP* blueprint): Node(blueprint) 
    { 
        m_Name = "RealWorld Upscale Refine Slower";
        m_HasCustomLayout = true;
        m_Skippable = true;
        m_BGRequired = true;
    }
    ~UpScaleRefineSlowerNode()
    {
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        auto url = GetURL();
        auto path = ImGuiHelper::path_url(url);
        std::string data_path = path + "RefineSlower.data";
        // decrypt data file
        std::vector<uint8_t> data;
        ImGuiHelper::ImDecryptFile(data_path, key, data);
        if (data.empty()) return;
        // create realsr
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(RefineSlower_param_bin, RefineSlower_param_bin_size, data.data(), data.size(),
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 4;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "General:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 8618;
    const unsigned int logo_data[8620/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xfc003f00, 0x288aa2aa, 0xe0cbae00, 0x3f96fcb7, 0xf6afe301, 
    0x94fe87f5, 0xdab57125, 0x8f75137c, 0x998037e3, 0xf6ebe2fe, 0x689fbe05, 0xfcafb08e, 0xc83ffa29, 0x68fc0fdf, 0xfdccaf7a, 0xed89b26e, 0xdc889d01, 
    0x6b3d28fc, 0xcb1c0fe5, 0xb756e2bf, 0xffe7b8eb, 0xa0af1d00, 0xc8f81dfe, 0x5cf7f678, 0xed7845b9, 0x110caead, 0x5ec83987, 0x7cc5c0f8, 0xbdbbe3df, 
    0xc87515bf, 0x4e3272d5, 0x5fcb8e73, 0x95546094, 0x8fbda769, 0x28c52bda, 0xbe74e627, 0x84cb9712, 0xab6b1eb3, 0x83bb7182, 0x197e71cd, 0x8d0a0bb9, 
    0xae39f99d, 0xb4c5ee99, 0xf2473309, 0x0779f933, 0xd935e39c, 0x9a8edc24, 0xd8ef5476, 0xcaeb96d2, 0x05fddc5d, 0x72f49d25, 0x3b0fc8b4, 0x8afb8c33, 
    0x5b5da0b9, 0xd19a4730, 0xe464cb65, 0x15d323e7, 0xf0191eef, 0x6de281de, 0x3dda4c35, 0xda63c29b, 0xf500ca57, 0x2300c41f, 0x78faaef0, 0xe6575409, 
    0x6f663c3c, 0x1bf8330c, 0xa79dcf5d, 0x6505727c, 0xa7c95dd9, 0xe2c6aa78, 0x05d28223, 0x7b0dea61, 0x800fc40f, 0xa6819efa, 0x241a6bdf, 0xc0d8a9a9, 
    0x92d9b24c, 0x3fde9222, 0xbf636755, 0xf441f21d, 0xed27bc06, 0x2d886fde, 0xc22a6462, 0x1fa7ac60, 0xe208ce29, 0x61eae1a1, 0x0ead69e5, 0x3ecc588a, 
    0x65d41c36, 0xfaa82e7f, 0xc4323410, 0x19e20fb2, 0x08fe5aeb, 0x17f883f1, 0x909af6c4, 0xe50db639, 0xa3f727dc, 0x75c49f27, 0x92892bfc, 0x26cf74fd, 
    0x6f3e4919, 0x47ad4708, 0x46ca3375, 0x35633bee, 0xe72acee1, 0x45f3a864, 0x3f325bc6, 0xa2e143da, 0xb2f13d7c, 0x836a9aea, 0xee109fe1, 0xfb74b2bd, 
    0xa4f921a9, 0x873bf38f, 0xcd577bb3, 0x7e1400ff, 0x1af8db2c, 0x3b16ecc7, 0x84fbf52e, 0x4b7944ca, 0xfec63f75, 0xa9df8bfe, 0xffd1afe3, 0x00ff1d00, 
    0xc10f4d68, 0xc715b3df, 0x39fb7587, 0xf740fcef, 0x651d9e2a, 0x0ec8821b, 0xe4638b59, 0x778e8408, 0x3a06dc6e, 0xff66f3e3, 0x589b5100, 0x65efeed4, 
    0xca5d5ccb, 0xee49c8d2, 0xb7cf38c7, 0x2e7db5d3, 0x98788557, 0x2f5ad5a9, 0x66ccf8c4, 0xbc38783a, 0xa5357e3c, 0x533fbafc, 0xbc161fa8, 0xf03f4076, 
    0x9eabeb99, 0xa0caa8c9, 0x016c007d, 0x00ff28ec, 0xbfe3b385, 0xff751dfa, 0xcb19fc00, 0x57c500ff, 0xec9d0d2d, 0x65c7a3b0, 0x0acac623, 0x1d1974b0, 
    0xfb4e2d8f, 0xfc00ff05, 0x00ff4bf8, 0x00ffc77d, 0xfbd557c5, 0xbfca5f0a, 0xb17ee603, 0xde9ff95f, 0x8aa23dcf, 0x803cd22b, 0x92077fad, 0x0ad12ebe, 
    0xa02fac92, 0x988f1dc1, 0x5e5b91b5, 0x26fcc709, 0x7f7a0e7a, 0x00ff5b68, 0xeaacc5e8, 0x36f4127c, 0xfa58fca3, 0xf69bf4a3, 0x6d343b5f, 0x5f183556, 
    0x2bfc3837, 0xca763cc7, 0xa36b2d3e, 0xfa3d3923, 0x1ff7da7d, 0x6b048ad9, 0x0f8c530d, 0xf12a7f30, 0xacd1884f, 0xf0f5177f, 0xfe8fe100, 0xd0975fcb, 
    0x5bd5fa92, 0x2300ff76, 0xddaf59f6, 0xa67e7a45, 0x5fad82ef, 0xd282bb52, 0x7c259933, 0xd4813370, 0x2400ec93, 0xce960afb, 0xbceed476, 0x25ee0ac0, 
    0x56e09c57, 0x36abc0df, 0xa9413cd5, 0x5b9210aa, 0xa17217e9, 0x51667ec6, 0xd690f21f, 0x4fa78d16, 0x5912eba7, 0x8a4a3205, 0xa7a75d41, 0xb7e27b1d, 
    0xa86b73ba, 0x7a5cdc26, 0x6dd2bf23, 0x2b52d5d2, 0xe5fa9a68, 0x972852c6, 0x80efb97b, 0xa5af3839, 0x0fe9157e, 0xe616e9a6, 0x7457d6fd, 0x90142d0e, 
    0xe7ef9fab, 0x31a64792, 0xf00faff5, 0x99428f60, 0xbb3226da, 0x066e59a8, 0xa9fbe332, 0x3fbea3e8, 0x3b5df61a, 0x81ccfd5d, 0xed36551d, 0x83d31124, 
    0xaff7f4c1, 0x92d20a73, 0x355f3e93, 0x9247ea8c, 0xa6db1e3b, 0x4636666a, 0x8c2b0512, 0xfa041c2a, 0xb5dfca57, 0x4d7bc0b7, 0xf8b1540b, 0x95c5e1a1, 
    0x8d53f356, 0x0504eb35, 0xa59357e3, 0x403e90da, 0x8efb30ce, 0x9323380b, 0x6f3aeb83, 0x2290d98b, 0xc0931ac9, 0xad956166, 0xce49f87f, 0x9c2667a3, 
    0x5baae9f6, 0xf044bece, 0x5512893a, 0xe961086e, 0xd953435f, 0xcb3869e2, 0x6d7ce6af, 0x5e035b07, 0x7fd32335, 0xfb337c34, 0x9b3edf56, 0xb83bc2f0, 
    0x8626f264, 0x4c1229e6, 0x1004a9e0, 0x163ed06b, 0xf12e7ee9, 0x7c68c27f, 0x5378a85b, 0xde8eb158, 0x723ccddc, 0xf1aecad8, 0x50f317aa, 0xa342c115, 
    0x9a038921, 0xf8492ffa, 0xab6be10f, 0x6ebd7bbb, 0x6ba335c5, 0xdadae771, 0xe06828de, 0x61a77260, 0x667698e1, 0x0f804ccf, 0x537cd435, 0x78a6b5f8, 
    0x8f8fe10f, 0xadae09f5, 0xd04897e2, 0x278ee62e, 0x5a191499, 0x09404436, 0x07d9c5fb, 0x72c0923c, 0x3234784d, 0xa1a0d4a8, 0x7b777688, 0xe2894f1f, 
    0xbac45209, 0x1bcd5598, 0xfed7df2b, 0xefc48f0d, 0xbc3c7e88, 0xdbe29df8, 0x9dde10ef, 0xdae56382, 0xde22e75b, 0x7e10f701, 0x49529f1c, 0xfbb75eef, 
    0x1e1afc2e, 0xc45fd42e, 0xbeabbd1a, 0x2d81049d, 0x12129aa2, 0x385fea76, 0x1c2345c1, 0xf21a3c75, 0x053e860f, 0xe285f8b9, 0x84422fbd, 0x8594234a, 
    0x2da3789e, 0xf33ec6e4, 0x323d0e9c, 0xfa15c978, 0x0c9fe03f, 0x08dfe0c3, 0x0d441ae9, 0x22ed6cbd, 0x821112b7, 0x9f0c54e1, 0x729f8c73, 0x54c4d26b, 
    0xa792168e, 0x87de4e4f, 0x2ca78699, 0xb65e475d, 0xb7ecfdba, 0xbc6893fd, 0x388ef37e, 0xb23f8a90, 0xafe93fad, 0xe33ffdfd, 0x1e77b652, 0xeb73d27b, 
    0x7bcc3f5f, 0xcde347b6, 0xefa25214, 0x7d060660, 0xcf0fef6b, 0x03afad44, 0x681aefae, 0x5ba8eb0b, 0xb588fc8f, 0xefc51ff4, 0xbec48bd8, 0xf5d4bd1e, 
    0x5a24083f, 0x691881ae, 0x0537b362, 0x160295ef, 0x8662b761, 0x960210e4, 0xd7d49163, 0x292ef880, 0xa17b7c2d, 0x146d3445, 0x2b70eab1, 0xa40ca9a3, 
    0x1e04b94a, 0x86935784, 0x8db970cc, 0x4dc35409, 0xeb5e5b49, 0xe5a1ab4e, 0x03ce99e4, 0x81af503a, 0xafaea6aa, 0x46bfaa67, 0x3afd4cb7, 0x17d599fd, 
    0x3e0abf4b, 0xaf70e37d, 0x76a8f80a, 0x00f1687c, 0x829f3ecf, 0xcbfeb5d7, 0x6c0de68d, 0xfa03d20e, 0x8a9ff10a, 0x76e367d1, 0x8fee9fbf, 0xfef9b5e4, 
    0x55eb2f1e, 0xfdc83f3d, 0xc5bdacfe, 0xf62b3df2, 0xed2dd452, 0x1b8b2c3e, 0xbe5a0ca0, 0x168a3d9d, 0x9f9e00ff, 0xa73e8a2c, 0x8a371561, 0x3cd3652d, 
    0xa4f6776b, 0xf223ca10, 0x1b5758e5, 0x3e17728e, 0xd53e69e3, 0x1e31f8c0, 0xafd351cf, 0x6d7956a3, 0x51b8216f, 0x8e7c771e, 0xf7c88f1b, 0x1fe393ae, 
    0x5d9388c4, 0x23557cd6, 0xd757f624, 0xc251ec87, 0xfd31babc, 0xe308cadf, 0xa8e7e468, 0x68945def, 0xe094b83a, 0xea39f6ae, 0x93bafa54, 0xbf5ab49b, 
    0x7ed65adc, 0x46f85820, 0x2e6faed1, 0xf7b36fc4, 0x79bb0e70, 0x7efca3fb, 0x7e31e5b5, 0xd7acfad1, 0xd396b49a, 0xd618b1ca, 0x43ea1638, 0xb17a9795, 
    0x0b383270, 0x380727d7, 0x5ae335c7, 0xf58b00ff, 0xefea120f, 0x9e297971, 0x31de980b, 0x86c2000e, 0x801f1838, 0x53aff7f7, 0x2af00ff8, 0x00ffe2eb, 
    0x9cd4218a, 0x96c39ffd, 0x66bb21e8, 0xe769a291, 0xf20b000e, 0x3d077290, 0xfd1a7f32, 0xa3870b0b, 0x35cda783, 0x2f0e7c76, 0xa98ba930, 0xfd454bc9, 
    0xfd67cf6a, 0xaff8669f, 0x30c48ff1, 0xc2da77ea, 0xb00b5ee9, 0xb29fd27d, 0xc176cbaa, 0xaaea2988, 0x39a1e740, 0x7d781fe3, 0x585da7a1, 0xfa573a68, 
    0x680b82c4, 0x2171cfb7, 0x590630da, 0x2738ec89, 0x7ccd6bfc, 0x87971d35, 0x0e3feb34, 0x7b3426e9, 0x11c4ad4c, 0x38ace2be, 0x78cef9f9, 0xd82bfcc9, 
    0xdaa1333c, 0xc33a1aea, 0xd1bca332, 0xe73c2011, 0xd7fa9123, 0xddd47a15, 0x68692a69, 0x79351c61, 0xdda852d3, 0x9f97e499, 0x89c79db4, 0x1a3ead95, 
    0x126a5a59, 0x6aab2faf, 0x1781a3a5, 0x0c1fc7b3, 0xc5f260e0, 0xe12bb647, 0xe357da4f, 0x4b83f8aa, 0xa513fcd4, 0x47e22f6b, 0x9d4bbdb8, 0xb13bc473, 
    0x9291cc0d, 0x07d9d656, 0x0c394a1e, 0xab6cfccf, 0x0f26178e, 0x3eeadc19, 0x57e39317, 0x44ee5282, 0x4812296b, 0x054e1996, 0x9145b8b1, 0x611c0c37, 
    0x15638c97, 0x870f5ae2, 0x880ff167, 0xd11aad34, 0x2a739d07, 0x007006c6, 0x007d9227, 0x5cd43419, 0xa5b7aaa4, 0x91bb5db4, 0x7d942a52, 0xd5b75684, 
    0xfdb73ef7, 0x8d1dfe8c, 0x7eb7c22b, 0xf6319e20, 0x84b041ad, 0x3815568e, 0x0200ff51, 0x0ad0b76c, 0x59e516fa, 0x827fd658, 0xaff055b4, 0x6d6c2d87, 
    0x638955e2, 0x40bd465c, 0xec760003, 0xd5ba5a05, 0x7095c3ad, 0xf938b0f1, 0x6bf08a97, 0x1cd5f654, 0x548a768f, 0x9915a8a9, 0x7acf63be, 0x5df5de4d, 
    0x7edc61af, 0x93d6d771, 0x7d7fb1ed, 0xdec23a7f, 0xe5c7dc46, 0x847fc2e7, 0x2fc6f79a, 0xa18fa613, 0x3da030c2, 0x10b9e4d5, 0xbc9f47db, 0xc901f9e7, 
    0xa01f893f, 0x65bf089f, 0xfc0500ff, 0x8a668528, 0x61ad75cd, 0xa12e09a3, 0x73ae46a8, 0xa4c664f3, 0x63773062, 0x4906708e, 0x377cceef, 0xb2dfc38f, 
    0x2d3bc0bf, 0xf60bc44b, 0x5cc2996b, 0x497c8b5e, 0x83c4cd3d, 0xb703122b, 0x708c5725, 0xf524d606, 0xc5c7f235, 0xc7cfda5f, 0x27d43f3e, 0xeed54f8b, 
    0x27191d34, 0x4d8bb676, 0x472b6d2d, 0x65ccb791, 0x67004962, 0x7d92b101, 0xe762e3b1, 0x792df199, 0xd9cbc1d1, 0xcdede2e1, 0xdff4d6fc, 0x7f6e6bd3, 
    0xcf336624, 0x5715df78, 0xf654960b, 0x17373838, 0xb7f67d3d, 0xca6bb5b5, 0x7d775be9, 0x7c55e917, 0x7849fb6f, 0xa36ee1e3, 0xb3452bf1, 0xd623d2b1, 
    0xfc15633c, 0x96eadc51, 0xc031f913, 0x560280db, 0x5b998900, 0x6d1c576e, 0x57e47023, 0xfe40fb3f, 0x9af8f2d9, 0x009e68cc, 0xd3b2b9b9, 0x6f588ee5, 
    0x952d6eef, 0x76599d24, 0x4a2c1181, 0x4a8e05a9, 0x080602ab, 0x343c98af, 0x4a8ff84a, 0xeec2702a, 0xe27d1f2c, 0x18bee1b1, 0x5d7f86af, 0xd9c5c9c5, 
    0xffb429da, 0xf2efed00, 0xe111fbfb, 0xb2e202e7, 0x5c334ccc, 0xba8472c2, 0xff9e3641, 0x7adf6e00, 0xfdd8df8f, 0x6f90fd31, 0xe277a10e, 0x4909f238, 
    0xe8fe7150, 0xadf835af, 0x1bbf2c63, 0x27b8f0b5, 0x9f3a0a6f, 0xec4f5dbb, 0x5c33732b, 0x1198a9f8, 0x2306d089, 0xdf58cbaf, 0x99866e13, 0x57c4bff1, 
    0x8645b1b2, 0xb42b9fdd, 0xc08342b6, 0x4adbf53e, 0x543e9e8c, 0x00ff9796, 0xaa6e7f80, 0x461574b1, 0x8200ffb6, 0x9ef1b255, 0x081fe095, 0x6e796dcd, 
    0xbe365e97, 0xf4eded91, 0xbadf7d76, 0x47ca1c74, 0x72061ecb, 0x8edd4932, 0xfb13c42b, 0xd4b55c43, 0xcb1ac943, 0x964a5ba6, 0x8a6cabd0, 0x88701b13, 
    0x49ae029d, 0xf51e4f1d, 0x7589dbd2, 0x4e5c153f, 0x72973c92, 0xe4bbcad9, 0xf264ec62, 0xc84961f7, 0x7b1c1600, 0x16f899d7, 0x5e2b6df6, 0x92bbba76, 
    0x63b74cdb, 0x640b7575, 0x7719c8f9, 0x922000ae, 0xe3e0c178, 0x1c95fa15, 0x8a291f06, 0x7eb66ba9, 0xd7c78967, 0xb9722acc, 0xf82bb468, 0xbfd7c313, 
    0xa461fc10, 0x2c3c5ae8, 0x50e5ae2f, 0x92c7a1b2, 0xba0f8931, 0x849e319e, 0xbd9ee8d7, 0xc31ff010, 0xfc1ffe09, 0x7c2d9139, 0x856e614f, 0x5b6e90ef, 
    0xcc068679, 0x5b3099e3, 0x1d49f827, 0x87bfe5eb, 0xeca78d3a, 0x7f1de1fb, 0xb29624e2, 0x26de6a5b, 0x6cf0e385, 0x68926c52, 0x3ae7718b, 0x32511b6e, 
    0x982739c7, 0xafd73cf8, 0xd357cf7e, 0xc656e8d9, 0xe99647ee, 0x64799a95, 0xdd479a3b, 0x524f6296, 0xeb7d4e4e, 0x530cf3e5, 0x9f6b2f8f, 0xf0e59241, 
    0x679454c5, 0xfcfa5fd1, 0xe107cdcc, 0x8df48967, 0x16f14b23, 0xdd7be2ad, 0xb736c443, 0xadb6f9f2, 0x4022e56f, 0x65d9f240, 0xdccc5b01, 0x4859460e, 
    0x0ff65a3f, 0x8c97fa8b, 0x042fc2cf, 0x3eab8ba6, 0x87a8678f, 0x8b55676d, 0x48ac5c73, 0xe0714cc1, 0x73f2981f, 0x15079e83, 0xc403f1a3, 0x46a2c971, 
    0xf7536c54, 0xc7015c89, 0xef3ecd53, 0x877a76c4, 0x132a7dc0, 0xf7f6483a, 0xfe404897, 0xfdc0dae9, 0xe475fe3a, 0x51171143, 0xf745cbca, 0x0557599f, 
    0xdb1442cb, 0xf5d5f26e, 0xf9f999b5, 0xaf6f58e0, 0x4be365fc, 0x9647466d, 0xee0e6de2, 0x01659236, 0x56242edc, 0x088b3f60, 0x9fbad60f, 0xc3c227d9, 
    0x6f117fc4, 0x6d864935, 0xa7da22ec, 0xfd38b7fd, 0xacf35b11, 0xf66a03af, 0xe5f823fe, 0xfa37f172, 0xdaf7ae2e, 0x068c447c, 0x2f226b0d, 0xdc2b4ee0, 
    0x0a2f647f, 0x1bbe8737, 0x44dca8cd, 0xddf97b12, 0x1d54eec1, 0x27fbb783, 0xad62aff3, 0x6d0f4f57, 0x54888f9d, 0x714b2ce3, 0x7fbd4977, 0xbee6dd23, 
    0xc086c42a, 0xb656aaf4, 0xae898fba, 0xecd2b3e4, 0x7f50eeda, 0xa7c2d878, 0x57aaf6d4, 0x47843c92, 0x8c2cdd10, 0x93d41711, 0x3fe92b80, 0x4d0d5e85, 
    0x0896c22f, 0xd1bc1020, 0x7e0cf7ac, 0x13c0c8f3, 0xed71b6cf, 0x95caf98a, 0x8a93acbe, 0x5dc79ebc, 0xb6dcac46, 0x0efc243c, 0xd29298d7, 0x481eabd9, 
    0x947edcde, 0xd78cc27f, 0x9fb5e73f, 0xe1dff6fd, 0xa3c9515f, 0x916f2442, 0x6f5a9f3a, 0xdc3f3cf6, 0xeba3d64f, 0xf3c8ce78, 0xf223adfd, 0xf8c4f6df, 
    0x88bfe371, 0xfb7ff8b0, 0xef924603, 0xde6cd242, 0xd4c5ede6, 0xd84aaa31, 0x09ce2a18, 0x1fd8ab2a, 0x8be56bbc, 0x397e811f, 0xda1688d4, 0xdd484a13, 
    0x301f00ff, 0xaf173f8e, 0xc4638dd2, 0x80ef5a36, 0x242c64fc, 0x099d06df, 0x6774dc81, 0x1a3fced9, 0x5d04bff0, 0x327c54a9, 0x00ff1293, 0x30a78c2a, 
    0x7dc283ad, 0x8756305e, 0xbade56af, 0x06eff099, 0xfaf2ca50, 0xa7ad2a38, 0xb5a53517, 0xb767e5f7, 0x337f56da, 0x35fbb1e5, 0x916148fc, 0xfdc7a6e1, 
    0x00ff5b7e, 0xa4b7caf1, 0x117fcefe, 0x4b4bf5ec, 0x2adbf086, 0x1f3b3ac3, 0x86f1dbb5, 0x7b7afe07, 0xd716db57, 0x01cbbcd0, 0x0dc8ee90, 0xea35d381, 
    0x37f818fe, 0x0c7de26f, 0xacdae9dc, 0xc22073c9, 0x6794ebac, 0x67d803c7, 0x0cb9d71c, 0x7b5d19c7, 0xfee38fb0, 0xca88bb67, 0x4e13dc32, 0x0f7e49a5, 
    0x3c6d00ff, 0x0b53f6af, 0x8b1b2be0, 0x3448112f, 0x9dbbdbdb, 0x3edfc4f0, 0x32c500ff, 0x8f6ae207, 0x5a86afc5, 0x7b7c89f7, 0x4b4b6de2, 0x5f52fbb3, 
    0xb2b5b5da, 0xcd0e4497, 0x1b663980, 0x7b7bf27b, 0xe818bfd5, 0xbc82a79a, 0xeba26367, 0xba693296, 0x44649598, 0xd989a493, 0xf45af7d0, 0x397e9d7b, 
    0xc8c89627, 0xe51a79ad, 0x1c25fee2, 0x474edf7c, 0xea0c5ee7, 0xf6d7c3d4, 0x54f7befc, 0x682c7dee, 0x4a2eb5c2, 0xdd5abc72, 0xc22f271f, 0x3ff81a9f, 
    0xb69dfac4, 0x812661b1, 0x2232daab, 0x90a21959, 0xd5e3b62a, 0x83318258, 0xf5731eb8, 0x7ac2b7ae, 0x3ffc873f, 0xf67a6bab, 0x77b43dbb, 0x97946d7a, 
    0xed92e891, 0xc8dc6d78, 0xbc4adc80, 0x821d99e7, 0x2f32cb83, 0xfb855e53, 0xd163fc5a, 0x9e879ff4, 0x94f3bc18, 0x758f4d7c, 0x22574082, 0x920fcce2, 
    0xe0d03d79, 0x8baff50c, 0xcde13ffc, 0xeb10c64f, 0x5cd3843a, 0x5c44d279, 0xada4cc5d, 0x7f64bee4, 0x82db2dba, 0x071b7658, 0x17c67dd4, 0x94e6c531, 
    0xc518a952, 0xf1df4977, 0x9c98e767, 0x932f1f3e, 0x5d9fbb8a, 0xbf0ebfac, 0xbc8c2791, 0xbfe37963, 0x7677cb11, 0xa35079f2, 0x901b6b45, 0xb9035144, 
    0x25c91d78, 0xfb24f798, 0x063fd457, 0x7b6d5d3c, 0x3cae10a5, 0x8f362ce4, 0xd69f834c, 0x4fbb3ebe, 0x59f7eb22, 0x7a5e7103, 0xfa838cf1, 0x0efca8d7, 
    0xf1bebdb6, 0xf405891c, 0x0f8e789a, 0xac772137, 0x600cb88b, 0xe5b58efb, 0x697f18e6, 0xf558fb4a, 0xc36b0cf2, 0xf36b6d62, 0x37837d68, 0xef3c2f88, 
    0xbcbd35b3, 0x241be7d6, 0xff004692, 0x3885bd00, 0xa9f60bae, 0x8b2ec9f8, 0x44c7def0, 0x2b2b0b8a, 0xa58588bb, 0x895dd8b7, 0xc8324060, 0x91d30177, 
    0x5758729c, 0xe92e78a6, 0x658523ad, 0xb095ba45, 0x1f607903, 0xed775ce7, 0x7815fb01, 0xd4e5e2d7, 0xa6f0317e, 0x5cac65a3, 0x87c7550b, 0x99673fe6, 
    0x2762cb40, 0x2c316327, 0xb57e3b78, 0x8cf0e5e5, 0x9fc928aa, 0xbde29e51, 0x71ba1d9e, 0x76cfbff7, 0xebf0797c, 0x1ff1b1cc, 0xf9a32e84, 0x27b45a0c, 
    0x5464ec39, 0x7d15fa3f, 0x3169a3f1, 0xbe153ae8, 0x48840a9d, 0x300a6057, 0x2600ff38, 0x86f023be, 0xe29f3e8f, 0xba680f1f, 0x7efaa495, 0x47aa6bab, 
    0xcc9dcd0d, 0x94a03966, 0xd451805c, 0x35f408f2, 0xe2a5f6f5, 0x59c656cd, 0x594e9b64, 0x3ccc2ee0, 0x2705c396, 0xbdde838c, 0x24bd670c, 0xc38c4fbd, 
    0xbcaeb47b, 0xd6c1af8e, 0x107fdabf, 0x0e6437bc, 0xa8f1f74c, 0xfae7d807, 0x7a96da57, 0x90d66962, 0x8928c4c4, 0xbedee342, 0x7c9dfd26, 0xafe26d41, 
    0xc41e5e8e, 0x7e2dc613, 0x481670d3, 0x11c7f3f1, 0xd52baefe, 0xdadf6abf, 0x94e0dbf2, 0x25fad81f, 0x8ddf3aac, 0x86cc976e, 0x5d3e46c2, 0x248113ba, 
    0xa00772c4, 0xee38d8ea, 0x93aec36b, 0xd530c6c4, 0x5126f5db, 0xd5ca559d, 0x4896798f, 0xf7ebd77c, 0x7cd3f08f, 0x00ff7dc8, 0xc0fc9aef, 0xf8d6f693, 
    0xe78c2ced, 0x2c23d05d, 0x38bad849, 0x5a867d21, 0x0d00ff9b, 0xfed7f1a7, 0xff070d86, 0xffeb0400, 0x6757c500, 0x63e4adb2, 0x7f7436f5, 0x5f242d0a, 
    0x19391e82, 0x12cb88dd, 0xf3b4534f, 0x6dc27f5c, 0x52bdf52d, 0x90bccfca, 0x4e462116, 0xfa00ff02, 0x14fed0ab, 0x7e820fa2, 0xeb728c3a, 0x00ff6e03, 
    0xff704dbe, 0x45bc0100, 0x19bfe16b, 0x84fad7e8, 0x6f215b46, 0x3300722c, 0x7f70c68c, 0xf23a3f30, 0x5bdd2621, 0xd10ffd77, 0x1b63dc24, 0x00ff4674, 
    0x406de181, 0xa65bf9ab, 0xc79d1b67, 0xfdd47311, 0x717da53f, 0x1f5bd6f0, 0x4511690a, 0x6c76a614, 0x49fdcc33, 0xbe821ef5, 0xcb75d550, 0x6ab2872f, 
    0x3634738d, 0x4adc5bd1, 0x0720cba7, 0xbe2a492a, 0x7a700dbd, 0xe335ed4f, 0x8cf8118f, 0x881cfee8, 0xb1dcd5a5, 0xa80465c7, 0x0831505d, 0x1dfef8ac, 
    0x535f73c5, 0xd5aae195, 0x5e74e4fd, 0x7567cd67, 0x72aaf268, 0xf711fd96, 0x4fc600ff, 0x187fe809, 0x130c21bc, 0x837850bc, 0x346e914c, 0xcd87459d, 
    0x8896031b, 0x7118a59e, 0x92575c8f, 0x5cf603f8, 0xf1517cd7, 0xc4c378e4, 0xf0428357, 0xccc6e9ab, 0xdce044da, 0x4090cbdc, 0xd4abf020, 0x3dc8afe7, 
    0x1f3ed06b, 0x171e6ad9, 0x883763f0, 0x5ac55b2f, 0x710d94dd, 0x1e6d717b, 0x4a06f2d8, 0x3a069d46, 0xf87fbe66, 0x5e72fbdb, 0x1d12f8da, 0x1b924147, 
    0xfd71b826, 0xbb5ba79f, 0x486cb50b, 0x0ed26cbe, 0x95ad0d02, 0xea0b3907, 0x2aadba6b, 0x952aaa55, 0x6eaddd15, 0xde7ceef7, 0x0f27be1e, 0xcaa85446, 
    0xfb35bfd1, 0x4ff2b15b, 0xa81b3c8c, 0xa7fd5dfc, 0xebe14fbc, 0xa2d4e75b, 0xd396568b, 0xb17ce0ed, 0x04d8c459, 0xf5711c76, 0x217ea8af, 0xf04867f8, 
    0xf408c34f, 0x7d5b3e5d, 0xc5dcde22, 0x2693171c, 0x2ecf2756, 0xecc61dd8, 0x3fe67a9f, 0xbf87bf63, 0xff7df062, 0x35b58c00, 0xadbf56fb, 0xbb0bd24c, 
    0x845dba81, 0x9fc79d93, 0x4f6bf298, 0x1fd4a6f6, 0x2f7ef848, 0x05dfc43c, 0x99216ed4, 0x16364777, 0xf12f234c, 0xc783f30c, 0xc66a5415, 0xe074ba38, 
    0xf9f418ad, 0xea0fce1a, 0xde51ab93, 0xe4b3d572, 0xa05a1c3f, 0x79a91ef1, 0x677f1261, 0xf64ea84f, 0xbb0c37a6, 0x0445c91d, 0xdc2bce13, 0x4278147e, 
    0xd05e176d, 0x944199e1, 0xf824efe8, 0x4895de1f, 0x155eebcf, 0xd714e2f0, 0x569be575, 0xabb4f2ba, 0x0bad0c59, 0xa17e8793, 0xec530755, 0xf06b7d05, 
    0xbab94fc3, 0xd45bf796, 0x71ef3620, 0xd6d68618, 0x6e41f341, 0x76046da4, 0xe923792c, 0x6b5e5ee9, 0x4d2bde88, 0xdd1300ff, 0x9c22ece1, 0x5597acbd, 
    0xfdab456f, 0x1d9ae911, 0x8fbab7c0, 0x7eaf153c, 0x66ae59f8, 0x41980758, 0x5f130c00, 0x8c6cac3c, 0xf46aa7b2, 0xeb7a876f, 0xf3c5dc5a, 0xcd334690, 
    0xad1ece7c, 0x6e7daea6, 0x8b9e436f, 0x5f985a71, 0x7bc157b7, 0x9f89bf5b, 0xe927fe0a, 0x37372c90, 0xb5d2981a, 0x26708db6, 0x6dcd1329, 0x87f86333, 
    0xea49e896, 0xc6d50e36, 0xa308b36a, 0x0cc00d6c, 0x7c585f73, 0xe25bd063, 0x139fc017, 0x6d6dda5a, 0xb5c9d656, 0x815d3e0d, 0x54882bde, 0x46cf64b8, 
    0x3b32bd29, 0xccaff539, 0x782bfef9, 0x567b42bf, 0x1df16048, 0x92bb8c9c, 0x5321db65, 0xd51ee6d7, 0xb988b8f5, 0x585b324e, 0xb483dafc, 0xef331f25, 
    0xc1e7d9cf, 0xbc81575a, 0x1dc43f0b, 0x89f65146, 0xf094266d, 0xba210c31, 0x5fc14e7d, 0xd65a7c12, 0xc557f1a3, 0xe66b174f, 0xed5b3e5f, 0x236f614e, 
    0x5881951c, 0x4098fe88, 0xd7a41e00, 0x5fd07ebc, 0x0c3e2d19, 0xf0bb22fc, 0x36ab930e, 0x6e6de2ad, 0xc6dbca68, 0xd0c292c5, 0x24406ea0, 0x174e6220, 
    0xbe22cfa9, 0x9abeb347, 0xb9b827ed, 0xc7917c93, 0x48be5ce7, 0xe83e9211, 0xffbf27f4, 0x6fbe5a00, 0xbd52a52e, 0x4b3a6249, 0x4e69cffc, 0xdf729314, 
    0xae61a1a7, 0xdb8895ec, 0x4f8afdd3, 0x00ff59b6, 0x1c00ff77, 0xc49b37af, 0xe54cb39a, 0x120b410c, 0x4ce968a3, 0x8b8400ff, 0x5ff4fe58, 0xaaafc8f7, 
    0x79ec11f6, 0x7f9f5b7f, 0xe0fbfac0, 0x7ca8eb84, 0xa994f824, 0x39a018f3, 0x5e83fde7, 0xf4c9e075, 0x5b4f0bad, 0xbd5c10af, 0x1685a995, 0xcf4d63dd, 
    0x7fc2dd72, 0x754d32ba, 0xbbadb29f, 0xe263f04d, 0xd248ca55, 0x051b7345, 0x5e43981e, 0xe66aa84f, 0xb44b634d, 0x6d95069e, 0x43246c61, 0x4f148871, 
    0xd979c5e7, 0x6e1c5d56, 0xca09a532, 0x8ffcbad1, 0x13e6c7a1, 0x22d660c2, 0x1ed9de0b, 0xc44bf17f, 0xe48987ba, 0xf52b75d3, 0xa381ed27, 0x952382b7, 
    0x3f1e9cdf, 0x8d3f4fbc, 0xb3f0737d, 0x04dfd7c1, 0x47d91d7e, 0x6b1069a2, 0x65b511df, 0xce79aa53, 0x3231e902, 0x832d1893, 0x07129cca, 0x5ace573c, 
    0xe11b847f, 0x9db4857f, 0x4352c47b, 0xb5dc5b1a, 0xe36c89ee, 0x31d7977c, 0x03b3d11d, 0x762562f7, 0xef35e7fb, 0x8b6fb33f, 0x0fc3932e, 0x0d6a5faa, 
    0x33777f75, 0xe74ede5c, 0xcb16d22c, 0xc77cbd66, 0x51f1b014, 0x3b451ba5, 0x9978e45b, 0x43fb0b46, 0x2b6d2f11, 0x8ffcd7ca, 0x2e7ed06f, 0xdfc0cbf8, 
    0xfffbf50a, 0x1d3bec00, 0x3336c457, 0x4e51598b, 0xdf70882d, 0x60e46ebd, 0xe7d7247e, 0xcf5dfa94, 0x112d748c, 0xd615917c, 0x993dafa5, 0xbd097889, 
    0xec8190e6, 0x6fed6b32, 0xdbfa7816, 0xfc0b1fc1, 0x6a5dae71, 0xde10f776, 0x8cdb10ed, 0x389785f9, 0x9baf993f, 0x1b6600ff, 0xbf36f165, 0x06ea1d69, 
    0x97bd4d97, 0x328e2459, 0xfd070a63, 0xe17035f5, 0x75d3b86b, 0xafbfa52d, 0x68cdefd0, 0x49658d53, 0x65e55f3d, 0xb87fdfaf, 0xdecab2fa, 0x1e3ec3cf, 
    0x51e2d2b2, 0x2450161c, 0x3082532a, 0x6cbfc22b, 0x0d5fb5f9, 0xbdb22b7c, 0xdbb9b4d4, 0x8ebfbf4b, 0x44c93cd9, 0x33c56452, 0xdc3f742b, 0x4a5f31ce, 
    0xd3d031fc, 0xac111fc6, 0xf14da66c, 0xd7e51a44, 0x9fe938a8, 0xf85fb8c6, 0x5a82652b, 0xd1f0077c, 0xc27f030a, 0xef096c47, 0xb71e00ff, 0xab84c795, 
    0x128c8b35, 0x7bfd56bf, 0x7136361e, 0x53579c54, 0x7c020fe0, 0x0bfcd277, 0x840f8b6e, 0xe575e616, 0x07f81eae, 0xa8feeb63, 0x7e59a1d7, 0xdd639fdb, 
    0xdcee058f, 0x2100ff31, 0x00ff775c, 0xedf235ae, 0xcad4ef15, 0xcf6595f0, 0xcbfadd38, 0x595acefc, 0x54843ede, 0x5fb2d429, 0x1ff98fdd, 0x7bfbc55a, 
    0xf8b46979, 0xc5fd7717, 0x45fb00ff, 0xe07fd35e, 0xd2d93fa1, 0xee005f87, 0xe3ac61c7, 0x576800ff, 0xac5494c7, 0xd59d04a3, 0x00ffc53f, 0xec335599, 
    0xeab4aac6, 0xf21fe5df, 0x333c443f, 0x740500ff, 0xb1440f7f, 0xb5afc2bf, 0x6f6518a0, 0x3b0c6d11, 0x35f5f88f, 0xfb9f2ef3, 0xf3e95b4e, 0x9ef0ecdc, 
    0xda9177eb, 0xcca38e28, 0xbb2a494a, 0x3070aebc, 0x579c8133, 0x75bae988, 0xdaa8afce, 0xd3c459d8, 0x904adddd, 0x77751243, 0x7b541562, 0x62af4092, 
    0x0cbea1fd, 0xf40d7fe9, 0x9e6a09cf, 0xe95e981f, 0xd6a6b677, 0x1939eaea, 0x8ec84bd2, 0x404f7024, 0x3e0ee0dc, 0x32d45e43, 0xaa61acaf, 0x21f75155, 
    0xe9faea6b, 0xf9d8eba7, 0x70ecd97a, 0x6938da78, 0xdf2ad5ce, 0x756f4597, 0xd6d75e5f, 0x0dfbecdd, 0x6800ffd6, 0x52497598, 0xf6333c58, 0x0d594759, 
    0xa627f6fe, 0xd58ee573, 0x75fca999, 0x3a1c7e37, 0x6c8ca65d, 0x970c59da, 0x7bef0637, 0xc1b64f4c, 0x9ed7cc8f, 0xb25473f8, 0xb834f5d1, 0x5d6b34d4, 
    0x5e1bd776, 0xa359eed2, 0x43323252, 0xb0c1e844, 0x73241908, 0xdfe935c8, 0x29bc6c1d, 0x0a2fdbe1, 0xc27f78db, 0xda4c9a16, 0xac6783c6, 0x2e6f764f, 
    0x9b2792a6, 0x7918c724, 0x7101ed4a, 0x7b4e5296, 0xcb503463, 0xd5097b29, 0xa3474983, 0x74bbbee6, 0x2b1ef16b, 0x5d1caf3c, 0x29e1343c, 0x97b4973a, 
    0xf7b62a27, 0xa23c3dd5, 0x7d7c55ce, 0xb41b6da6, 0x726ca65b, 0x4f06a046, 0xffa5fafd, 0x4afb8400, 0x25a000ff, 0x470cfed7, 0xae1a00ff, 0xf6e68a1e, 
    0x9df9ed30, 0x7fa7defe, 0xfd29fdc8, 0x7f3bfc97, 0x5e877fe1, 0xa3b6f03f, 0xda90f9e5, 0x16ee9689, 0x880c4dca, 0x2bfcb84a, 0xf80aefe5, 0x126f3be2, 
    0x394f5f5e, 0x06683e58, 0x1c9cb8e1, 0x8aef7f02, 0xf5e00bfb, 0x81a7cdb5, 0xd79babb5, 0x113ed7cc, 0xf9eaca80, 0x792a34e6, 0xf3f9b5fe, 0x11b71469, 
    0xf20aa45c, 0x69e34266, 0x9fc78de4, 0xaadcbcd6, 0x1137866e, 0xf26b7428, 0xabc6ac3d, 0xa7c382ab, 0x1e1afed9, 0xd6def1bf, 0x1b6d5af7, 0xdc123757, 
    0xcbd3c269, 0xca66b5b6, 0x384900db, 0xa1d9dfad, 0x2eaf3935, 0x1b5edb47, 0x21c4915f, 0x70832c43, 0xb8d2d3cf, 0xb6781d8f, 0xc32bfbe3, 0x77342a9a, 
    0xb130e602, 0xc7801c39, 0x10dccf6f, 0xfea1af49, 0xdf56f809, 0x685ad34c, 0xc750c4ad, 0x21455b0a, 0x72c4345c, 0xe9a91fd2, 0x536a884b, 0x2b4629a5, 
    0x2886bf73, 0x545dadd4, 0xa19edbbe, 0x96d9efe3, 0xf091f6e7, 0xa297b645, 0x1cfed66b, 0x32642dd5, 0x643c63c1, 0xfbb8dedb, 0xaf1c46a2, 0x2bbcd6b7, 
    0xf5877fe0, 0xf77800af, 0xf525fac4, 0x43bcd380, 0x9525c3a5, 0x40cf9de5, 0x0767d0ca, 0xf441f0d0, 0xc2aff535, 0xa3cb128f, 0xf2ea36eb, 0x5e6f1532, 
    0xfb95f59e, 0x7fd66861, 0xbf447c0e, 0x09dd7412, 0x20e1bf2e, 0x5aefad48, 0x4cf208d7, 0x034f4256, 0x9f6e2b96, 0x9570f15a, 0x8f336c5d, 0xcdeed46f, 
    0x398eca69, 0x2ff35aca, 0x9bfdd2c8, 0x4eda4c7c, 0x171fe3bd, 0x634d76eb, 0x5b7a68a5, 0xdca9b379, 0x0bc9ee84, 0x050ec4ea, 0x72fb557c, 0x2c9ed37e, 
    0xdba0eff8, 0xb669dfda, 0xe3843f7a, 0xb0b923d5, 0x72dd55b4, 0xab32c50a, 0x5da5fe48, 0xf74a1fc9, 0x1a3f89ef, 0xfb2f3c2c, 0x16bee83c, 0xf5385ed3, 
    0xbf3014cf, 0x89118ebb, 0x9d20b3a1, 0x9d3a4cb7, 0xe9491bd8, 0x7afc115f, 0xb6e9b7d4, 0xe9302c96, 0xd3117234, 0x8ff1231f, 0x095b96c6, 0xd23ac456, 
    0xf265275a, 0x50f1f2d0, 0x9b3c0ca7, 0x452b9edd, 0x1fda5714, 0x5251142a, 0xdcb3445b, 0x96cc1bc5, 0xa615eee8, 0xc1583194, 0x09dab13c, 0x27c0ebc0, 
    0xa2161ad0, 0xa6e7ca6e, 0xeed0157c, 0xc5774d21, 0x6f674b71, 0x9b5ba571, 0xefaf357d, 0xbe46b461, 0x1e421598, 0x69cc4567, 0xe78c49e6, 0xac57bc28, 
    0x95f03e7c, 0x7f8d00ff, 0x78169f67, 0x2e7dfe0e, 0xdcd254f3, 0x583a1aeb, 0xafb7f6ea, 0x58a84bc6, 0x3ba37265, 0x33034886, 0x48fc94d7, 0x5a8400ff, 
    0x1e9ec0c3, 0xe22dfcd1, 0x3b5e4deb, 0x36ead35d, 0x6f7367e9, 0x93dbcd2d, 0x209edffb, 0x459888ac, 0x5b86c1dc, 0xef34e603, 0x56c6b7d9, 0x95f8025e, 
    0x7a6aac6f, 0x942e1af4, 0x91573c91, 0xfdf20ccf, 0x180426aa, 0x928dc4c2, 0xb0f9d60e, 0xa5d7513e, 0xad0e767d, 0x9e222e1c, 0x5abca316, 0x8f529371, 
    0x7db5be2f, 0xd9afd3b4, 0xa6f9e647, 0x6098151f, 0x131466eb, 0xa1948c53, 0xff7c4e17, 0xea7eba00, 0x7bef474b, 0x36e965df, 0xbdae3cbd, 0xff85f663, 
    0xe7f05b00, 0x2badc4fe, 0x7a4000ff, 0x0cefe3ad, 0x00ff0e78, 0xf812f7c7, 0x6dfac66b, 0x652f87bf, 0x2cdac779, 0xc1ac512f, 0x2cf69820, 0xede47007, 
    0xdbc165c7, 0x1d5f3ac1, 0xe2297c6f, 0x5c0b2f2b, 0xb32f1ee8, 0xf4d1a6d5, 0x6b1e3d2b, 0x0c756543, 0x0639bc92, 0x5d102f44, 0xcc7076a7, 0xd77cc708, 
    0x1c7ba89c, 0x710e223e, 0x515aab7a, 0xbaa6cfd6, 0x8bb1d49e, 0x55c18d15, 0xd4a4398d, 0x5c737aaf, 0x4fca4ab7, 0x4ddfc996, 0xf578e05f, 0x115e5114, 
    0xe7e9e7f5, 0xff782582, 0x367b6600, 0xf0666557, 0x0ee2c68d, 0xaff5e409, 0xc007fc8a, 0xe58323b7, 0x5f4300ff, 0xfe2f7869, 0xfec7964d, 0xe78f1bc5, 
    0x13f8165f, 0x00ffdbee, 0x6be83fd7, 0xde3fcbcb, 0xf2ab1eb1, 0xfb6f7c3d, 0xf9470fa5, 0x8d1bbe9b, 0x8846f167, 0x59215165, 0x9cf12e94, 0x577a350f, 
    0xf2247ad5, 0x80914000, 0xd7b87104, 0xff16beca, 0x479f9100, 0xcbae00ff, 0x56a300ff, 0x7bd1a6be, 0xd67c45fd, 0x7a31ae7f, 0xdefbc82f, 0x7300ff17, 
    0x87ce9df9, 0xe2d42871, 0x3f075722, 0x7ed835de, 0x495377d5, 0x61c21bf0, 0xc40376e5, 0xc4dcf8b6, 0x7a1efde3, 0xf94ff4e2, 0xaef54509, 0xffa8f6c3, 
    0xe10d9200, 0x6d19fb4f, 0x44f400ff, 0x059f65f4, 0x3d87434f, 0xe3333dfe, 0xfea8189f, 0x1f38d3de, 0xfd1bca3c, 0xf57598af, 0x2e7e9faf, 0xa8794933, 
    0xfdcd9233, 0x1c73c3a0, 0xafb8619c, 0xff61fca0, 0x27fd2100, 0xfeafbbfe, 0xbfe72b84, 0xf3f13f8b, 0x45d87fa8, 0xb55793bf, 0x270e7f97, 0x727c9a81, 
    0x288ade3c, 0x80f97caf, 0x00288aa2, 0x00288aa2, 0x00288aa2, 0x03288aa2, 0x0000d9ff, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(UpScaleRefineSlowerNode, "RealWorld Upscale Refine Slower", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Upscaling")
