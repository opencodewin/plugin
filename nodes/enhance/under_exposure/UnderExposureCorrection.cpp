#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "UnderExposure_data.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct AIUnderExposureNode final : Node
{
    BP_NODE_WITH_NAME(AIUnderExposureNode, "AI Under Exposure Correction", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Enhance")
    AIUnderExposureNode(BP* blueprint): Node(blueprint) { m_Name = "AI Under Exposure Correction"; m_HasCustomLayout = true; m_Skippable = true; m_BGRequired = true; }
    ~AIUnderExposureNode()
    {
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(UnderExposureCorrection_param_bin, UnderExposureCorrection_param_bin_size, UnderExposureCorrection_bin, UnderExposureCorrection_bin_size,
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 1;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "Under Exposure Correction:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6538;
    const unsigned int logo_data[6540/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xc4003f00, 0x5e6cd88a, 0xa5da4107, 0xd1fd615b, 0x569456f9, 
    0x9d5ebb9f, 0xfe2c4805, 0x7361fd95, 0x68e6fef9, 0x1fdd1fb7, 0xc3b64895, 0x557e743f, 0xc5bd2ca2, 0x8afb583c, 0x14f3a19b, 0x7ed8d316, 0x7fb2ef54, 
    0xd12a3fb0, 0xa4d64716, 0x34c7435b, 0xcc9883b9, 0x8fecdf16, 0x872d9eca, 0x957e46f7, 0x77a4b6a6, 0xf46df114, 0xcc41e6a9, 0x0fb10e79, 0x31af4dfc, 
    0xa79fefc7, 0x08abc6fb, 0x6a6fad0f, 0x36f1bff6, 0xb9fee9bd, 0x23f400ff, 0xf4c9be55, 0xb98da7af, 0xabb7e051, 0x9c264433, 0x88563c21, 0xc553fab3, 
    0xbdaa3d9f, 0xfbcd5cd1, 0x07487e20, 0x2b164eeb, 0x853fc5fd, 0xed330b69, 0x544c5b4f, 0x2c73a1fb, 0x0bfc0159, 0x928553f9, 0x557e707f, 0xdaa7b6aa, 
    0x95fe2d9e, 0xb9608f37, 0xfe25f695, 0x7d54fee2, 0xbfb87f85, 0x9bfd6b95, 0xbed947e9, 0xe610af94, 0x66c3a367, 0x7bf9b57c, 0xb328d50e, 0x74a59f3e, 
    0xb18de8f1, 0x6a073d78, 0xe11dbce8, 0x55ef0ead, 0x2e09e2d9, 0x48d8b3e2, 0x8b55a536, 0x15b10476, 0x7171f5f0, 0xad3707a7, 0x907b6ebb, 0x1525a983, 
    0x1639cfa5, 0x908afc47, 0xbed2f159, 0x1f837fa2, 0x687bf50b, 0x86888fc5, 0xc53f319d, 0x67b3137f, 0x704ddaa0, 0x35f83b9e, 0x8f0de16b, 0x1d1be267, 
    0x00730e55, 0x8c512660, 0x23e76ae7, 0x8622aff2, 0x4dc4857d, 0x93d15c53, 0xfcd7e2e8, 0x2bf5c40f, 0x108a78e5, 0x3dce8ef6, 0x0ffe4fd3, 0xb2d078e0, 
    0xfe6400ff, 0xec65f154, 0xd7eb2a7f, 0x9ff0c744, 0x145da5ca, 0x00ff4377, 0xf1aad77c, 0x33ab3c31, 0x3b225b8d, 0x5ba4ca1f, 0xfe847f12, 0x8e2eda55, 
    0xfc99e73f, 0x87d164aa, 0xe0c7f3fc, 0x418b376b, 0xb59ecfca, 0xaffd338b, 0x00ff917b, 0xfbb79f2d, 0x5f0bab46, 0x2fbbd26f, 0x75056910, 0x710040cd, 
    0xf66fbfe7, 0xa2832e8d, 0xdbaa49d8, 0x126eaa2e, 0xb512b8c0, 0x5f2083b2, 0x9d1fd86d, 0xa8c45a7d, 0x3ef252d3, 0x7273c97d, 0xb4709cf9, 0xa73800ff, 
    0xfa6a4f8b, 0x2fe1c7be, 0x4c7bedc1, 0xfaba563e, 0x6b63c33d, 0xef306add, 0x3801f85f, 0xfb78cb35, 0xfcd07cf6, 0xaac9a239, 0xd336fee8, 0x77951835, 
    0x22f2acad, 0x8ff428cb, 0x9ee7106b, 0x52e11598, 0x5a253ce2, 0xa394948a, 0x5faced26, 0x528faee6, 0x84885da6, 0xd2ca451d, 0xf24bd257, 0xcf07fed1, 
    0x537ad062, 0xfcb1a785, 0x363aa8ab, 0xca9f360e, 0xaa47ba9e, 0xd7bdca9f, 0xc6738f88, 0x85e5a8f6, 0xada7b1a7, 0x7fc23fa1, 0x4997ea2a, 0x953fdc1f, 
    0xfe48ba4a, 0xf150e9e7, 0x23db2731, 0xfe19fb91, 0xfba8fce9, 0xfce9fe19, 0xc9feb2ab, 0xca1fee5f, 0xfe95ec8f, 0x3eaafce1, 0x647b11b5, 0x17feac7b, 
    0x0c53d69a, 0x4e6518d0, 0x29c60819, 0x3fe2e1ab, 0x1eee3583, 0x5893b42a, 0x69e0de86, 0xca1c13e5, 0x847e03ea, 0xad0535d7, 0x9f709f8e, 0xcf69236d, 
    0xfe13a4ca, 0x74e3577a, 0xa7d459b3, 0x96bdd6cc, 0x3215e9a7, 0x70f656eb, 0x63ed5d77, 0xc2b7f09e, 0xb2c4476d, 0x5bda2a64, 0x38cb00a9, 0xc8fe9120, 
    0xdf6ec5ef, 0xe1d408fc, 0x67985a5c, 0xcfcc4fda, 0x06b7c382, 0xf14d0fbd, 0x6feda3b5, 0x1be74a35, 0xe98a7151, 0x6b8bf5ec, 0x9c130fe5, 0xaf18c1f4, 
    0x1967c49e, 0x6bcd2784, 0xb33ed62e, 0x65e0910f, 0xb96d964f, 0x988fbd77, 0x75277cef, 0x173c5ca6, 0xa80cef56, 0xbfc3904a, 0x2e51efb1, 0x5ebb7f88, 
    0xc80ef1d9, 0x2cac3aea, 0x1ec74abb, 0x49ce03dc, 0x47cc35cf, 0x6d25f9e1, 0xeb7611a9, 0xed351985, 0x4a1dcd51, 0x6cf49c51, 0x01563cf9, 0x502aaf50, 
    0xf27926d5, 0xb5fb67e8, 0xfb67682a, 0x5ed6e9b5, 0xd09dba09, 0x119517c9, 0x07c72c23, 0x0f4b57f9, 0x6e39bdc3, 0x34e663a3, 0x30a30463, 0x8fe77ac3, 
    0xced558eb, 0xbfd1d329, 0x4f86deb8, 0x18afae88, 0xe343d7db, 0x6678166f, 0xec763d6b, 0x5e44034d, 0x18ee2243, 0x11e4a4dc, 0xc6b106f5, 0xfa4acf8b, 
    0x9c75e23f, 0x7157acda, 0x6dee685b, 0x015a6eac, 0xaa32883c, 0x1b2e1fa7, 0xafb83e38, 0x2c084b27, 0xceae8de6, 0x810cf7d8, 0xfb6a8fd4, 0x2a670e7c, 
    0x8f9e14f4, 0x59e6e7b6, 0x31541e86, 0xcd37856e, 0xf5b7b67e, 0x67f050ea, 0xc657ddc2, 0x595b827a, 0xf28c2146, 0x62e533d7, 0x27c7f541, 0x7b7d57d8, 
    0xb66b30fb, 0x8b4b8ba9, 0x0928c73b, 0x5b5efe6d, 0x67fe19b8, 0x7e75b5d7, 0x65a1f81f, 0x178e2264, 0xb0782b8e, 0x07440aab, 0x7aad3fca, 0x07f18736, 
    0x5515d74a, 0x00e57824, 0x024ccc63, 0xbee6017d, 0x669c1f63, 0x5373eab4, 0x5abaa285, 0xf77900ff, 0x96476e79, 0x88c9a357, 0xa7fbdca8, 0xfe5a926f, 
    0x25bec927, 0x78ab73f8, 0xd5c8ef46, 0x62b7642c, 0xe4fd83a1, 0xe330fa20, 0xa561acf0, 0x9ffa4a8f, 0xda9fa4e3, 0xedd31bbe, 0xf3667461, 0x39b9aecc, 
    0x3f06aec2, 0xc22bfd16, 0xc9f3c393, 0x99854420, 0x244001cf, 0xdcb2f79a, 0x32cc78d6, 0x5fca5aab, 0x77367ce4, 0x8e598684, 0x9c841a96, 0xeaefaca2, 
    0x400e6daf, 0xb4fb8369, 0xf747d3f5, 0xbe6cd16b, 0x9b57eb1a, 0x6abcd88a, 0xf2cb78bf, 0xfe3cf063, 0xff68df55, 0xa9740500, 0xbd67bb74, 0xdb6ee592, 
    0xc68d61fd, 0xe5db91c1, 0xc4abf5f5, 0x3a7c1867, 0x4d7fa5bc, 0x6699b04c, 0xb3df1a3f, 0xe8dd65a7, 0x00ff9f8f, 0x68f787b3, 0xdd1fcefe, 0xfe6dabaf, 
    0x3b56f80f, 0xdff49578, 0x6740d535, 0xe3584e69, 0xffa4e6a9, 0xe1458500, 0x2f05fa3f, 0xfc3ffdfd, 0x8a0f7955, 0x2fcbdf30, 0xa0cffcc3, 0xb599255c, 
    0x3ffe687e, 0x785c6fe4, 0x6d6bce92, 0x734393f6, 0xb21b1312, 0x755ce110, 0xabfd1d07, 0xd6b10436, 0x40b2f990, 0xe16c39e8, 0xabfcf779, 0x0bb588e6, 
    0x766c17b9, 0x97db6405, 0x3ee74455, 0xb47e3db8, 0x05df5b91, 0x260bfb66, 0x002258fe, 0xf99ad74f, 0xc169e058, 0xff2c355a, 0xf633af00, 0xed4ece3b, 
    0x78234a1f, 0x1f75ca3a, 0x422656da, 0x15894ac1, 0x573afcb9, 0x61a7fd4d, 0x7bd29869, 0x5572b571, 0x0a3f701c, 0xe2c262f9, 0x4add366d, 0x176ecd5b, 
    0x0f14c49c, 0xdbaa26af, 0xd6ceaef8, 0x796be6e6, 0x46a99bfc, 0x1b202926, 0x3336a0fe, 0x2a043c51, 0x68b3516f, 0x146969ce, 0xc28dad8f, 0x3b7bbf48, 
    0x3bee61c0, 0x35d5cf1a, 0x25d5d254, 0x7117b12c, 0x9363ec1e, 0x10cc57d0, 0x9d5ceff8, 0x53c78e24, 0xe5c619ba, 0xed816413, 0x2bfc4892, 0x43fcd79d, 
    0xb691b4ac, 0x4cdfaba3, 0x442548f1, 0x30aad869, 0xce0118ce, 0x45cd93e1, 0xda3cb23c, 0x724e41cf, 0x817decb5, 0xdc1d716b, 0x3c5c828c, 0xd940876d, 
    0x7684de2a, 0x0b87ac35, 0xf7889186, 0xff3488af, 0xcbea1300, 0xb92bdb36, 0xe34e79a1, 0xb1c02824, 0xc93856cf, 0xaeb6e63e, 0x1ee351bc, 0xa2f63a21, 
    0x90948c33, 0x22f581aa, 0x6e62998a, 0x152aa2ca, 0xefb1571a, 0x45f12b5e, 0xf15777a4, 0xcc054b59, 0x7311d3d6, 0x8c76ed1a, 0x72869b9e, 0x2de48a3a, 
    0x4b7c2d2e, 0x5bd2a433, 0x942271f0, 0xc23fda54, 0x7dbe7cbe, 0x9750e342, 0xcbcd3530, 0x2a316339, 0xe6272fed, 0xeb393927, 0x93ae5093, 0x8ec5c8a9, 
    0x389e549e, 0xf515314c, 0x34ca32b4, 0xb355aba9, 0xf333fdef, 0xd46b44ac, 0xe97229ad, 0xbdfeb57d, 0xa44ffc77, 0x16f0495f, 0xf5aefb96, 0x90393abd, 
    0x95f3a365, 0xb9f2fd8f, 0x6ad8d635, 0xf4d31f3e, 0xbbb167db, 0xa14a30b1, 0x86ba31e2, 0xebb88e71, 0x4bbec29f, 0x9bbb34d3, 0x652c2c45, 0x14e59c8b, 
    0x24e9fc03, 0xd4e16cd5, 0x629d49d2, 0x51f922d4, 0x1e6481cc, 0x2acd69c7, 0x682b6cb9, 0x7ff7b7eb, 0x29bd995f, 0x69bc8255, 0xfae8fda8, 0xa67835f9, 
    0xf9649945, 0xd8539418, 0xb5b3e29e, 0xf6e9507d, 0xccab724f, 0x80ca902b, 0x57bc1e95, 0xc7f831cb, 0x58caf357, 0xcb1197ea, 0xc12d1482, 0x27b0e7c1, 
    0xf862a51f, 0x24f1528f, 0xa51eadf6, 0xb4b55fac, 0x74230683, 0x33ea5bdb, 0x64a9acc8, 0xa857e7d0, 0xb32ae8ad, 0x2ddfa0ac, 0xa400fffc, 0xae65557d, 
    0x32f96c7f, 0xb9073b4b, 0x9989cc8f, 0xe34c64b0, 0xeeeb8e72, 0x4da3ae38, 0xfe490453, 0x74cc2691, 0x46f88a3c, 0x6650770d, 0xe69eca8f, 0x12512359, 
    0x44da8d39, 0x2341d151, 0xd2614721, 0x7fb538ba, 0xa3d85b1a, 0x849aebdb, 0x912abf51, 0xd447caca, 0xbed68a63, 0x54950d4d, 0x7a7846be, 0x6e94f8b3, 
    0xdfb2ad7d, 0x34f3e7fb, 0xf9feb76c, 0x497ccdfc, 0x3f1beff6, 0xa9477ccc, 0x7e73f264, 0xb68fc67f, 0x86fed7f8, 0x00ff473d, 0xd7f8cf03, 0x3f14f627, 
    0x8efbfae7, 0xfe536faf, 0xe4eb3f7d, 0xd37ed074, 0x230f00ff, 0x03871b03, 0x3fb85aee, 0xf01fab89, 0x880edfd4, 0xfa24ede7, 0x305f0ff9, 0x880a6adf, 
    0x5eb5b208, 0x1b2a463b, 0x3fe7632d, 0x3fddd6e8, 0x69af98e7, 0xae09ae70, 0xebfd696e, 0xc5578efc, 0x93cfd838, 0xc000ffdc, 0x4e9ff95f, 0xf041ed3f, 
    0xe4d9e3ed, 0x61d3c94c, 0xe9636cb6, 0x37ed3750, 0x8c15f9f0, 0x1cbb0f76, 0x0990a17f, 0xb4c52bfc, 0x0a4476dd, 0x6eafa545, 0x95fea9b0, 0xee892fa9, 
    0xdb5a9c4a, 0xf82f107e, 0xbbfa3f57, 0xe5b58b82, 0x7f8100ff, 0x9e053dc0, 0xcdafa4e3, 0xff05fc1f, 0xffe99900, 0x1ed4f000, 0xe9c36509, 0x8bd01180, 
    0xa7f4e376, 0x4fc300ff, 0x7fb60c78, 0x9e24e5b2, 0xd79c5b58, 0x247eeb82, 0xb445ceb8, 0x0f8cf659, 0xe24d58e9, 0xea3f962b, 0xae441fa3, 0x0abe70f8, 
    0xfe97f76a, 0x0000ff05, 0x46f12af3, 0x5bb99436, 0xff03fe8f, 0x67fa0400, 0xc1871afe, 0xfb341b39, 0x0bed1895, 0xed3fa6f5, 0x859be02f, 0x66225d22, 
    0xdd06c1dd, 0xdd7c458e, 0xcb2e8817, 0x3f2edd0f, 0xbc28addc, 0x3eb87849, 0xbe00ff50, 0xf8c23705, 0xfe97f528, 0x0000ff05, 0x6c9ce250, 0x00ffc7fa, 
    0x8200ff01, 0xb45fec7b, 0x02c8c34f, 0x1518dbaa, 0xa32d0246, 0x6addbe02, 0xfc49fb71, 0x8ae6233b, 0xdbad7d72, 0xcde56bfc, 0x6b925043, 0x18c75899, 
    0xca4f6266, 0x51d59c33, 0xe1c0e874, 0x5e91ef7f, 0x013338e4, 0xcf39a938, 0x5f0200ff, 0x2b3e72e4, 0x486e27c6, 0xfc2fe07f, 0xe13faacf, 0x611d3ea3, 
    0x2a256d95, 0xa7ec877f, 0xdf98d69f, 0xdec327b4, 0xb73fa7ab, 0x00ff11fa, 0xd3aef91a, 0xfc80b85a, 0x82e21fab, 0xde149faf, 0x1f6c00ec, 0xea3f1544, 
    0x253d0986, 0xff0ffc3f, 0xfd23b500, 0xb1afc56d, 0xfe07fc0f, 0xf0bfef09, 0xe40abed1, 0xc326a549, 0xef4e00ff, 0xf68714fe, 0x5101f08a, 0xc02e4abb, 
    0x12a37f60, 0x7be77c05, 0x705c5dad, 0x51853ff8, 0xda937237, 0xf8c161ba, 0x3fcdaf06, 0x00fe0bfc, 0x63acd6bf, 0xf67f31de, 0xe913fcef, 0x7846fbc3, 
    0xa6c92f0c, 0x568ea7ca, 0x9ad61f06, 0x824fb4df, 0xc9b4e125, 0xd042475d, 0xf3b5fe31, 0xf524da2f, 0xaaf4ada7, 0x5ba53f38, 0xfb02fce0, 0xc000ff53, 
    0xfa07e0bf, 0x627f8cd5, 0xf409f81f, 0xf0787c93, 0x46273103, 0x36499e24, 0x3f69fca7, 0x3f7c7be1, 0x2fa000ff, 0xf19f4afe, 0xb43f9caf, 0xfe683dee, 
    0xa5f5b8d3, 0xbfe0a9fe, 0x17f87f9e, 0xac7f01fc, 0xf7f9bff8, 0x4b04fc0f, 0x006c94eb, 0x6a52c733, 0x8d856b0b, 0x3da802b9, 0xb60415c3, 0x3d37a969, 
    0xa324456b, 0x939be563, 0x69dd3997, 0xc1a0e4f7, 0xeaf3aafc, 0xc5a9a30e, 0xad5b0272, 0xaeede522, 0x90099263, 0x1090a3e1, 0xb42e4f45, 0x5bac10c4, 
    0x2d97f38a, 0xde4da754, 0xcdd6542f, 0x743cbd1e, 0xac1f3579, 0xa53c726a, 0xa3acc855, 0xe3fde472, 0x335c5c51, 0x6a9227b1, 0xff32dd5b, 0x82b74f00, 
    0x62498b7b, 0x8e577582, 0x062bbf52, 0x3a3d1819, 0xacdfae76, 0x4ee3a252, 0x64cb4972, 0xeef4bbda, 0xea26d578, 0xc7bd99cb, 0x78a8eca5, 0x54575663, 
    0x7fae8c71, 0x4f59c81a, 0x38244aad, 0x26b95beb, 0x66c32925, 0x8ef9945b, 0x35cf185f, 0x76ab1911, 0xf5dd75fa, 0xc0dbd3a4, 0xaa6e45f3, 0xd8196465, 
    0x237f420f, 0x731251cd, 0x8e92bed6, 0x4eef942e, 0xb271939c, 0xda743569, 0xe9da274d, 0x9946afa7, 0xcbdd76cf, 0x3c059211, 0x517347c8, 0xc8995423, 
    0x06d339ad, 0x316bdcd3, 0x3a53fc6e, 0x54e09c53, 0x68abfd45, 0xdfc2b6d4, 0xc8b8f461, 0x358751e9, 0x3745b622, 0x17aae152, 0x7d1bb56f, 0xea46dda8, 
    0x91e6609e, 0x34fcaff3, 0xe13fc6b1, 0xc900ff1d, 0x5ed7feef, 0x418bf0dd, 0x18c5aff1, 0x18bef485, 0xede80e5f, 0xcd3b9218, 0x38b3e546, 0xd0f2803b, 
    0x5e3e9247, 0x110403a7, 0xec17d69c, 0x5937fb77, 0x789056eb, 0x8236c5ef, 0xe9e402ea, 0x94eb7c5a, 0x7706a77d, 0x6164d453, 0x7982e341, 0xe2d7bde2, 
    0xf05ded47, 0x9ce100ff, 0x416dd2c6, 0x2441bdf5, 0xd2b3a468, 0x15d1ca02, 0xc19243c6, 0x39d33346, 0xafb123c8, 0xc4db6ce1, 0x96d7f94c, 0x3d972903, 
    0x8be5bb45, 0x7a6bcb4b, 0x3ef4a5b7, 0x94718893, 0xa32cb73e, 0xad4e3087, 0xbc52fc68, 0xbded8b9a, 0x34b9baae, 0x7a56d393, 0x2b3c8877, 0x039af8a6, 
    0xbbbaf51d, 0x01932a85, 0xa08e4c87, 0x573cb8fe, 0xf419dfcc, 0x2afc169f, 0x78da5f13, 0xe1433c71, 0xdf9056e4, 0x78237ac1, 0xf3b15455, 0xc0912923, 
    0x71249563, 0xbb579cd8, 0xcbf853fc, 0x3a848fe1, 0xdb75db2f, 0x58e68ef4, 0x054b7ba4, 0x95e59a39, 0x03a0da49, 0xe3064e80, 0x4f860585, 0x851ff235, 
    0xed87f1a3, 0xaf01f1a7, 0x87c5c935, 0x887b7483, 0x8d4f93a5, 0xb8104298, 0x0b464acc, 0xccefd14a, 0x04a0a787, 0x0d6ef80a, 0x9aec73cf, 0xafd3aa8c, 
    0xfc8e84c9, 0xdb7f99cb, 0xdaefec89, 0x9fddfbca, 0x7e99c115, 0x619e5331, 0x18385a98, 0xb5f95c2d, 0xa75968e9, 0x2fbfe97b, 0x153e34ab, 0x1fc69378, 
    0xe80a2f19, 0x61db0c5e, 0x529b6d1b, 0xdb31bfba, 0x79377d44, 0xa0ec6359, 0x2b70469e, 0x0e2fcbec, 0x2c86b75b, 0x18468db4, 0xdd8ae3ae, 0x2a237522, 
    0x8e0c5459, 0xb51e7afd, 0xe2cf78c5, 0x80efc3df, 0x99a6355a, 0xa66f757d, 0x6b01312c, 0x6ff1e9a3, 0xc4386797, 0xc141f76b, 0x9e009bf9, 0xefe1a3f5, 
    0xd61b3e8d, 0xf8db167e, 0xe8e0eefe, 0xefaa049a, 0x75a8fcba, 0x302623db, 0x5e89e5a4, 0x404e7215, 0x4b5c5ceb, 0x00ff59c5, 0xaa352a12, 0x25944629, 
    0x9f95b6fb, 0x92a6d933, 0xb4a5e96d, 0xc497a75e, 0xa4f9b115, 0x38f0e269, 0xb9c35129, 0x67ae4da5, 0xdade4929, 0x9fddeeb6, 0xbbb6acc2, 0x5a7c9d67, 
    0x78ae61f8, 0x535dc25e, 0xf85a3ac2, 0x79c10882, 0x10bb24ac, 0x84ea8bce, 0xcf000ea9, 0x1bc78304, 0xe1d77c8d, 0x7a8f00ff, 0x6b758aa7, 0xf0482f7d, 
    0xa196fa6c, 0xb762db70, 0xec2cbbb7, 0x1ef8087f, 0x9a3af0a4, 0xfbcdf8d1, 0xe397784b, 0x830fbfe6, 0xfa0c1d7c, 0x327d877e, 0x9c02c7da, 0x1cb35f5c, 
    0xea3e5266, 0xc638b27f, 0x7dd0134b, 0xe1aff03b, 0x663f831f, 0x4e8d07df, 0xdfd2e2fe, 0xba028e51, 0xc176bd8e, 0x5a2a6e37, 0x6ea22735, 0x93a30a55, 
    0xfd9ae48e, 0xf11d9f0a, 0xc2974916, 0x7a6e8d19, 0xcb23f8d2, 0x7d7f2b17, 0xf7cd5fdb, 0x15fdf66e, 0x4db9c325, 0x0adaed3f, 0xf0af2eae, 0x6f2e17e1, 
    0x56967ffb, 0x5f754fdf, 0x6fedaea6, 0xbef015fc, 0x37e9a1bd, 0xb1223e37, 0x2e2fd3b6, 0xc1593cd6, 0x1883f675, 0xb1edf000, 0xb9e87946, 0xc673f51e, 
    0x352d0b9f, 0xd2ba67a8, 0x4c3d3b92, 0x254665a9, 0xdabf9521, 0xea733bc0, 0xc71afa01, 0x48fb69f8, 0xd7e24f78, 0x3dbcef8c, 0xdcb6cfe1, 0x5da3a5b5, 
    0xf9d0ecb5, 0x5587ba50, 0xe77782c2, 0xafa83a2e, 0x7fa2fd36, 0x020f5b6c, 0xdec3abfd, 0x531d920c, 0x534c4ac4, 0xf6f6f0df, 0xb403a147, 0xba4f0f92, 
    0xade05c0f, 0x3b437d7e, 0x43dceae2, 0x498dca3c, 0x454dc553, 0xf228c9ca, 0x8de692a4, 0x5a926cb9, 0xfcccdf34, 0x71950fdf, 0x743b3716, 0x75f65069, 
    0x77719364, 0x737a8c51, 0xab97b65d, 0xe4a9ede6, 0xc7f83e7e, 0xf12efcae, 0x8817da24, 0x4bf6197c, 0x0248d4f8, 0x48d261ea, 0x485d21c9, 0x7d70908f, 
    0xcf3540fd, 0x55c300ff, 0xafd400ff, 0x0f9500ff, 0x1d5ed5fe, 0xfe576bad, 0x756ed523, 0x6bf2522d, 0xfce542fd, 0x7267aec9, 0x49eaedce, 0x7f95aafc, 
    0xcce2d246, 0xb58f53f9, 0x6b2b27c4, 0xf92b4568, 0x3aeacf68, 0x7b96293c, 0x53f4aa28, 0x73da959d, 0x9c6cfd4a, 0xacb64b9b, 0xa9fda7f7, 0xc0f074cb, 
    0x00ff5b1f, 0xff51d7fe, 0x3751c300, 0xff430bfd, 0xfbbf0300, 0x9b8e785d, 0xfaea5ca7, 0x9c85ad8d, 0xd4dd3d4d, 0x273104a9, 0x55217657, 0x0a24b947, 
    0x1bda2ff6, 0xf097cee0, 0x96f04cdf, 0x85f9e1a9, 0x6a7b97ee, 0xa3ae6e6d, 0xbc249d91, 0x0447e288, 0x00ce0df4, 0xe935e4e3, 0x203ee2d2, 0x22a642ad, 
    0x5ad8fd15, 0xbb3aecfe, 0xd8df2f7f, 0x7094afe3, 0x471517fe, 0xbf975205, 0xf4befc56, 0xafbea2ad, 0x6eeb4b9b, 0x9f8b7df6, 0xff4dd4f0, 0xffd04200, 
    0xfeefc000, 0x6a3f4ad7, 0x2df31f46, 0xff0efc0f, 0xe375ed00, 0x2cd51c7e, 0x2e4d7db4, 0xd71a0d35, 0xd7c6b55d, 0x6896bbb4, 0x908c8cd4, 0x6c303ad1, 
    0x1c490602, 0x777a0df2, 0x0a2f5bc7, 0xc2cb7678, 0xf01fdeb6, 0x3693a685, 0xebd9a0b1, 0xcb9bdd13, 0xe689a4a9, 0x1ec631c9, 0x5c40bb52, 0x9e939465, 
    0x7c3acdd8, 0xa3d49d4b, 0x5a00ff3a, 0x72da964b, 0xbdb5ebab, 0x5f217ecb, 0xe2e8c925, 0x125e61a9, 0xd25eda4f, 0x575bd152, 0x3c3dcd7b, 0x00ff3593, 
    0xfe5ba9e1, 0x00ff9185, 0xfd00ff81, 0x6af88fae, 0xa100ff56, 0x7fe07f64, 0xaf6b00ff, 0x7fb8a207, 0xfeefecd6, 0xe400ff7f, 0xe400ffb0, 0x56fd534f, 
    0xe700ffc9, 0x2f4dfec7, 0xaffb48fe, 0x93f8acf6, 0x85efc137, 0x5ff01dde, 0x0b6ba486, 0x5bd4428d, 0x349cd0f9, 0xa9229136, 0xe442470a, 0xdd409f81, 
    0x2b85aff9, 0x6f697fdc, 0x17f1c918, 0xe26ff849, 0x8ecc375f, 0xf23644e7, 0x5197e8a0, 0x8e715648, 0xe03e95dc, 0xfceaf08a, 0x6bb087ab, 0x4b4a8107, 
    0x4f4e6edf, 0xf06b77ab, 0x2ce1e6d8, 0x62b965b5, 0x65efd78c, 0xaebe3929, 0xfa3bcd5c, 0x8aafc65a, 0xf8ab573c, 0x569f5ad7, 0xf50935d7, 0x6f6c463d, 
    0xc0c9769e, 0x00e800e8, 0xaf0006ec, 0xad677fb6, 0x9fe1db5a, 0xe27591ec, 0x5a14634b, 0x17eab184, 0x591965a8, 0x16f3636e, 0xc4b82335, 0x237cc52b, 
    0x43f8425f, 0x2b9ef7c4, 0x8f7596fd, 0xc9cc590c, 0xf9ebe177, 0x098d252f, 0x82a4ac05, 0x407d6276, 0x8ffaf97d, 0xc13ecb5a, 0x951646ac, 0x3805e918, 
    0xab2eb7df, 0xb88cbdee, 0xfc582ca7, 0x562a0c15, 0x9943aaa4, 0x5675b92d, 0x78b46bb7, 0xdfadb73e, 0xbb5793f8, 0xb94b35d5, 0xa90bb56f, 0x4c5cb30c, 
    0xdc6367d9, 0x6e8700ff, 0xc6fb7a95, 0xe1a5eeda, 0x5c0e0f8b, 0xe81297ea, 0xb6640c56, 0x2862cbd3, 0xdb6297d8, 0x8fcc5647, 0xc7e6e7c9, 0xbea2c44a, 
    0xa8c1d99b, 0xdea615a7, 0xb48f9d5e, 0x14b56974, 0xb4ddbde2, 0xb49da6db, 0xf60bfad0, 0xf5edd11c, 0x7cde8d4f, 0x0d4b1ee8, 0x33987b32, 0x481632fc, 
    0xd548f9f3, 0xfc52fb99, 0x243ed56d, 0xd154eb78, 0xf064ba62, 0xe47797c6, 0x36005adb, 0x436f91bc, 0x2cc93d31, 0x8eb4edf8, 0x55f6372b, 0x025ed4f1, 
    0x4fa3d3f8, 0xcb862073, 0xcfa60d51, 0x2e517423, 0x41c21f36, 0x6ba64f1e, 0x6b55bccd, 0x7de26571, 0xb3f0de62, 0x3479c35d, 0x25391673, 0xfcd990c3, 
    0x1c3b5f73, 0x3c739e12, 0x427b554d, 0xca5abe3c, 0xfc56f3f6, 0x868fcf7c, 0x47bc1a59, 0x375e1d57, 0x0b05a5e5, 0xcda7bcf4, 0xaf65356f, 0xf08e7969, 
    0x8f358bf7, 0x68fbb509, 0x73da84fa, 0x9d355bdf, 0xd6b6dbc3, 0x99955978, 0x95007537, 0x8ee9985e, 0x144dd684, 0xc528d257, 0x67b52437, 0x324628d9, 
    0xbf574b72, 0x49455198, 0x73cf126d, 0x5b326f14, 0x9a56b8a3, 0x0463c550, 0x2768c7f2, 0x9f00af03, 0xa5966a40, 0xd3736537, 0x77e80a3e, 0xe2bba610, 
    0xb7b3a5b8, 0xcdadd2b8, 0xf7d79abe, 0x5f23dab0, 0x0fa10a4c, 0x34e6a233, 0x73c624f3, 0xd62b5e94, 0x4a781f3e, 0xbfc600ff, 0x3c8bcfb3, 0x973e7f07, 
    0x6e69aa79, 0x2c1d8d75, 0xd75b7b75, 0x2cd425e3, 0x9d51b932, 0x990124c3, 0x247ecaeb, 0x612dc27f, 0x680f4fe0, 0x75f116fe, 0xae1dafa6, 0x741bf5e9, 
    0x96b7b9b3, 0xfdc9ede6, 0x5610cfef, 0xee224c44, 0x812dc360, 0xec771af3, 0x2f2be3db, 0xb74a7c01, 0x7a3d35d6, 0x484a170d, 0xe7c82b9e, 0xd57e7986, 
    0x610c0213, 0x07c94662, 0x1fd87c6b, 0xbed2eb28, 0x8e5607bb, 0x0b4f1117, 0x382dde51, 0x9747a9c9, 0xdabe5adf, 0xa3ecd769, 0x0fd37cf3, 0x7530cc8a, 
    0xa9090ab3, 0x8b504ac6, 0xdd7f3ea7, 0xa325753f, 0xb2efbdf7, 0x9e5e9bf4, 0xfbb15e57, 0xad00ff42, 0x00ff73f8, 0xff955662, 0x563da000, 0x3c86f7f1, 
    0xfbe37f07, 0xe3357c89, 0xc3df367d, 0xe3bcb297, 0xa81716ed, 0x4c9060d6, 0xb803167b, 0xb2e37672, 0x9de0ede0, 0xbeb78e2f, 0x9715f114, 0x0f74ae85, 
    0xd3ead917, 0x9e15fa68, 0xb2a1358f, 0x5e4986ba, 0x1722831c, 0xbbd32e88, 0x63046638, 0x54ce6bbe, 0x111f8e3d, 0x55bd3807, 0x67eb28ad, 0x6a4f5dd3, 
    0xc68ac558, 0x9cc6aae0, 0xbd576ad2, 0xa55bae39, 0x64cb2765, 0xf0afa6ef, 0x288a7a3c, 0xf3fa08af, 0xbc91a661, 0x6317911e, 0x2ab35f12, 0x31a9f213, 
    0x133b908c, 0x1ef473b5, 0xdf5a8f95, 0xdb7f2af3, 0xacd3feef, 0x22f5889a, 0x3cb7423d, 0x65717b2b, 0x79f6b1fd, 0xd3cd83e5, 0x294f8aa6, 0x8c43efca, 
    0x7d50c7a9, 0xbcb50e2b, 0x3100ff3d, 0x97f2fa3f, 0x9c3451fa, 0x93a8625a, 0xa2c94c8b, 0x03cd2a8a, 0xc2786ca5, 0x25f1b857, 0x49bbb2f4, 0xdd1d8c2c, 
    0xa89859ce, 0x93dc9324, 0x5bebb1de, 0x1ff25fc5, 0x8000ffba, 0x22e800ff, 0xe74bfca1, 0x35fe10fa, 0x9a0cfdf3, 0xb0aca228, 0x00288aa2, 0x00288aa2, 
    0x00288aa2, 0x03288aa2, 0x0000d9ff, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(AIUnderExposureNode, "AI Under Exposure Correction", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Enhance")
