#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "AIDenoiseISO_data.h"

static const std::string key = "tianlu2024";

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct AIDenoiseISONode final : Node
{
    BP_NODE_WITH_NAME(AIDenoiseISONode, "AI ISO Denoise", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Enhance")
    AIDenoiseISONode(BP* blueprint): Node(blueprint) { m_Name = "AI ISO Denoise"; m_HasCustomLayout = true; m_Skippable = true; m_BGRequired = true; }
    ~AIDenoiseISONode()
    {
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        auto url = GetURL();
        auto path = ImGuiHelper::path_url(url);
        std::string data_path = path + "AIDenoiseISO.data";
        // decrypt data file
        std::vector<uint8_t> data;
        ImGuiHelper::ImDecryptFile(data_path, key, data);
        if (data.empty()) return;
        // create realsr
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(AIDenoiseISO_param_bin, AIDenoiseISO_param_bin_size, data.data(), data.size(),
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 1;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "Denoise ISO:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5486;
    const unsigned int logo_data[5488/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf2003f00, 0x6213ed58, 0x76d08bfc, 0x47cd16a9, 0xadf2573b, 
    0x767fad38, 0x970a3a9d, 0xfe4a9fec, 0x61fed0d3, 0xb35066e6, 0xe52fee4f, 0xfd69164f, 0x50abfcc5, 0xc229fd59, 0x7b14bfcf, 0xd1cccca1, 0x57f88762, 
    0x150ba7f2, 0x55fee2fe, 0x94fe2ca4, 0xbd34b4f5, 0x0533bbd0, 0x5fe08f92, 0x932c9cca, 0x4a3f83fb, 0xed635bd5, 0x00ff164f, 0xf1a6ca4f, 0x993917ec, 
    0x8095806d, 0xdb02cd1d, 0xb5a5b5da, 0xeaf4ebfd, 0xd227fb68, 0x9949d0b5, 0x9cdadf82, 0x561cc72d, 0x53fab390, 0xa93d9fc5, 0x3773a17b, 0x90f161ec, 
    0x2c9cd60f, 0x7f8afb57, 0x6716d20a, 0x98b69eda, 0x7347f7a9, 0xfc01592c, 0x8553f90b, 0x7e707f92, 0xa7b6aa55, 0xfe2d9eda, 0x608f3795, 0x25f695b9, 
    0x54fee2fe, 0xb87f857d, 0xfd6b95bf, 0xd947e99b, 0x10af94be, 0xd9b064e6, 0xec78edfe, 0xd7a2543b, 0x82aef4db, 0x6984253d, 0x563be8c1, 0x3df484ef, 
    0x57557d1a, 0xecc86b5e, 0x359b9c4a, 0xc7b1fb5d, 0xbc6220de, 0x2054e2e9, 0x63b7f5e4, 0x4a4ac918, 0x69513837, 0xd59e164e, 0x1afc9af5, 0x58ad41f8, 
    0x28f1b721, 0xe63de7d1, 0xe466a0d4, 0xaeb10a70, 0xc01fe21b, 0xf6c1334d, 0xf14defa2, 0xc4aa9586, 0x79663f41, 0xc1082e55, 0x6da9aa20, 0x723bc6d9, 
    0x38347845, 0xa25e098b, 0x4f46efa5, 0x8e5f8ba3, 0x4a3df1ab, 0x8c2276b9, 0x571c4d1d, 0x6ff82769, 0xf6111ef8, 0x2c4ae941, 0x5de58ffd, 0x0f36f647, 
    0x3d953fdd, 0x549e8174, 0x3cee55fe, 0x3f9e7b44, 0x2d2c47b5, 0x6c3d8d3d, 0x5d13fec9, 0xfb23e95a, 0x53a9f287, 0x9ffb1949, 0xc4c443a5, 0x068e6c9f, 
    0x3ee7334b, 0x054a7f47, 0x5de9b7af, 0x4592d63d, 0x1b0798c4, 0xa0b96a8f, 0x6a12b6e8, 0x9baacbb6, 0x042eb084, 0xc8a06cad, 0x0776db17, 0x104b5be7, 
    0x58631ea3, 0x8e233bc9, 0x14e79f16, 0x5fed69f1, 0x25fcd857, 0x69af3df8, 0x5fd7ca87, 0x6d6cb847, 0x1d46ad7b, 0x0000ffeb, 0x6fb90627, 0x9acf7e1f, 
    0x5934871f, 0xc61f5d35, 0x12a366da, 0x9eb5f5ae, 0x1e655944, 0x1c62ed91, 0xbe02d3f3, 0xe111977e, 0xa454d42a, 0x6d3719a5, 0x3500ff62, 0x32d57a74, 
    0xea2044ec, 0xbe92562e, 0x8f965f92, 0x167b3ef0, 0x2d9cd283, 0x5de58f3d, 0x71b0d141, 0xf554feb4, 0xfe543dd2, 0x44bcee55, 0xb5379e7b, 0x3d2d2c47, 
    0x096d3d8d, 0x57f913fe, 0xfe48ba54, 0x55aafce1, 0x3ff747d2, 0x8989874a, 0x8f1cd93e, 0x4ff7cfd8, 0xcfd847e5, 0x5de54ff7, 0xff4af697, 0x54fe7000, 
    0xf7af647f, 0xf551e50f, 0x23db8ba8, 0xccf0baa4, 0x2e9832d6, 0x8f266820, 0x08869101, 0x9ce81235, 0xf172aff4, 0x88d7bddd, 0xff2bdb34, 0x8687ec00, 
    0xca33b812, 0x001c3f80, 0x8d1fc770, 0x76d6d670, 0xf6095796, 0x9033c2e2, 0xe3716342, 0x0d2bbede, 0x15b54a99, 0xb554bf37, 0x95d1c433, 0x49a14b3c, 
    0x356d74dd, 0x64befea3, 0x3bf8073e, 0xe4d278ac, 0xed6c1508, 0xcd3d9455, 0x916054ce, 0x311fa39d, 0xb57e9c03, 0xccfe5fd8, 0x98b7fd7a, 0x5dda52b6, 
    0xbcc1fc2a, 0x3dc685cd, 0x5df17c0f, 0x5ef187b6, 0xf98c36da, 0x330c22a8, 0x1706441a, 0xab1d873d, 0x1c7f34d1, 0x86da5a69, 0x07476686, 0x49bb4800, 
    0xe7c68faf, 0x9c2aad39, 0xdaa38df1, 0x3ff6fbd7, 0x5964c045, 0x953c7a5d, 0xf73e37aa, 0x3eaae1b7, 0x117cd73e, 0xfa6a78a8, 0xce4a4d4b, 0x38e3594b, 
    0x8c07c721, 0xc21f7af0, 0x3d96c6b3, 0x00ffe82b, 0x9b75aa8f, 0x59382a8d, 0x66225824, 0x96dd0960, 0x05dd1e38, 0x1b1e1c79, 0x4598b9b9, 0x21cbbb0d, 
    0x93a488e8, 0x9bbe62f8, 0x154b9a03, 0xbe6a8d86, 0x9e9f7beb, 0x9775d866, 0x6861aae3, 0xe8c528b7, 0xa75fddfb, 0x4dc371dc, 0x06a9dd1f, 0x5ebb3f9a, 
    0xcbf0618f, 0x2351bb58, 0xe710795a, 0x713be605, 0xa53f63f8, 0xc1a72d7a, 0x60ad0d1d, 0x17bb25f3, 0xccc77c04, 0x7cfba45d, 0x19312abd, 0xf10f1bd6, 
    0x9a9afe4a, 0xc39c3261, 0x164e771b, 0x719fbe4b, 0xe1a566f3, 0x5f66ada9, 0xc888063a, 0x18ee2a8b, 0x0832acdc, 0xc65483fa, 0xfa4acf8b, 0x9d16e227, 
    0x259df625, 0xe28c9eb5, 0xdb984fcf, 0xca20d224, 0x9d36f022, 0x711dc7d9, 0x10965a5e, 0x5d1bcd59, 0x19eeb19d, 0xd51ea903, 0xdecc84d7, 0x56339722, 
    0xc533b77d, 0xc487a7e1, 0x6f3e087b, 0xffeb353b, 0xf0500e00, 0x57ddc267, 0x5b827ac6, 0x8c214659, 0xe533d7f2, 0xc7f54162, 0x7d57d827, 0x6b30fb7b, 
    0x4b8ba9b6, 0x28c73b8b, 0x5efe6d09, 0xfe19b85b, 0x75b5d767, 0xa1f81f7e, 0x8e226465, 0x782b8e17, 0x440aabb0, 0xad3fca07, 0xf187367a, 0x15d74a07, 
    0xe5782455, 0x4ccc6300, 0xe6017d02, 0x9c1f57be, 0x73eab466, 0xbaa28553, 0x7900ff5a, 0x476ef9f7, 0xc9a35796, 0xfbdca888, 0x5a926fa7, 0xbec927fe, 
    0xab73f825, 0xc8ef4678, 0xb7642cd5, 0xfd83a162, 0x30fa20e4, 0x61acf0e3, 0xfa4a8fa5, 0x9fa4e39f, 0xd31bbeda, 0x667461ed, 0xb9aeccf3, 0x06aec239, 
    0x2bfd163f, 0xf3c393c2, 0x854420c9, 0x4001cf99, 0xb2f79a24, 0xcc78d6dc, 0xca5aab32, 0x367ce45f, 0x59868477, 0x841a968e, 0xefaca29c, 0x0e6dafea, 
    0xfb836940, 0x47d3f5b4, 0x6cd16bf7, 0x57eb1abe, 0xbcd88a9b, 0xcb78bf6a, 0x3cf063f2, 0x68df55fe, 0x740500ff, 0x67bb74a9, 0x6ee592bd, 0x8d61fddb, 
    0xdb91c1c6, 0xabf5f5e5, 0x7c1867c4, 0x7fa5bc3a, 0x99b04c4d, 0xdf1a3f66, 0xdd65a7b3, 0xff9f8fe8, 0xf787b300, 0x1fcefe68, 0x6dabafdd, 0x56f80ffe, 
    0xf495783b, 0x40d535df, 0x584e6967, 0xa4e6a9e3, 0x458500ff, 0x05fa3fe1, 0x3ffdfd2f, 0x0f7955fc, 0xcbdf308a, 0xcffcc32f, 0x99255ca0, 0xfe687eb5, 
    0x1a73e43f, 0x5aad8b9f, 0xf93429c2, 0x8f20ef2d, 0x16c84831, 0x53779240, 0xc18307cf, 0xb1154bac, 0x34e33ef1, 0x97a3ccd6, 0xf6602a24, 0x395fe5cf, 
    0x04d3b7c0, 0x984fec58, 0xaa0a6e14, 0x0fbe234f, 0x8f26a7f3, 0x742c31a9, 0xedbaa5e2, 0x9e4e134c, 0x6d94465b, 0xff7db61a, 0x047da600, 0xf9a45ea3, 
    0x59bb2e9c, 0x995f00ff, 0xdf699af4, 0xf3f9f40f, 0xf9a6bb2e, 0xe7c9fc80, 0x5c187e2b, 0xed3fbbe2, 0x8e4c1b3d, 0xb2b9a038, 0x21516e03, 0xb1230991, 
    0xc9d71c00, 0xcd85751a, 0x398b208c, 0x63cedb60, 0xa8f3070a, 0x232cd623, 0x956592bf, 0x0c38bf22, 0x7d0c20e9, 0xb53e6d37, 0x15b25c8d, 0xb79bb59e, 
    0x9df9f5a7, 0x115ae7b4, 0xb7a869f7, 0x3fb08fea, 0x3596a3b4, 0x64562661, 0x9721f4ca, 0x413cb2da, 0x6100ffaf, 0xe1eeb5d9, 0x94014211, 0xa947f920, 
    0x3ef4f235, 0x2f66d72f, 0xddaa9f1e, 0x553e1023, 0x6c8f27b8, 0xb9c28f93, 0x5f1300ff, 0xe536f76b, 0xf65a6d35, 0x10067778, 0xc8b0cbbd, 0xeff7f2e9, 
    0xa7264751, 0x2baab9ce, 0x75a6b676, 0xb54159a7, 0xeb639f1f, 0xedef5b7b, 0x48738c29, 0xac32dcf1, 0x72d88e8c, 0x792aa1a7, 0x74cdf600, 0x81c460f6, 
    0x630a795e, 0x46f86a18, 0xb8557f0d, 0x73c532b9, 0x1f12f774, 0xb423e09a, 0xb400ffa4, 0x35fe64c4, 0xf8aac9d0, 0x04d9d6e2, 0xaaa0fe7a, 0xb2732c7a, 
    0x31103f90, 0x8b265f55, 0x7ca9f6b2, 0x76560f83, 0xf35b8c72, 0x7cd7b23e, 0x4f12694f, 0xdcb0940d, 0x5cc06acd, 0x1fed30c6, 0xc8196e1c, 0xb4962bea, 
    0x2cf1b5b8, 0x6f4993ce, 0x518ac4c1, 0x00ff6853, 0x36d4f90a, 0x962033a5, 0x082feedd, 0x5731f3dc, 0x27760f79, 0x93eb3939, 0xa74eba4a, 0x793a1623, 
    0x30e17852, 0xb2d456c4, 0x65a334ca, 0xf4bfcf56, 0xbdc679ce, 0x6972f349, 0xd7eb5fdb, 0x8bf409fe, 0xd2023ee9, 0xb7de75df, 0x0c3247a7, 0xb1727eb4, 
    0x57be00ff, 0x0ddbba26, 0x7efac347, 0x37f66c9b, 0x54092676, 0x5037463c, 0x1dd731ce, 0xc957f873, 0x7397667a, 0x8c85a568, 0xa29c73b1, 0x249d7f80, 
    0x3a9cad9a, 0xac33499a, 0x2a5f845a, 0x832c9039, 0xac39edd8, 0xadb0e5ea, 0xdddfaea3, 0x5d677efd, 0xbc825529, 0xe8fda869, 0x7835f9fa, 0x649945a6, 
    0x539418f9, 0xb3e29ed8, 0xe9507db5, 0xab724ff6, 0xca902bcc, 0xbc1e9580, 0xf831cb57, 0xcaf357c7, 0x1197ea58, 0x2d1482cb, 0xb0e7c1c1, 0x62a51f27, 
    0xf1528ff8, 0x1eadf624, 0xb55faca5, 0x230683b4, 0xea5bdb74, 0xa9acc833, 0x57e7d064, 0x2ae8ada8, 0xdfa0acb3, 0x00fffc2d, 0x65557da4, 0xf96c7fae, 
    0x073b4b32, 0x89cc8fb9, 0x4c64b099, 0xeb8e72e3, 0xa3ae38ee, 0x4904534d, 0xcc2691fe, 0xf88a3c74, 0x50770d46, 0x9eca8f66, 0x512359e6, 0xda8d3912, 
    0x41d15144, 0x61472123, 0xb538bad2, 0xd85b1a7f, 0x9aebdba3, 0x2abf5184, 0x47caca91, 0xd68a63d4, 0x950d4dbe, 0x7846be54, 0x94f8b37a, 0xb2ad7d6e, 
    0xf3e7fbdf, 0xfeb76c34, 0x7ccdfcf9, 0x1beff649, 0x477ccc3f, 0x73f264a9, 0x8fc67f7e, 0xfed7f8b6, 0xff473d86, 0xf8cf0300, 0x14f627d7, 0xfbfae73f, 
    0x536faf8e, 0xeb3f7dfe, 0x7e5b6ce4, 0xa20f9fd1, 0xc3940789, 0x6acb070a, 0xcdeff4c0, 0x8600ff58, 0x4776f893, 0xb54f4e31, 0x7c8d7fbb, 0xca8cd7a8, 
    0xc06b24bf, 0x2e91a2e8, 0x02b28da4, 0x22df00ff, 0x175c40bf, 0xf3fc6a80, 0x97c000ff, 0x782200ff, 0x335eebbf, 0xcf7d486e, 0xffa9cffc, 0xfea2e100, 
    0x1614b21d, 0x6d3c1493, 0x3dc621fb, 0xfb6fd43a, 0x193ffc42, 0xefbea629, 0x3f23f3fa, 0x69dd7cad, 0xf7435cae, 0xe0fb3f56, 0x4df1d755, 0x3f650cf3, 
    0xffb20204, 0x49305400, 0x00ff29e9, 0xa9fd7fe0, 0x2d6eeb3f, 0x00ff887d, 0x4ff03fe0, 0x8600ff7c, 0x5249f08d, 0xfe93d225, 0xe6c731fc, 0x2bda6f28, 
    0xff1cfbe1, 0x7f166500, 0x7c4d6c53, 0xdcab79e1, 0x1f9f1fdc, 0x54fb5495, 0xe1bad2a7, 0xaf06f8c1, 0x0bfc3fcd, 0xd6bf00fe, 0xc35867ac, 0xff0100ff, 
    0x387d8200, 0x816fb4df, 0x4ca7d938, 0xbf81f6bc, 0x687f9ac6, 0x7e4a049f, 0xf746326d, 0xb5fe3130, 0x25da2ff3, 0xf98ba7f5, 0x2afda197, 0x1760089f, 
    0x05fe9fda, 0x7f0000ff, 0xfd3156eb, 0x27e07f88, 0xd1fe10d4, 0x55600f3f, 0xb098b35f, 0x565b6da0, 0x9ab37d05, 0x3f693fb0, 0xd17c6487, 0xbbb54f4e, 
    0xaf7c8d7f, 0x32bef32d, 0xdab9e791, 0x74216a32, 0x7fe1c0e8, 0x7f5891ef, 0x6b0978a9, 0x09fc3fcf, 0x15d7907f, 0x909c16e3, 0x9ff99ffb, 0x46c37f54, 
    0x2ac33a7c, 0xff544ada, 0x4fd90f00, 0xbf31ad3f, 0xbd874f68, 0x6f7f4e57, 0x35fe23f4, 0xb5a65df3, 0x56f90171, 0x5f05c53f, 0xd8bd293e, 0x883ed800, 
    0x43f52f2b, 0x9f929e04, 0x00ff07fe, 0x6dfd8bda, 0x0fb1afc5, 0x09fe07fc, 0xd1f0bfef, 0x49e40abe, 0xffc326a5, 0xfeef4e00, 0x8af68714, 0xbb5101f0, 
    0x60c02e4a, 0x0512a37f, 0xad7be77c, 0xf8705c5d, 0x3751853f, 0xbada9372, 0x06f8c161, 0xfc3fcdaf, 0xbf00fe0b, 0xde63acd6, 0xeff67f31, 0xc3e913fc, 
    0x0c7846fb, 0xcaa6c92f, 0x06568ea7, 0xdf9ad61f, 0x25824fb4, 0x5dc9b4e1, 0x31d04247, 0x2ff3b5fe, 0xa7f524da, 0x38aaf4ad, 0xe05ba53f, 0x53fb02fc, 
    0xbfc000ff, 0xd5fa07e0, 0x1f627f8c, 0x93f409f8, 0x03f0787c, 0x24462731, 0xa736499e, 0xe13f69fc, 0xff3f7c7b, 0xfe2fa000, 0xaff19f4a, 0xeeb43f9c, 
    0xd3fe683d, 0xfea5f5b8, 0x9ebfe0a9, 0xfc17f87f, 0xf8ac7f01, 0x0ff7f9bf, 0xa3aa04fc, 0xa4a05fe4, 0xbe902623, 0xab297d14, 0xfb5a4f26, 0x63656b3f, 
    0xcbbd35e3, 0xe3144828, 0x3acd1d21, 0x0b7bd6e6, 0x27e68287, 0x68386482, 0x678a60dc, 0x4ecfd55e, 0x55b13abd, 0xbd38c929, 0xbca65a53, 0x8c7aba89, 
    0x14bf5b62, 0x818d74da, 0xab3d1951, 0xb02d35aa, 0xe3d2c76a, 0x6a0ea3da, 0xeedcd440, 0x5a56e80e, 0xa5d38c8c, 0x10557e7c, 0x3eb59e93, 0xab21dad6, 
    0x92114bbd, 0x47c83c05, 0x54235173, 0xb9acc899, 0xdcd306d3, 0xfc6e316b, 0x9c533a53, 0xfd4554e0, 0xb6d468ab, 0xf461dfc2, 0x51e9c8b8, 0xb6223587, 
    0xe1523745, 0xb56f17aa, 0xdda87d1b, 0x609eea46, 0xe9f391e6, 0x8c58a8fd, 0x3f36c27f, 0x00ff3bf0, 0xfcb6d7b5, 0x6dbcd221, 0x7d2142f1, 0xc393852f, 
    0x24463bba, 0xba51f38e, 0x70076760, 0xf2085a1e, 0xe0d4cb47, 0x9a338260, 0x6300ffe6, 0xcfbad9bf, 0xc783b45a, 0x17b4297e, 0x4a271750, 0xa35ce7d3, 
    0xba3338ed, 0x0a23a39e, 0xcf131c0f, 0x12bfee15, 0x87ef6a3f, 0xe60c00ff, 0x0f6a9336, 0x2309eaad, 0x909e2545, 0xae885616, 0x0a961c32, 0xce999e31, 
    0x7f8d1d41, 0x27fe6610, 0x2caf1b71, 0x7a3e5306, 0x06c9778b, 0x6fc39797, 0xf4b9f456, 0xc38a435c, 0x47596e7d, 0xadbd600e, 0xbc52fc68, 0xf1ed8b9a, 
    0x93abeb5a, 0x67353d49, 0x18be6ba8, 0x0647bcd3, 0x7775cbcb, 0x064a420a, 0x833a321d, 0xd57c45fe, 0xc5cf9af1, 0xd7440adf, 0x8f199ef6, 0x451e3ec4, 
    0x17fc0d69, 0x558537c2, 0x32321f4b, 0x1c038e84, 0xc48e23a9, 0xe2c7bde2, 0x0c5fc69f, 0x7ed1217c, 0xa4dfaedb, 0x23c53277, 0xcc2958da, 0x4eaa2cd7, 
    0x021c00d5, 0x281c3770, 0xaf79322c, 0xbf8c5fce, 0xf14b7c1d, 0x4efb59ab, 0xf4d937af, 0x4d9b5cd8, 0x4c3e062a, 0xed3fa003, 0xe7b93a3e, 0xaf3830ae, 
    0xe70ce08c, 0xc9f5f289, 0x86e3ae83, 0xbacc25ed, 0xaeed09fc, 0x76efb2f6, 0xd987cf7c, 0xd5986506, 0xfee1d5f6, 0x9b9fbfca, 0xa759f05f, 0x95dfdda3, 
    0xdbec6c76, 0xff66a6f6, 0x7f649900, 0x00ff7fe0, 0x00ffa66b, 0xfd3751c3, 0x00ff430b, 0x5dfbbf03, 0xfb154d78, 0x9dddfabf, 0xffcf00ff, 0x1f96fc00, 
    0x11fd89fc, 0xeb64abfe, 0xe47f5cfe, 0xe400ffd2, 0x00ff768f, 0xfa6fa286, 0x07fe8716, 0x51baf67f, 0xff3052fb, 0x7f689900, 0x00ff77e0, 0xa208af6b, 
    0x9ddffa9f, 0xffcf00ff, 0x1f96fc00, 0xaa7f88fc, 0xf8fc3fd9, 0xa5c900ff, 0x1ec900ff, 0x1eb5dff0, 0x7f96f9ef, 0x00ff7ff2, 0xed4753b5, 0x00ff8341, 
    0x4ffed722, 0xaaf600ff, 0x7f299af0, 0xfcdfd9ad, 0x00ff00ff, 0x00ff61c9, 0xadfa87c8, 0x9fcf7f94, 0xfc5f9afc, 0xfb4bef91, 0x00ff6d53, 0x00ff6399, 
    0xaafd1f2a, 0x0d00ff9f, 0x5200ff57, 0x3f54febf, 0x157855fb, 0xdcd6bf14, 0xff7ffeeb, 0xffb0e400, 0x7c49e400, 0xf9bf932b, 0x9300ff71, 0x9200ff4b, 
    0x00ffe93d, 0x3cdd726a, 0xffad8f31, 0x6a00ff00, 0xe100ffa8, 0x85fe9ba8, 0x8100ffa1, 0xbcaefddf, 0xaed34d47, 0xd6467d75, 0x9e26cec2, 0x8254eaee, 
    0xbbab9318, 0xdca3aa10, 0x177b0592, 0x67f00ded, 0xa66ff84b, 0xf0544b78, 0x4bf7c2fc, 0xb736b5bd, 0xcec85157, 0x71445e92, 0x067a8223, 0xf27100e7, 
    0xc4a5ee1a, 0x855a417c, 0xfb2b444c, 0xd8fdb5b0, 0x5ffe7675, 0x57e6b1bf, 0x0b7f38ca, 0xa982a38a, 0x7eabdf4b, 0xd1567a5f, 0xa5cd575f, 0x3e7bb7f5, 
    0x6af8cfc5, 0xa100ff26, 0x77e07f68, 0xa56b00ff, 0x0f23b51f, 0xfe8796f9, 0xbaf67f07, 0x6a0ebff1, 0xa63e5a96, 0x8d861a97, 0xe3daae6b, 0xcb5dda6b, 
    0x46466a34, 0x189d6848, 0x24030136, 0xbd06798e, 0x97ade33b, 0x653b3c85, 0x0f6f5be1, 0x49d342f8, 0x6cd0589b, 0xcdee89f5, 0x44d2d4e5, 0xe39864f3, 
    0xa05d290f, 0x49ca322e, 0x9d666ccf, 0xeace253e, 0xad7f9d51, 0x396dcb25, 0xdedaf555, 0xaf10bfe5, 0x71f4e492, 0x09afb054, 0x692fed27, 0xabad6829, 
    0x9e9ee6bd, 0x00ff9a49, 0xffadd4f0, 0xffc84200, 0x00ffc000, 0xfc47d7fe, 0xd07f2b35, 0x3ff03fb2, 0xd7b500ff, 0x3f5cd183, 0xff7776eb, 0x00ff3f00, 
    0xf27f58f2, 0xabfea927, 0xf300ff64, 0x2600ffe3, 0x2400ff97, 0x56fbd77d, 0xe09b497c, 0x0eefc2f7, 0x52c32ff8, 0xa1c68535, 0xe8fc2d6a, 0x481b1a4e, 
    0x23855491, 0xcf4072a1, 0xd7fc6ea0, 0x3fee95c2, 0x648cb7b4, 0xfca48bf8, 0x9b2ff137, 0xa27347e6, 0x7450791b, 0x2ba4a84b, 0x4a6ec738, 0x7845709f, 
    0xc3557e75, 0xc08335d8, 0xb7ef25a5, 0xbbd52727, 0x736cf8b5, 0xb25a9670, 0x6b46b1dc, 0x9c94b2f7, 0x662e57df, 0x632dfd9d, 0x2b1ec557, 0xad6bfcd5, 
    0x9a6bab4f, 0xa39efa84, 0x3bcf3736, 0x0074e064, 0x03760074, 0x14555600, 0x31c6d157, 0xac625484, 0x8430f691, 0x0a42c569, 0xc8966cc9, 0xa28aa228, 
    0xa0288ac2, 0xa0288a02, 0x4b2a8a02, 0x987b9668, 0xdd9279a3, 0xd2b4c21d, 0x27182b86, 0x38413b96, 0xfa04781d, 0x4dd44203, 0xcff45cd9, 0xc41dba82, 
    0xaef8ae29, 0xeeed6c29, 0x6f73ab34, 0xecfdb5a6, 0xd3d78836, 0xcc43a802, 0x3c8db9e8, 0xe59c31c9, 0x8ff58a17, 0xbf12de87, 0xf3ecaff1, 0xdf01cfe2, 
    0x6adea5cf, 0x639d5b9a, 0x5e1d4b47, 0xc9f8f5d6, 0xae0c0b75, 0xc9706754, 0xf27a6600, 0xf01f899f, 0x1378588b, 0x853fdac3, 0xab695dbc, 0x7dba6bc7, 
    0xee2cdd46, 0xbbb9e56d, 0xf37b7f72, 0x139115c4, 0x3098bb08, 0xc67c60cb, 0xf836fb9d, 0x5fc0cbca, 0x8df5ad12, 0x45835e4f, 0x8a2792d2, 0x9ee139f2, 
    0xc044b55f, 0x91581883, 0xdfda41b2, 0x3aca0736, 0xc1aeaff4, 0xc485a3d5, 0x77d4c253, 0x6a324e8b, 0xd6f7e551, 0x759ab6af, 0xdffc28fb, 0xb3e2c334, 
    0xc26c1d0c, 0x92716a82, 0xcfe92294, 0xdd4ff79f, 0xeffd6849, 0x26bdec7b, 0xd795a7d7, 0xbfd07eac, 0xff1c7eeb, 0xa595d800, 0x550fe87f, 0x8fe17dbc, 
    0xfef8df01, 0x780d5fe2, 0xf0b74ddf, 0x38afece5, 0xea8545fb, 0x13249835, 0xee80c51e, 0xecb89d1c, 0x27783bb8, 0xefade34b, 0x65453c85, 0x039d6be1, 
    0xb47af6c5, 0x67853eda, 0x6c68cda3, 0x5792a1ae, 0x85c82087, 0xeeb40be2, 0x188119ce, 0x95f39aef, 0xc487630f, 0x552fce41, 0xd93a4a6b, 0xda53d7f4, 
    0xb1623196, 0xa7b12ab8, 0xef959a34, 0xe9966b4e, 0xd9f24959, 0xfcabe93b, 0x8aa21e0f, 0xbc3ec22b, 0x6fa469d8, 0xd845a407, 0xcaec97c4, 0x4caafc84, 
    0xc40e2463, 0x07fd5ced, 0xb7d663a5, 0xf69fcafc, 0xb400fffb, 0x3da226eb, 0xa2508f48, 0x0acb2a8a, 0x0a80a228, 0x0a80a228, 0x0a80a228, 0x0a80a228, 
    0x0a80a228, 0x0a80a228, 0x3f80a228, 0x0000d9ff, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(AIDenoiseISONode, "AI ISO Denoise", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Enhance")
