#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "OverExposure_data.h"

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct AIOverExposureNode final : Node
{
    BP_NODE_WITH_NAME(AIOverExposureNode, "AI Over Exposure Correction", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Enhance")
    AIOverExposureNode(BP* blueprint): Node(blueprint) { m_Name = "AI Over Exposure Correction"; m_HasCustomLayout = true; m_Skippable = true; m_BGRequired = true; }
    ~AIOverExposureNode()
    {
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(OverExposureCorrection_param_bin, OverExposureCorrection_param_bin_size, OverExposureCorrection_bin, OverExposureCorrection_bin_size,
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 1;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "Over Exposure Correction:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 6570;
    const unsigned int logo_data[6572/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf9003f00, 0xda653b7e, 0xd2d3513e, 0x7fc016a4, 0xfcaafc08, 
    0xf422df56, 0xb24f2ae8, 0xe9fa2bfd, 0x2dfc5845, 0xbac533d5, 0x7e7400ff, 0xa76ee154, 0x5ae547f8, 0x2d9cd602, 0xa85c953e, 0x2da05087, 0xe547f747, 
    0xfba3164f, 0xc2abf2a3, 0x5b4fe9d3, 0x9145eb53, 0x16cfd01e, 0xca8fecdf, 0xf7872d9c, 0x2b5ae547, 0x5b3c456e, 0xda27b2d3, 0xc336961b, 0x0ffc56ec, 
    0xaafc6bf5, 0x951eb6d0, 0xcdb54f73, 0xf54fbf8d, 0xd7aafc6b, 0xeb953ed9, 0x3c1f592b, 0x16cbacde, 0x547ed0c3, 0xe0386cf1, 0xfab39056, 0x3d9fc553, 
    0xb9a2fba9, 0x6c35f69b, 0x53f80364, 0x00ff8a85, 0x5ae14f71, 0x53fbcc42, 0x3e15d3d6, 0x16cb5ce8, 0xfe027f40, 0x9f64e154, 0x6a951fdc, 0xa7f6a9ad, 
    0x4da57f8b, 0x652ed8e3, 0xb87f897d, 0x611f95bf, 0xe52fee5f, 0x6600ff5a, 0x6ff651fa, 0x39c42ba5, 0x5a11e799, 0xec78edfe, 0xd782543b, 0xe8adf4db, 
    0x78b1a3f4, 0xe86a073d, 0x68a2213c, 0xbaca6a93, 0x6245defb, 0x95ace554, 0x1fc7ee37, 0xf18a817c, 0x3c425165, 0x2aeaa1cf, 0xe05cbba9, 0x5a38adc5, 
    0xf5957efb, 0xbe051fdc, 0x11b66b0d, 0xfd553c98, 0xb31e338b, 0x733350ea, 0xe21aabd8, 0xcf7e27be, 0xb4823f3a, 0xbcd2bef5, 0x116ba373, 0x1ed94f36, 
    0x80e88e65, 0xaca882a4, 0x33c681db, 0x8f5724c7, 0x55c33a47, 0xd17ba9a8, 0xf917ef93, 0x859ef8ed, 0x506a2d5c, 0x76693475, 0xf0dff26b, 0xbe167b3e, 
    0x7d2d9cc6, 0x2f5de58f, 0x0f3d47f6, 0x932e52e5, 0xabfcc9fe, 0xee91f6d9, 0x8e102f79, 0x439f5a60, 0xa1c553f9, 0xa5aee9fe, 0xc3fda174, 0xa5a954f9, 
    0xd2dffd0c, 0x218ad5a5, 0x9d3e51e2, 0x6fc37e66, 0x2c00ff91, 0x5bb5b7d7, 0xa5dfbe16, 0x24e9596e, 0x71f0db59, 0x6a6fafe5, 0x5b74d0d7, 0x655b3509, 
    0x58c24dd5, 0xb6560217, 0xed0b6450, 0xaef303bb, 0x631462b9, 0xe9dc79cc, 0xb4701cbb, 0xa73800ff, 0xfa6a4f8b, 0x2fe1c7be, 0x4c7bedc1, 0xfaba563e, 
    0x6b63c33d, 0xef306add, 0x3801f85f, 0xfb78cb35, 0xfcd07cf6, 0xaac9a239, 0xd336fee8, 0x77951835, 0x22f2acad, 0x8ff428cb, 0x9ee7106b, 0xf4f31598, 
    0x56098fb8, 0x2825a5a2, 0x176bbbc9, 0xd5a3abf9, 0x216297a9, 0xb4725107, 0xfc92f495, 0xf3817fb4, 0x941eb4d8, 0x7fec69e1, 0x8d0eea2a, 0xf2a78d83, 
    0xea91aea7, 0x75aff2a7, 0xf1dc23e2, 0x6139aabd, 0xeb69ec69, 0x9ff04f68, 0xd2a5baca, 0xe50ff747, 0x3f92ae52, 0x3c54fab9, 0xc8f6494c, 0x7fc67ee4, 
    0x3e2a7fba, 0x7fba7fc6, 0xb2bfec2a, 0xf287fb57, 0x7f25fba3, 0x8f2a7fb8, 0xd95e44ad, 0x86cf951c, 0xad95b027, 0x276860ee, 0xdc78e58f, 0xd7a8a960, 
    0x57e03942, 0xcef678bc, 0x751ac4f3, 0x8cfda386, 0xa95440f0, 0xb90295b9, 0x311c00c7, 0x822be2c7, 0x3a1d1b8e, 0x58dc3ee5, 0x8f087246, 0xfe7bba1b, 
    0x7cb8f215, 0x52d2aa64, 0x746af97b, 0x89e18457, 0xba6a2974, 0x3e415b3b, 0xd6127c1f, 0x1676753c, 0xd1c62e1f, 0xdddc4359, 0x8c045765, 0x88f918ec, 
    0x79fd3807, 0xf6f7d2ae, 0x2614f14f, 0xce96b254, 0xac2c57e9, 0xf1cbf265, 0x3cdf03d0, 0xac6b1d7e, 0x5b347ed0, 0xe76d2c47, 0x370e2146, 0x70211c45, 
    0xed38ecb9, 0x7ca1a35e, 0xedb5d146, 0xc7c305af, 0x95052028, 0xa5e7ee76, 0x333b8e7c, 0xe7d4e8cc, 0xa58f1284, 0xd08ffdfe, 0x5d365930, 0x6a2d975e, 
    0xedbd9f8f, 0x697c6af8, 0x6a002fe2, 0x65d4147e, 0xa42cd5b2, 0xe08cb8b4, 0x331e1c87, 0x1e0f0ec3, 0x9106b386, 0x7e505fed, 0xaed718d1, 0xe3816474, 
    0xdd856091, 0xe67627c0, 0x8b6e0f6c, 0xdb8ed7fa, 0xeee65af8, 0x761b8665, 0x10d15396, 0x05e04f12, 0x1d07267d, 0x351e4e3c, 0xe7de68aa, 0x35add9e7, 
    0xc3d4c680, 0x2fca7c52, 0x2f4fdf47, 0x9306e1b8, 0x932e52ed, 0x52afe18f, 0xab5ff8b0, 0xac9520dc, 0xc34188fc, 0xdf6ec73c, 0x57faeba8, 0x107c5ba7, 
    0x5bdacbf0, 0x5b50936f, 0x99bc51a6, 0x7a6e6913, 0x712a9d7c, 0x3d0cad19, 0x4d7fa5b9, 0xd965c24a, 0x9cee3686, 0x3e7d972c, 0xc313c7e3, 0xd9585a53, 
    0x8c68a009, 0xbbcaf196, 0x282b3786, 0x34a88f20, 0xd2f3a2d1, 0x9ef182be, 0x0cbaf79a, 0x2b3ab676, 0xc29c96ad, 0x069125d9, 0x6d601051, 0x8e23893b, 
    0x4b34afb8, 0x8de62c08, 0xf7d8ceae, 0x8fd4810c, 0x9bb9306a, 0x6ae653c4, 0x26e7b6cf, 0x3e3c0d2f, 0xf341d823, 0x5fafd979, 0x838772f8, 0xbeea163e, 
    0xda12d433, 0x670c31ca, 0x2b9fb996, 0x39ae0f12, 0xebbbc23e, 0x5d83d9df, 0x5c5a4cb5, 0x4039de59, 0xf2f26f4b, 0xf3cfc0dd, 0xababbd3e, 0xc500fff0, 
    0x14212b0b, 0x5b71bc70, 0x525885c5, 0xfd513e20, 0x3fb4d16b, 0xb8563a88, 0xc723a9aa, 0x621e0328, 0x0fe81360, 0xfc98f235, 0x53a735e3, 0x152d9c9a, 
    0xcffbd7d2, 0x3c72cbbf, 0x4c1ebdb2, 0xdde74645, 0xd7927c3b, 0xf14d3ef1, 0x5b9dc32f, 0x467e37c2, 0xbb2563a9, 0xef1f0c15, 0x87d10721, 0x0d63851f, 
    0xd4577a2c, 0x241d00ff, 0xdef0d5fe, 0xa30b6b9f, 0x75659e37, 0x7015cec9, 0xe9b7f831, 0x1f9e145e, 0x2402499e, 0x0a78ce2c, 0xbdd72401, 0xc6b3e696, 
    0xd65a9561, 0x2300ff52, 0x24bcb3e1, 0xb074cc32, 0x15e524d4, 0x7b557f67, 0x4c037268, 0xaea7dd1f, 0x5ebb3f9a, 0xd7f0658b, 0x56dcbc5a, 0xfb55e3c5, 
    0x1f935fc6, 0xaef2e781, 0x2bf847fb, 0xdba54ba5, 0x2b97ec3d, 0x0cebdf76, 0x8e0c366e, 0xadaf2fdf, 0xc338235e, 0x2be5d5e1, 0x84656afa, 0xd6f831cb, 
    0x2e3b9dfd, 0xff7c44ef, 0x3f9cfd00, 0x70f647bb, 0x5b7dedfe, 0xc27ff06f, 0xafc4dbb1, 0xaaaef9a6, 0x724a3b03, 0x354f1dc7, 0x2f2afc27, 0xd000ff09, 
    0xe9ef7f29, 0xabe200ff, 0x86517cc8, 0x1f7e59fe, 0xe1027de6, 0xf3abcd2c, 0x00fff147, 0x5f35c423, 0x3a9dd91b, 0x6dd97439, 0xcce22daf, 0x9085ba32, 
    0xe0d4bd24, 0x1a3c78f0, 0x4f172de6, 0x3ce366f1, 0x799faef6, 0x048f55c9, 0x4a4fcff4, 0xdb3b4ef9, 0xdab170b9, 0xe6179837, 0x9f275555, 0x48e71f5c, 
    0x6483bab6, 0x3d9789fd, 0x9d269870, 0x6d944a35, 0xfbdc6b19, 0x39a980a7, 0xfac83ff3, 0xe1233dde, 0x653e9dbe, 0x26960ef1, 0x32337a1f, 0xcd85e1bf, 
    0xbada3f77, 0x501c8f1e, 0x01d8dcdb, 0x046974b7, 0x881d4988, 0xf89ae700, 0x16374f7b, 0xd3b60211, 0xc69cb743, 0xa1ce1f00, 0xc5da124f, 0xc2a4f37a, 
    0x48c3d32b, 0xe9cd0092, 0xa9b3a69d, 0x3a7e750a, 0x54c7fdad, 0xbd62d570, 0xd87da4c8, 0x2492a435, 0x9d949865, 0x86208332, 0xacf6d84e, 0x9d78116f, 
    0xbf361bb4, 0x841216f3, 0x7c104a2b, 0x5f91d4a3, 0x42fcdb1a, 0x8e9603f1, 0x46bc57c3, 0x70ab8d2b, 0x96edcb4f, 0x132bfc38, 0xf1213ec4, 0x3d26e405, 
    0xb8be5853, 0x0c61708b, 0x91cb0e97, 0xd6cfe5d3, 0x9446a7b2, 0x0c2daf64, 0xe2ac82e7, 0xdba79ede, 0xa1b65f30, 0x49ddd074, 0xab4e172c, 0xdb21c72b, 
    0x58e55621, 0x3902e4a9, 0x59d51519, 0xaf308216, 0x8c472b73, 0xb5f3ab61, 0xcfab553c, 0xe5a5d374, 0x1f3297dc, 0xb4abe09e, 0x62da7fac, 0xdd1a7f32, 
    0xb5f12e3e, 0xf8b10ab4, 0x3d455283, 0x03c34e02, 0x56511cf1, 0x35a7278c, 0x9c83a58b, 0xe8e74e35, 0xed89cfdd, 0x1b92d222, 0x96baa119, 0xc65c10d5, 
    0xca1fed30, 0x2367b831, 0x4b0baca8, 0xcc125f8b, 0xfc9634e9, 0x15a5481c, 0xaff08f36, 0x2e3fbc99, 0x69a275a5, 0xe21e4866, 0x77a3edf1, 0xcabbb699, 
    0x39b18c76, 0x9a5ccfc9, 0x53275dd0, 0x3c1d8b91, 0x98703ca9, 0x96a22b62, 0x6e9c465b, 0x00ffd9aa, 0x55cf675e, 0x6fd57985, 0xffda4e97, 0xfebb5e00, 
    0xa42fd227, 0x7d4b0bf8, 0x9dde7ad7, 0xd132c81c, 0xfec7caf9, 0xeb9a5cf9, 0x0f1f356c, 0xb36dfae9, 0x98d8ddd8, 0x18f15025, 0xc73843dd, 0xe1cf755c, 
    0x9ae9255f, 0x96a2cd5d, 0xcec53216, 0xfe018a72, 0xb66a9274, 0x2469ea70, 0x116ab1ce, 0x40e6a87c, 0xb4630fb2, 0x96abb3e6, 0xbb8eb6c2, 0xf9f5777f, 
    0x56a5549d, 0xa3a6f10a, 0xe4eba3f7, 0x1699e2d5, 0x62e49365, 0x7b624f51, 0xf5d5ce8a, 0x3dd9a743, 0xae30afca, 0x54022a43, 0x2c5ff17a, 0x5f1de3c7, 
    0xaa6329cf, 0x082e475c, 0x0707b750, 0x7e9cc09e, 0x3de28b95, 0xda93c44b, 0xb1967ab4, 0x0cd2d67e, 0x6dd38d18, 0x22cfa86f, 0x4393a5b2, 0xb7a25e9d, 
    0xb2ceaaa0, 0xf3b77c83, 0x55f591fe, 0xb3fdb996, 0xec2cc9e4, 0x323fe61e, 0x91c16626, 0x3bca8d33, 0xbae2b8af, 0x114c358d, 0x9b44fa27, 0x2bf2d031, 
    0xdd3518e1, 0x2a3f9a41, 0x8d64997b, 0x37e64844, 0x45471169, 0x1d858c04, 0xe2e84a87, 0x6f69fcd5, 0xae6f8f62, 0xfc46116a, 0x292b47aa, 0x2b8e511f, 
    0x3634f95a, 0x19f95255, 0xe2cfeae1, 0xb6f6b951, 0x9fef7fcb, 0xdfb2d1cc, 0x35f3e7fb, 0xbcdb27f1, 0x3100ff6c, 0x93a51ef1, 0xfff9cdc9, 0xdb3e1a00, 
    0x18fa5fe3, 0x0ffc1ff5, 0x9f5ce33f, 0x00ff50d8, 0x3aeeeb9f, 0xf94fbdbd, 0xaf00fff4, 0xff76e391, 0x177c1a00, 0x03622e1a, 0x76db7d00, 0xace6f107, 
    0xf0c200ff, 0xc31c39f0, 0xb7d03e21, 0x3d81d7f8, 0x8e1830db, 0x1464c731, 0xd9e87689, 0xc8f79fda, 0xd67059af, 0x4b6aad15, 0x8000ffef, 0xae3b4f7a, 
    0xf763b99d, 0xd83dc17f, 0x41f06bfc, 0x8ac98242, 0x9cfd361e, 0x449d1fe3, 0x7c1900ff, 0x4d53321a, 0x90da7bcb, 0x3d5eeb0f, 0x16cdac6d, 0x00ff9130, 
    0x37ae02df, 0xe0c8ee88, 0x8f82e027, 0xbe0a77f5, 0x00ffbed4, 0xe67902f8, 0xf763f923, 0x3b3dc17f, 0x855f17fe, 0x49934899, 0x39fdfe83, 0x4f29e6c7, 
    0x1f088fc6, 0x37ab84f9, 0xc86b90af, 0x896bf52e, 0x7e06dc88, 0x72ed5795, 0x5ce84a9f, 0x69fe833b, 0xf000ff7d, 0x8877de0c, 0xc7fda85b, 0x9fc6b7b5, 
    0x4bb3f109, 0x62f8e765, 0x1fa6f16f, 0x9417de8c, 0x3e51dafc, 0xfac7c484, 0xa67d8cd7, 0xc229f25f, 0xfce965fe, 0xdcd5bfaa, 0xef4bf31f, 0x65e29d05, 
    0x7ddc8fb2, 0xda6fe1b9, 0x9ffde117, 0x5ea8b487, 0xdad1c4dc, 0x6aabacc4, 0x711452d9, 0xfdc0d69c, 0x911dfea4, 0x3e3945f3, 0x35feedd6, 0x7c9f6ef2, 
    0xfcd9a5ef, 0x4cc9e791, 0x053da39d, 0x189d2e4a, 0xf2fd2f1c, 0x0687de2b, 0x27152760, 0xe000ff39, 0x9a8ffc4b, 0x23631597, 0x7d481e27, 0xaacffccf, 
    0x3ea3e13f, 0x6d95611d, 0x877f2a25, 0xd69fa7ec, 0x27b4df98, 0xa7abdec3, 0x11fab73f, 0xf91a00ff, 0xb85ad3ae, 0x1fabfc80, 0x9faf82e2, 0x00ecde14, 
    0x15441f6c, 0x0986ea3f, 0xfc3f253d, 0xb500ff0f, 0x5b00ff33, 0x43ec6b71, 0xff0100ff, 0xef7b8200, 0x826f34fc, 0x496912b9, 0xd300ffb0, 0x8500ffbb, 
    0xbca2fd21, 0xd26e5400, 0x1f18b08b, 0x5f81c4e8, 0x57ebde39, 0x0f3e1c57, 0xdc4d54e1, 0x98aef6a4, 0xab017e70, 0x00ff4ff3, 0x8000ff02, 0x18abf52f, 
    0xfd5f8cf7, 0x0400ffbb, 0xd1fe70fa, 0xf20b039e, 0xe3a9b269, 0xf5878195, 0x13edb7a6, 0x6d7889e0, 0xd0515732, 0xad7f0cb4, 0x89f6cb7c, 0x7deb693d, 
    0xe90f8e2a, 0x003ff856, 0x00ffd4be, 0x01f82ff0, 0x1f63b5fe, 0x02fe87d8, 0x1edf247d, 0x49cc003c, 0x922789d1, 0x00ffa94d, 0x5ef84f1a, 0x00ff0fdf, 
    0x00ff0be8, 0x6bfca792, 0x3bed0fe7, 0xb43f5a8f, 0x7f693dee, 0xe72f78aa, 0xff05fe9f, 0xeb5f0000, 0x7dfe2f3e, 0x0100ffc3, 0x01609c3c, 0x50336ac7, 
    0x9a03b8b4, 0xad279745, 0x43d7fe79, 0x98cbdda5, 0xc7718eb8, 0x98f34fe9, 0x637fd17a, 0xcb5ea377, 0x256f7b67, 0x0f47ccad, 0x8755aa14, 0x99f950e1, 
    0xbc4259e9, 0x0e4e456a, 0xa2d1ece9, 0x8e2b19a9, 0x783d6677, 0xc734eea6, 0x4fed557c, 0x8b74d541, 0xcbab5b4b, 0xbab5e009, 0x7686248d, 0xb0badd5f, 
    0x1987e1ca, 0xbc8e1320, 0x4e174b55, 0xcd09a39c, 0x7a932d27, 0x3ce74ebf, 0x7bf5cca5, 0x68de54ec, 0x112a7ddc, 0x6a203521, 0xe3bedadb, 0xe8b1a3bc, 
    0x99ce60da, 0x8ae97f66, 0x9153217f, 0x4e135d9a, 0xe3d0bdbb, 0x9a07de9e, 0x3223782b, 0x05ec0cb2, 0x35f22778, 0xb59e9318, 0x7431f4f6, 0x49389da6, 
    0x93261b37, 0xeca44d57, 0xf5345dfb, 0x263ed3e8, 0xf3937377, 0x1448462c, 0xcd1d21f3, 0x67528d44, 0x4ce7b522, 0x1af7b4cd, 0x14bf5bcc, 0x38e794ce, 
    0x6a7f1115, 0xb02d35da, 0x2e7dd8b7, 0x61543a32, 0x91ad48cd, 0x6ab8d44d, 0x46eddb85, 0x51376adf, 0x3998a7ba, 0x7ea67ca4, 0x01fd3734, 0xff04fec7, 
    0xed15f600, 0x197e08df, 0x84e2d7f8, 0x84367d6b, 0xdad11d9e, 0x7a772431, 0xe00cac8c, 0x40cb03ee, 0xeae52399, 0x19413070, 0x1dfb4bcd, 0x7ad6cdfe, 
    0x3b1ea4d5, 0xbaa04df1, 0x563ab980, 0x1fe53a9f, 0xd49dc169, 0x501819f5, 0x789ee078, 0x91f875af, 0x3f7c57fb, 0xb43167f8, 0x6f7d509b, 0x291a4950, 
    0xb280f42c, 0x907145b4, 0x8c51b0e4, 0x0872cef4, 0x43f86bec, 0xe9fce336, 0x290396d7, 0xef16f57c, 0x2d2f2d96, 0x97deeaad, 0x221efbd0, 0xe7da3fce, 
    0x11e67094, 0x8a1fadd5, 0x7d51f35e, 0x57d7b5b7, 0x6a7a9226, 0x6ff146cf, 0x1a6f7481, 0x4bb518da, 0xac409634, 0xc428dcb1, 0x2a6364b1, 0x460eaedf, 
    0x4bbee240, 0xe7f0cff8, 0x8c0abfc5, 0x3a7af6f7, 0xa8c38378, 0x82be21af, 0xaa9024e4, 0xc6e663a9, 0x1e002357, 0x62c79154, 0x7c4d5f71, 0xe1cbf853, 
    0x2f3a848f, 0xf4db75db, 0xa458e68e, 0x39054b7b, 0x4995e59a, 0x8003a0da, 0x85e3064e, 0x354f8605, 0xa3851ff2, 0xa7ed87f1, 0x35af01f1, 0x8387c5c9, 
    0xa5887b74, 0x988d4f93, 0xccb81042, 0x4a0b464a, 0x87ccefd1, 0x0a04a0a7, 0xce0f8ef8, 0x8ca6cc73, 0x26bf42ab, 0x2bf33b12, 0x3d71fbaf, 0x5f59fb9d, 
    0x78e1b37b, 0xd1980f23, 0x397e3ca5, 0xb560e0a8, 0x2dbdbe73, 0xdf3bcd4e, 0xdd6ff94d, 0xad0abf99, 0x92f1617c, 0xe185aeec, 0xb6319670, 0xab3bb5d9, 
    0x47b41da3, 0xb1cc76d3, 0x234f50f6, 0xecb9af38, 0xfe661f3c, 0x3ffcd30b, 0xa106c1aa, 0x41b11604, 0x19e5b222, 0x33dc4095, 0x7a70e4c8, 0x677ce48a, 
    0xf7e16ff1, 0xd31a2dc0, 0xb7babe4c, 0x801816d3, 0xf8f4d1b5, 0x9cb3cbb7, 0xa0fb3562, 0x80cdfce0, 0xf0d17a4f, 0x0d9fc6f7, 0x6d0b3feb, 0x70777ffc, 
    0x55024d74, 0x547edd77, 0x9391ed3a, 0xc4725218, 0x27b90aaf, 0x2eae7520, 0xf76ce223, 0xd31a9588, 0xcb288d8b, 0x3e2b6df7, 0x244db367, 0x8ba6d3db, 
    0x8ff8f2d4, 0x31e7991b, 0x60c28aa5, 0xce0f4be5, 0x9cb93695, 0xac9d26a5, 0xdbd1abef, 0x766d5995, 0xc3f81acf, 0xf0590ff0, 0xb7daa4d5, 0xb9c62c83, 
    0xbabc806a, 0x3902b774, 0x8cb95ee3, 0x76008791, 0x6e1c3724, 0x8747f335, 0x9eea25fe, 0xf4add529, 0x33c323bd, 0xc3855a6a, 0xdede8a6d, 0xf0c7ce62, 
    0x3ca9074e, 0x7cdaf50e, 0xbca5fd66, 0x5ff3f14b, 0x0ebec187, 0x433f7d86, 0x636d99be, 0x2f2e4e81, 0x29338ed9, 0xd93f751f, 0x8925631c, 0xf89d3ee8, 
    0xc18ff057, 0x836fb39f, 0x717fa7c6, 0xc7a86f69, 0x5e475d01, 0xb79b60bb, 0x931a2d15, 0x852a37d1, 0x72c7c951, 0x4f817e4d, 0x93fc738d, 0x1a33842f, 
    0xf0e5f5bc, 0x5b399547, 0xfedacefb, 0xdfde6d7e, 0x5b15c7a4, 0x6b9a3287, 0xe2aaa43c, 0x110e7fea, 0xbffd37bf, 0xf7f46d67, 0xee6afa55, 0xcfc0d7d6, 
    0x1afeeb08, 0xc49364d0, 0x75ba5656, 0xa2c4f1e4, 0xb49f0bd2, 0xf783c218, 0xe71968db, 0xe61eeea2, 0xf06b3cb4, 0x865ad7b2, 0x2229ad7b, 0x96cad4b3, 
    0x19526254, 0x03acfd5b, 0x1fa03eb7, 0x868faca1, 0x8487b49f, 0xce782dfe, 0x1cdec3fb, 0x5acb6dfb, 0x5edb355a, 0x0b950fcd, 0x285c75a8, 0xe3727e27, 
    0x6ff38aaa, 0xc5f627da, 0xda2ff0b0, 0xc9e03dbc, 0x443cd521, 0xff3dc5a4, 0x646f0f00, 0x493b107a, 0xa0fbf420, 0xd70acef5, 0xf8ce50c2, 0xcb10afb6, 
    0x5339a331, 0x9a474dc5, 0xa4f228c9, 0x6ea3b9a2, 0x8d96245b, 0x2c3ff337, 0x1ef195a1, 0xa9743b3b, 0x6575f650, 0xea2e4a69, 0x9adb8b31, 0x5fbdb4ed, 
    0x224f6d37, 0x3dc6f7f1, 0x8977e17b, 0x43bcd026, 0x7f69d1e0, 0x5d00891a, 0x19493a48, 0x11a92b24, 0xbf0f0ef2, 0xffb906a8, 0xb36af800, 0xbf4200ff, 
    0xfb3f54fe, 0xb57e7855, 0x8ff85fad, 0xb5d4b955, 0xf5afc94b, 0x26f3970b, 0x3bcb9db9, 0xf227a9b7, 0x1bfd55aa, 0xe5338b4b, 0x10d73e4e, 0xa1adad9c, 
    0xa3e5af14, 0xf0e8a83f, 0xa2ec59a6, 0x764ed1ab, 0x2bcd6957, 0x6d72b2f5, 0xdeb3da2e, 0x2da7f69f, 0x7f20c3d3, 0xff00ffdb, 0xffa86b00, 0x9ba8e100, 
    0xffa185fe, 0xfddf8100, 0x4d47bcae, 0x7d75aed3, 0xcec2d646, 0xeaee9e26, 0x93188254, 0xaa10bbab, 0x0592dca3, 0x0ded177b, 0xf84b67f0, 0x4b78a66f, 
    0xc2fcf054, 0xb5bd4bf7, 0x5157b736, 0x5e92cec8, 0x82237144, 0x00e7067a, 0xf41af271, 0x101f71e9, 0x1153a156, 0x2decfe0a, 0x5d1d767f, 0xecef97bf, 
    0x38ca5771, 0xa38a0b7f, 0xdf4ba982, 0x7a5f7eab, 0x575fd156, 0xb7f5a5cd, 0xcfc53e7b, 0xff266af8, 0x7f68a100, 0x00ff77e0, 0xb51fa56b, 0x96f90f23, 
    0x7f07fe87, 0xbff1baf6, 0x5a966a0e, 0x1a97a63e, 0xae6b8d86, 0xda6be3da, 0x6a34cb5d, 0x68484646, 0x0136189d, 0x798e2403, 0xe33bbd06, 0x3c8597ad, 
    0x5be1653b, 0x42f80f6f, 0x589b49d3, 0x89f56cd0, 0xd4e5cdee, 0x64f344d2, 0x290fe398, 0x322ea05d, 0x6ccf49ca, 0x253e9d66, 0x9d51eace, 0xcb25ad7f, 
    0xf555396d, 0xbfe5deda, 0xe492af10, 0xb05471f4, 0xed2709af, 0x6829692f, 0xe6bdabad, 0x9a499e9e, 0xd4f000ff, 0x4200ffad, 0xc000ffc8, 0xd7fe00ff, 
    0x2b35fc47, 0x3fb2d07f, 0x00ff3ff0, 0xd183d7b5, 0x76eb3f5c, 0x3f00ff77, 0x58f200ff, 0xa927f27f, 0xff64abfe, 0xffe3f300, 0xff972600, 0xd77d2400, 
    0x497c56fb, 0xc2f7e09b, 0x2ff80eef, 0x853552c3, 0x2d6aa1c6, 0x1a4ee8fc, 0x5491481b, 0x72a12385, 0x6ea0cf40, 0x95c2d7fc, 0xb7b43fee, 0x8bf8648c, 
    0xf137fca4, 0x47e69b2f, 0x791ba273, 0xa84b7450, 0xc7382ba4, 0x709f4a6e, 0x7e757845, 0x35d8c355, 0x25a5c083, 0x2727b7ef, 0xf8b5bbd5, 0x9670736c, 
    0xb1dcb25a, 0xb2f76b46, 0x57df9c94, 0xfd9d662e, 0xc557632d, 0xfcd52b1e, 0xab4fad6b, 0xfa849a6b, 0x3736a39e, 0xe0643bcf, 0x00740074, 0x57000376, 
    0xd6b33fdb, 0xcff06dad, 0xf1ba48f6, 0x2d8ab125, 0x0bf55842, 0xac8c32d4, 0x8bf931b7, 0x62dc911a, 0x11bee215, 0x217ca1af, 0x15cf7be2, 0xc73acbfe, 
    0x64e62c86, 0xfcf5f0bb, 0x84c69297, 0x4152d682, 0xa03e313b, 0x47fdfc3e, 0x609f65ad, 0x4a0b23d6, 0x9c82748c, 0x5597db6f, 0x5cc65ef7, 0x7e2c9653, 
    0x2b15860a, 0xcc215552, 0xabbadc96, 0x3cdab55b, 0xefd65b1f, 0xddab49fc, 0xdca59aea, 0xd485dab7, 0x26ae5986, 0xeeb1b36c, 0x4ab7c37f, 0x6de37dbd, 
    0xc5f05277, 0x752e8787, 0x2b74894b, 0x695b3206, 0x6c14b1e5, 0xa36db14b, 0xe44766ab, 0xa563f3f3, 0x4d5f5162, 0x53d4e0ec, 0x2f6fd38a, 0x3adac74e, 
    0x718ada34, 0x6ddaee5e, 0x68da4ed3, 0x0efb057d, 0xa7faf668, 0x743eefc6, 0x9986250f, 0xfe19cc3d, 0x79240b19, 0xcc6aa4fc, 0x367ea9fd, 0x3c129fea, 
    0xb168aa75, 0x6378325d, 0x6df2bb4b, 0x5e1b00ad, 0x98a1b748, 0x7c96e49e, 0x1547da76, 0xf82afb9b, 0x7c012fea, 0xb9a7d169, 0xa8654390, 0x9167d386, 
    0x1b9728ba, 0x8f20e10f, 0xe635d327, 0xb8b52ade, 0xb13ef1b2, 0xae59786f, 0x399abce1, 0xe1921c8b, 0x39fe6cc8, 0x098e9daf, 0x269e394f, 0x1ea1bdaa, 
    0x7b652d5f, 0x3e7eab79, 0x2cc3c767, 0xab235e8d, 0xf21baf8e, 0xfa8582d2, 0xb7e6535e, 0xb4d7b29a, 0x7b78c7bc, 0x84c79ac5, 0x7db4fdda, 0xef396d42, 
    0xe1ce9aad, 0x3c6bdbed, 0x9bccca2c, 0xaf4a80ba, 0x42c7744c, 0x2b8a266b, 0x9b6214e9, 0xecb35a92, 0x39192394, 0xccdfab25, 0xb6a4a228, 0x8ab96789, 
    0xd12d9937, 0x284d2bdc, 0x7982b162, 0x8113b463, 0xa04f80d7, 0x9b524b35, 0x9fe9b9b2, 0x883b7405, 0x5cf15d53, 0xdcdbd952, 0xdfe65669, 0xd8fb6b4d, 
    0xa6af116d, 0x99875005, 0x791a73d1, 0xca396392, 0x1feb152f, 0x7f25bc0f, 0xe7d95fe3, 0xbf039ec5, 0xd5bc4b9f, 0xc63ab734, 0xbd3a968e, 0x92f1ebad, 
    0x5c1916ea, 0x92e1cea8, 0xe5f5cc00, 0xe13f123f, 0x27f0b016, 0x0b7fb487, 0x57d3ba78, 0xfa74d78e, 0xdc59ba8d, 0x7673cbdb, 0xe7f7fee4, 0x26222b88, 
    0x61307711, 0x8df9c096, 0xf16df63b, 0xbe809795, 0x1aeb5b25, 0x8b06bd9e, 0x154f24a5, 0x3cc373e4, 0x81896abf, 0x23b13006, 0xbeb58364, 0x75940f6c, 
    0x835d5fe9, 0x880b47ab, 0xefa885a7, 0xd4649c16, 0xadefcba3, 0xeb346d5f, 0xbef951f6, 0x66c58769, 0x85d93a18, 0x25e3d404, 0x9fd34528, 0xba9fee3f, 
    0xdefbd192, 0x4d7ad9f7, 0xaf2b4faf, 0x7fa1fd58, 0xff39fcd6, 0x4a2bb100, 0x1ed000ff, 0xc3fb78ab, 0xf1bf031e, 0x1abec4fd, 0x6f9bbef1, 0x5ed9cbe1, 
    0x0b8bf671, 0x48306bd4, 0x018b3d26, 0x713b39dc, 0xf07670d9, 0x5bc7974e, 0x8a780adf, 0x3ad7c2cb, 0xf5ec8b07, 0x0a7db469, 0xd09a47cf, 0x24435dd9, 
    0x91410eaf, 0x6917c40b, 0x02339cdd, 0xe735df31, 0x0fc71e2a, 0x5e9c8388, 0x7594d6aa, 0xa7aee9b3, 0xc5622cb5, 0x63557063, 0x2b35694e, 0x2dd79cde, 
    0xe593b2d2, 0x57d377b2, 0x453d1ef8, 0x7d845714, 0x48d3b079, 0x8b480fde, 0xd92f89b1, 0x54f90995, 0x1d48c698, 0xfab9da89, 0xadc74a0f, 0x3f95f96f, 
    0x00fff7ed, 0x444dd669, 0xa11e917a, 0xbd159e5b, 0xd8feb2b8, 0xc1f23cfb, 0x45d3e9e6, 0x77e59427, 0xe354c6a1, 0x87953ea8, 0xff1ede5a, 0xfd9f9800, 
    0x28fd4b79, 0x312d4e9a, 0xa6c54954, 0x1545d164, 0xb6d28166, 0xdc2b613c, 0x59fa9278, 0x4696a45d, 0x2ce7ee0e, 0x491254cc, 0x58ef49ee, 0xafe2adf5, 
    0x7fdd0ff9, 0x11f47fc0, 0xf325fe50, 0x1a7f08fd, 0x4d86fef9, 0x58565114, 0x00144551, 0x00144551, 0x00144551, 0x01144551, 0x0000d9ff, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(AIOverExposureNode, "AI Over Exposure Correction", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Enhance")
