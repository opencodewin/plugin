#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "AIReFocus_data.h"

static const std::string key = "tianlu2024";

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct AIReFocusNode final : Node
{
    BP_NODE_WITH_NAME(AIReFocusNode, "AI ReFocus", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Enhance")
    AIReFocusNode(BP* blueprint): Node(blueprint) { m_Name = "AI ReFocus"; m_HasCustomLayout = true; m_Skippable = true; m_BGRequired = true; }
    ~AIReFocusNode()
    {
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        auto url = GetURL();
        auto path = ImGuiHelper::path_url(url);
        std::string data_path = path + "AIReFocus.data";
        // decrypt data file
        std::vector<uint8_t> data;
        ImGuiHelper::ImDecryptFile(data_path, key, data);
        if (data.empty()) return;
        // create realsr
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(AIReFocus_param_bin, AIReFocus_param_bin_size, data.data(), data.size(),
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 1;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "Refocus:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5579;
    const unsigned int logo_data[5580/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf2003f00, 0x6213ed58, 0x76d08bfc, 0x47cd16a9, 0xadf2573b, 
    0x767fad38, 0x970a3a9d, 0xfe4a9fec, 0x61fed0d3, 0xb35066e6, 0xe52fee4f, 0xfd69164f, 0x50abfcc5, 0xc229fd59, 0x7b14bfcf, 0xd1cccca1, 0x57f88762, 
    0x150ba7f2, 0x55fee2fe, 0x94fe2ca4, 0xbd34b4f5, 0x0533bbd0, 0x5fe08f92, 0x932c9cca, 0x4a3f83fb, 0xed635bd5, 0x00ff164f, 0xf1a6ca4f, 0xa93917ec, 
    0xb895806d, 0xde16681d, 0xa725add5, 0x53a75fef, 0x56fab440, 0x3353a28d, 0xa7f4b005, 0x8ae3b02d, 0x4a7f16d3, 0x14f7b270, 0xfbcc80ae, 0x0009be12, 
    0x583845fd, 0xf217f7af, 0xf46531ad, 0x1da12da7, 0x73215ee9, 0xfc815830, 0x8553f90b, 0x7000ff92, 0x2dac557e, 0x7f0ba788, 0xd8e34da5, 0xc4be3277, 
    0xca5fdc9f, 0xf727b18f, 0x7fadf217, 0x3e6a8fb3, 0x3d5e29ce, 0x1b92ec82, 0x1dafdd3f, 0x5a946a87, 0xd0957efb, 0x8db0a447, 0x6a073d38, 0x879ef0dd, 
    0xaaaa4fa3, 0x1d79cdeb, 0x66935389, 0x3876bfab, 0x570cc4fb, 0x844a3c9d, 0xecb69e1c, 0x49291965, 0x2d0ae746, 0xdad3c229, 0x835fb3be, 0xab35085f, 
    0x25fe3604, 0xbce73c1a, 0xdc0c94da, 0x3556018e, 0xf8437cc3, 0x3e78a609, 0xbee95dd4, 0x58b5d230, 0xcfec2788, 0x18c1a52a, 0x2d551524, 0x6ec738bb, 
    0x8706af48, 0xd42b6111, 0xc9e8bd54, 0xf16b71f4, 0xa9277ed5, 0x51c42e57, 0x8aa3a983, 0x00ff24ed, 0x0300ff0d, 0x3dc83ec2, 0xb19f4529, 0xfea8abfc, 
    0xa7fbc1c6, 0x90aea7f2, 0xca9fca33, 0x8f88c7bd, 0xa8f6c773, 0xb1a785e5, 0x3f99ada7, 0x5dab6bc2, 0xfe707f24, 0x23692a55, 0xa8f4733f, 0xed939878, 
    0x6949c191, 0xb9e3d6fb, 0xf6b640ed, 0xbaa62bfd, 0x93b808d2, 0xed71e300, 0x555ae953, 0x3ae0db9f, 0x16fbb888, 0x95fde6f1, 0x7d6f9741, 0xd6cfb8bb, 
    0xa38478b7, 0x27196bcc, 0x16957365, 0x953ff684, 0x8a7a5a38, 0xf8477ffa, 0xc577f069, 0x3efb783a, 0x17e8aab3, 0x521f062c, 0x4ff9b7ba, 0x15fe93ba, 
    0xe0f778ce, 0xade1855e, 0x1bfd5b3a, 0xb7461ac7, 0x66df0012, 0xc0cea232, 0xc18c50f6, 0x3b5fe58f, 0x7530894b, 0x2919fb2a, 0xb1b65746, 0xfcba9a7f, 
    0x59a6624f, 0x6d3f8589, 0xd746591e, 0x76f24bd2, 0xbfe0817f, 0xa2941e63, 0xe58f1dd3, 0x80d1415d, 0x55fe743f, 0x543dd220, 0xbcef55fe, 0x2f9e7b44, 
    0x2d2a47b5, 0x5a3c8d3d, 0x5a5d431f, 0x87fb23e9, 0x4957a9f2, 0x2bfddd1f, 0x1e898937, 0xd9871cd9, 0xe54ff70f, 0xf70fd947, 0x9f5de54f, 0x00ff4af6, 
    0x7f54fe70, 0x0ff7af64, 0xb8f551e5, 0xa323db8b, 0xd6ccf0ba, 0x202e9832, 0x018f2668, 0x35088691, 0xf49ce812, 0xddf172af, 0x3488d7bd, 0x00ff2bdb, 
    0x128687ec, 0x80ca33b8, 0x70001c3f, 0x708d1fc7, 0x9676d6d6, 0xe2f60957, 0x429033c2, 0xdee37163, 0x990d2bbe, 0x3715b54a, 0x33b554bf, 0x3c95d1c4, 
    0xdd49a14b, 0xa3356d74, 0x3e64befe, 0xac3bf807, 0x08e4d278, 0x55ed6c15, 0xcecd3d94, 0x9d916054, 0x03311fa3, 0xd8b57e9c, 0x7accfe5f, 0xb698b7fd, 
    0x2a5dda52, 0xcdbcc1fc, 0x0f3dc685, 0xb65df17c, 0xda5ef187, 0xa8f98c36, 0x1a330c22, 0x3d170644, 0xd1ab1d87, 0x691c7f34, 0x8686da5a, 0x00074766, 
    0xaf49bb48, 0x39e7c68f, 0xf19c2aad, 0xd7daa38d, 0x453ff6fb, 0x5d5964c0, 0xaa953c7a, 0xb7f73e37, 0x3e3eaae1, 0xa8117cd7, 0x4bfa6a78, 0x4bce4a4d, 
    0x2138e359, 0xf08c07c7, 0xb3c21f7a, 0x2b3d96c6, 0x8f00ffe8, 0x8d9b75aa, 0x2459382a, 0x60662258, 0x3896dd09, 0x7905dd1e, 0xb91b1e1c, 0x0d4598b9, 
    0xe821cbbb, 0xf893a488, 0x039bbe62, 0x86154b9a, 0xebbe6a8d, 0x669e9f7b, 0xe39775d8, 0xb76861aa, 0xfbe8c528, 0xdca75fdd, 0x1f4dc371, 0x9a06a9dd, 
    0x8f5ebb3f, 0x58cbf061, 0x5a2351bb, 0x05e71079, 0xf8713be6, 0x7aa53f63, 0x1dc1a72d, 0xf360ad0d, 0x0417bb25, 0x5dccc77c, 0xbd7cfba4, 0xd619312a, 
    0x4af10f1b, 0x619a9afe, 0x1bc39c32, 0x4b164e77, 0xf3719fbe, 0xa9e1a55e, 0x6802a5ad, 0x5974265a, 0x72e33a54, 0xf6b0cab0, 0xd145d520, 0x445fe939, 
    0x93b143fc, 0xd61ed350, 0x6c9142cf, 0xb28dd9f4, 0xcc18cbdc, 0xa40dbc68, 0x3a4e3b31, 0xe5958e91, 0x9c0561ab, 0x09d9b5d1, 0xa7906119, 0x2bbe23e6, 
    0x3c9a07af, 0xac662e45, 0x58e65efb, 0xd8b03cbc, 0xf3c1ab8f, 0x5fafd979, 0x3b539f54, 0xb50b7fc1, 0x2b6a1a5f, 0x4510616b, 0xd9cc25eb, 0x493d4611, 
    0x9a1cf6f5, 0xd9ef1bf4, 0x8836c47f, 0x6173c93e, 0x48024a7c, 0x7777c690, 0xebe77003, 0x3f7cea9a, 0xc5d256f1, 0x8e078221, 0xab30581b, 0xf985906e, 
    0xbebfd347, 0x3ff4d16b, 0xb84e9a88, 0x86571215, 0x89790c5c, 0x23a04f80, 0x86b9f235, 0xa9539b71, 0x8f164ecf, 0xdbef5f6b, 0xcb413ff0, 0xbda63c32, 
    0x464d4c2e, 0x7c3bdde7, 0xe77dd592, 0xf825bec9, 0x4a78aa77, 0xb66a5bf4, 0x574a5a32, 0xac829372, 0x830c433d, 0xd338d6f9, 0x535fed00, 0x6a94767c, 
    0x6dd31ebe, 0x22379262, 0x9e909976, 0xc781ab70, 0x29bc0afc, 0x92343f7c, 0x318b4804, 0x4d92abe8, 0x6b6ed97b, 0x5519663c, 0xfe7a92ac, 0x9867c207, 
    0x3a5e795a, 0x72125a58, 0x7dafb68a, 0xc8a1ed55, 0xbb7f350d, 0x7f345d4f, 0xc316bd76, 0x7bb5a6e1, 0x2a9daeb8, 0x28e37d22, 0x83538fd9, 0xf65de5cf, 
    0x4c53f08f, 0x92b74b97, 0xbba46bf6, 0x9df2177c, 0xdb11604c, 0xadaf27e4, 0xc339235e, 0x2bbdd761, 0x84676afa, 0x730cf3ca, 0x793b956a, 0xfff311bd, 
    0xfb6ff600, 0x7f667f34, 0xc1545fb3, 0x49c35ff0, 0x8ff66a04, 0xb9008523, 0x3a8ee59c, 0xfe3f45f0, 0x3f86cf14, 0xf0bfc5e7, 0x8d00ff20, 0xb08acf78, 
    0xfc32fcc9, 0x25facc3f, 0x579319c2, 0xfee38fe7, 0xf8a93b47, 0x22acd5ba, 0xde924f93, 0x14f308f2, 0x0964818c, 0xf03c7527, 0xc41a3c78, 0x131f5bb1, 
    0x6c4d33ee, 0x427239ca, 0xfe6c0fa6, 0x0b9cf355, 0x8e45307d, 0x4681f9c4, 0xf2a4aae0, 0x00ffe03b, 0xfa68723a, 0x4ec71293, 0xd4ae5b2a, 0xf27435c1, 
    0x68a334da, 0xfdefb3d5, 0x6b94de33, 0x85339fd4, 0xeb3f6bd7, 0x4d933ef3, 0x9ffee13b, 0x74d7653e, 0x991f30df, 0xc36fe53c, 0x67579c0b, 0x69a3a7fd, 
    0x1714c791, 0xca6d4036, 0x24213224, 0x9a032076, 0xb04e23f9, 0x1184b1b9, 0x791b2c67, 0xfe4061cc, 0xc57a0475, 0x4cf27784, 0xe757a4b2, 0x01249d01, 
    0xa7eda68f, 0x96abb1d6, 0xb3d6b342, 0xbffef476, 0xeb9cb633, 0x35ed3e42, 0xf651fd16, 0x7294f607, 0xca24acc6, 0x845e99cc, 0x4756fb32, 0x00ff3588, 
    0xbd363bec, 0x402822dc, 0x281f8432, 0x5ebe26f5, 0xecfac587, 0xf5d3e3c5, 0x0762a45b, 0xf104b7ca, 0xf87192ed, 0x6be23f57, 0xdce67eed, 0x5eabada6, 
    0xc2e00ecf, 0x1976b917, 0xfd5e3e1d, 0xd4e428ea, 0x4535d7f9, 0xced4d66e, 0x3628ebb4, 0x7decf3a3, 0xfd7d6b6f, 0x698e31a5, 0x55863b1e, 0x0edb9191, 
    0x4f25f454, 0xaed91e20, 0x9018cc9e, 0x4c21cf2b, 0x085f0d63, 0xb7eaafc1, 0xae582617, 0x43e29e6e, 0x76045cf3, 0x98f69f94, 0xbac69f8c, 0x1c5f3519, 
    0x8f20db5a, 0x4f15d45f, 0x52768e45, 0x2a06e207, 0x76d1e4ab, 0x902fd55e, 0xceceea61, 0x677e8b51, 0x8bdf1ad6, 0x5b5c506c, 0xd736f7e9, 0x168e1677, 
    0xadc415ee, 0xf0c6c011, 0xc6a8570e, 0x9eb4996b, 0xc9d2c4d7, 0x1c5bd21c, 0x1a432512, 0x857fb4c7, 0xa306e47c, 0xd6ac913c, 0x467a73ad, 0x49b695e6, 
    0x1cbb8724, 0x733dc71d, 0x0b5d4fef, 0x1dcb9551, 0xfee98131, 0xf2470cab, 0x74e5a9ad, 0xadcac628, 0xcc3f7d9f, 0x56af9ae6, 0xb72b37a7, 0x5daf7f6d, 
    0x8f3ef7fa, 0x7bf84e9b, 0xcdebbea4, 0x90494b77, 0xd159a165, 0x8000ffc8, 0x5de94fae, 0x78aa9b7e, 0xb54dcb76, 0x4ff73a7d, 0x1ea83cfb, 0x67a01b23, 
    0xefb7eb18, 0x9111d467, 0x7a69265f, 0x9c9add45, 0x33c2b369, 0x832add9f, 0x6d8a9afa, 0x56874c53, 0x8e252e49, 0x951f520d, 0x26d16924, 0xb3b1635f, 
    0x7275d6f9, 0xd7d156d8, 0xfca3b772, 0xcacee13f, 0x5e4da953, 0xf55bd434, 0xab49d847, 0x3c6924c7, 0xcbedfe72, 0x123cb022, 0xfdacf03e, 0x3e6d555f, 
    0x7995eec5, 0x58060b81, 0x9e3b2ac1, 0x53bee239, 0xb13ac687, 0xdae931b9, 0xc831e9bc, 0xc3e11d51, 0x6c01ce73, 0x7facf067, 0x9a78df12, 0x535d564b, 
    0xda5ad458, 0xde0b8341, 0xaefad63e, 0x2c951579, 0x3ae91c96, 0x939ade8a, 0x0665a556, 0xd8e76ff9, 0x5ec3b2fa, 0x79a2795d, 0x714b4b2e, 0x971b991f, 
    0xc69948c3, 0xe74a1de5, 0xa82b8e8c, 0xa2ad51d3, 0xb3cbe751, 0xf84a0f1d, 0xba59d32a, 0x795ba28d, 0x46802ce6, 0x3abbb08c, 0x2b01e828, 0xaea00790, 
    0x1b1f3599, 0x96a4d85a, 0x14a9eeba, 0x1cc7ca4f, 0x501f21d2, 0x5f6dc540, 0xaaca8625, 0xe119cd4b, 0x51e24beb, 0xb6cf7de6, 0xe7e4764c, 0x8f667e73, 
    0xcdfbdf2a, 0x8bf89af9, 0xfcb3f1ce, 0xb6bac4c7, 0xab3a274f, 0x7954f17f, 0x00ff359e, 0xff5597a1, 0x7fabc100, 0xfdc955f1, 0x08fa0f87, 0xebccd75f, 
    0xf94fc5fa, 0xaf00fff2, 0xfb6db791, 0x8a3e7c46, 0x0c531e24, 0xab2d1f28, 0x35bfd303, 0x4f1afe63, 0xc51cd9e1, 0xedd63e39, 0xa3f235fe, 0xfc2a335e, 
    0xa203af91, 0x92ba448a, 0xff0bc836, 0xfb8a7c00, 0x0678c1f5, 0xfc3fcfaf, 0x27f27f09, 0xe3b5fe8b, 0xdc87e436, 0xfacc00ff, 0x2f1afe9f, 0x4121dbe1, 
    0xc6433169, 0x631cb2df, 0xff46add3, 0xc32fb400, 0x6b9a92f1, 0xaf00ffee, 0xd7fa3332, 0xe59ad6cd, 0x63753fc4, 0x05be00ff, 0xdf147f5d, 0xf053c630, 
    0xf52f2b40, 0x929e0443, 0xff07fe9f, 0xfe93da00, 0xd8d7e2b6, 0xff03fe8f, 0xcff70400, 0x04df68f8, 0x295d2295, 0x1cc3ef3f, 0xfd86627e, 0xb11fbea2, 
    0x6751f6cf, 0xd7c436f5, 0xbd9a17ce, 0xf1f9c1cd, 0xb54f55f9, 0xae2b7d4a, 0x6a801f1c, 0x00ffd3fc, 0x0be0bfc0, 0x75c66afd, 0x1ff03f8c, 0x8dd327f8, 
    0x13f846fb, 0xcb749a8d, 0xfc1b68cf, 0x89f6a769, 0xe6a744f0, 0x736f24d3, 0x5feb1f03, 0x5fa2fd32, 0x99bf785a, 0xa9d21f7a, 0x7d0186f0, 0xe000ffa9, 
    0xfe07f05f, 0xd81f63b5, 0x7d02fe87, 0x27ed0f39, 0x09dff6f0, 0x41249dfd, 0xc816d246, 0x9df9f983, 0x3fb00a3f, 0x2587bf69, 0xa23b6b7e, 0xff5bad7d, 
    0xcb578e00, 0xf8cadf92, 0x751c50f9, 0xaafc33d8, 0x84cab52f, 0xe4fb8f1c, 0x95fa3f57, 0x9e7bbf97, 0xbf04fea7, 0x98c5b5c8, 0x3f24a7c5, 0x27f81ff0, 
    0x94f663d4, 0x91516ef8, 0x1cc2c974, 0xe062bffc, 0x7e7eaee7, 0x90f68769, 0xf78376f8, 0x0cbc3c7a, 0x9e0e580c, 0x6fbe7e9f, 0xe1eed6b5, 0xeb83acfb, 
    0x57e99f1a, 0xd42ae1bf, 0x26e60176, 0x3f48a407, 0x3ff866a5, 0x9f929e02, 0x00ff07fe, 0xbbf892da, 0x3fc4be18, 0x27f81ff0, 0x6bda1fbc, 0x2711a4c1, 
    0xf1d0d587, 0x3ef2248f, 0xfd459a84, 0x54007ca5, 0x85dcf06e, 0x8816e3c0, 0x613e7dc0, 0x6b5e3c5f, 0xe7079757, 0xa3887e70, 0x773355fa, 0xf973753b, 
    0x3f384c57, 0x7fde7a2f, 0x02fc17f8, 0x6bbcd67f, 0xfe0fc6d5, 0x3f973edd, 0x8881cfb4, 0x43ba40e3, 0xff6d2bc7, 0x5bd3d900, 0x34f091f6, 0xeed0e6a7, 
    0xed850e18, 0xd900ff49, 0xb4afe6ab, 0x4ee3fd4d, 0x70d0e95b, 0xe05bc5d8, 0xa97dbdec, 0x5fe000ff, 0xb5fe07f0, 0x87d95fe3, 0x1a7d02fe, 0x1e7e1fdf, 
    0x0d6f16bb, 0x497262b9, 0x00ffebb1, 0xc27fd28f, 0xff77f8fb, 0x7fd34200, 0x00ff07e0, 0x7f3b5f67, 0x7d7fdd6a, 0xb53f3abf, 0xdfbebf6e, 0x9eea1f9d, 
    0xffe7f907, 0xc07f8100, 0x8ccffa17, 0x709f00ff, 0x4ac000ff, 0xfa453e8a, 0x6932420a, 0xd247e10b, 0xf564b29a, 0xb6f6b2af, 0x5b2f3e56, 0x8184b2dc, 
    0xdc11324e, 0x676daed3, 0x2e78b8b0, 0x43267862, 0x08c68d86, 0x5ced75a6, 0xabd3ebf4, 0x939c5215, 0xaa35d58b, 0xa79bc86b, 0xbb25c6a8, 0x48a74df1, 
    0x931115d8, 0x52a3bada, 0x7dac06db, 0x30aa3d2e, 0x4d0da4e6, 0x85eee0ce, 0x469ade2b, 0x00936569, 0x27212a7d, 0x5b5d6a3d, 0xdc578a68, 0xcc539cb0, 
    0x1b890a84, 0xacf5a7f3, 0x6913d3b9, 0xc71223ee, 0x95d29bda, 0x1951d1ce, 0x1a6ba50f, 0xd837d896, 0xd62f9492, 0xa51f12a2, 0x37c5af48, 0x17ba833b, 
    0xf3281b65, 0x792af328, 0xe723cd85, 0xb150fbc3, 0x8400ff18, 0x77e07f6c, 0xaf6b00ff, 0xa543f86d, 0x84e2db78, 0x0b5ffa42, 0x76748727, 0xe61d498c, 
    0xcec074a3, 0xb43ce00e, 0x978fe411, 0x04c1c0a9, 0xfecd3567, 0x75b37fc7, 0x0769b59e, 0x6853fc8e, 0x4e2ea02e, 0xb9cea795, 0x6770da47, 0x46463d75, 
    0x27381e14, 0x7edd2b9e, 0xdfd57e24, 0xcc19fe0f, 0x1fd4266d, 0x4612d45b, 0x203d4b8a, 0x5c11ad2c, 0x142c3964, 0x9c333d63, 0xfe1a3b82, 0x4efccd21, 
    0x585e37e2, 0xf57ca60c, 0x0d92ef16, 0xde862f2f, 0xe873e9ad, 0x861587b8, 0x8eb2dcfa, 0x5a7bc11c, 0x79a5f8d1, 0xe2db1735, 0x2657d7b5, 0xcf6a7a92, 
    0x317cd750, 0x0d8e78a7, 0xeeea9697, 0x0c948414, 0x0775643a, 0xabf98afc, 0x8b9f35e3, 0xaf8914be, 0x1f333ced, 0x8a3c7c88, 0x2ff81bd2, 0xaa0a6f84, 
    0x65643e96, 0x39061c09, 0x891d4752, 0xc58f7bc5, 0x18be8c3f, 0xfda243f8, 0x48bf5db7, 0x478a65ee, 0x9953b0b4, 0x9d5459ae, 0x043800aa, 0x50386ee0, 
    0x5ff36458, 0x7e19bf9c, 0xe397f83a, 0x9df6b356, 0xe9b36f5e, 0x9a36b9b0, 0x987c0c54, 0xda7f4007, 0xcf73757c, 0x5f71605c, 0xcf19c019, 0x93ebe513, 
    0x0dc75d07, 0x75994bda, 0x5ddb13f8, 0xecde65ed, 0xb20f9ff9, 0xab31cb0c, 0xfdc3abed, 0x363f7f95, 0x4fb3e0bf, 0x2abfbb47, 0xb7d9d9ec, 0xffcd4ced, 
    0xffc83200, 0x00ffc000, 0xff4dd7fe, 0x6fa28600, 0xfe8716fa, 0xbaf67f07, 0xf72b9af0, 0x3bbbf57f, 0xff9f00ff, 0x3f2cf900, 0x23fa13f9, 0xd7c956fd, 
    0x00ffb8fc, 0x00ffa5c9, 0xffed1ec9, 0xdf440d00, 0xfc0f2df4, 0xed00ff0e, 0xa4f6a374, 0x3200ff61, 0xc000ffd0, 0x5ed7feef, 0xf53f4511, 0x00ff3bbf, 
    0xf900ff9f, 0x10f93f2c, 0xb25500ff, 0xfff1f97f, 0xff4b9300, 0xe13d9200, 0xd84d6abf, 0x678a00ff, 0xff2700ff, 0x3455fb00, 0xff38d47e, 0xff679900, 
    0x00ff2700, 0x4d7855fb, 0xecd6bf14, 0xcb00ffed, 0x96fc00ff, 0x7f88fc1f, 0xfc47d9aa, 0xc900fff9, 0xc900ffa5, 0xb5bff41e, 0x96f9df3e, 0x7100ff33, 
    0x52d5fe0f, 0x03b3da0f, 0xff8bf01f, 0xff43e500, 0x8057b500, 0x6dfd4bd1, 0xffe7bfce, 0x0f4bfe00, 0xc29744fe, 0x00ff3399, 0x34f91f97, 0x23f900ff, 
    0xaafda4de, 0xc0f0f40b, 0x00ff5b1f, 0xff51d7fe, 0xb751c300, 0xff430bfd, 0xfbbf0300, 0x9b8e785d, 0xfaea5ca7, 0x9c85ad8d, 0xd4dd3d4d, 0x273104a9, 
    0x55217657, 0x0a24b947, 0x1bda2ff6, 0xf097cee0, 0x96f04cdf, 0x85f9e1a9, 0x6a7b97ee, 0xa3ae6e6d, 0xbc249d91, 0x0447e288, 0x00ce0df4, 0xdd35e4e3, 
    0x82f8884b, 0x88980ab5, 0x6b61f757, 0xedeab0fb, 0x637fbffc, 0x7094afcc, 0x471517fe, 0xbf975205, 0xf4befc56, 0xafbea2ad, 0x6eeb4b9b, 0xa38b7df6, 
    0xff61a3f6, 0xffd03200, 0xfeefc000, 0x6a3f4ad7, 0x2df31f56, 0xff0efc0f, 0xe375ed00, 0x2cd51c5e, 0x2e4d7db4, 0xd71a0d35, 0xd7c6b55d, 0x6896bbb4, 
    0x908c8cd4, 0x6c303ad1, 0x1c490602, 0x777a0df2, 0x0a2f5bc7, 0xc2cb7678, 0xf01fdeb6, 0x3693a685, 0xebd9a0b1, 0xcb9bdd13, 0xe689a4a9, 0x1ec631c9, 
    0x5c40bb52, 0x9e939465, 0xf814cdd8, 0x46a93b97, 0x97b4fe75, 0x57e5b42d, 0x967b6bd7, 0x4bbe42fc, 0x52c5d193, 0x9f24bcc2, 0xa5a4bdb4, 0xf7aeb6a2, 
    0x26797a9a, 0xc300ff6b, 0x0bfd3753, 0x0300ff23, 0x2f5dfbbf, 0x7f3335fc, 0xf03fb2d0, 0xb500ff3b, 0x5c5183d7, 0x7776eb5f, 0xff3f00ff, 0x7f58f200, 
    0xfea927f2, 0x00ff64ab, 0x00ffe3f3, 0x00ff9726, 0xfbd77d24, 0x9b497c56, 0xefc2f7e0, 0xc32ff80e, 0xc6853552, 0xfc2d6aa1, 0x1b1a4ee8, 0x85549148, 
    0x4072a123, 0xfc6ea0cf, 0xee95c2d7, 0x8cb7b43f, 0xa48bf864, 0x2ff137fc, 0x7347e69b, 0x50791ba2, 0xa4a84b74, 0x6ec7382b, 0x45709f4a, 0x557e7578, 
    0x8335d8c3, 0xef25a5c0, 0xd52727b7, 0x6cf8b5bb, 0x5a967073, 0x46b1dcb2, 0x94b2f76b, 0x2e57df9c, 0x2dfd9d66, 0x1ec55763, 0x6bfcd52b, 0x6bab4fad, 
    0x9efa849a, 0xcf3736a3, 0x74e0643b, 0x76007400, 0x55560003, 0xc6d15714, 0x62548431, 0x30f691ac, 0x42c56984, 0x966cc90a, 0x8aa228c8, 0x288ac2a2, 
    0x288a02a0, 0x2a8a02a0, 0x7b96684b, 0x9279a398, 0xb4c21ddd, 0x182b86d2, 0x413b9627, 0x04781d38, 0xd44203fa, 0xf45cd94d, 0x1dba82cf, 0xf8ae29c4, 
    0xed6c29ae, 0x73ab34ee, 0xfdb5a66f, 0xd78836ec, 0x43a802d3, 0x8db9e8cc, 0x9c31c93c, 0xf58a17e5, 0x12de878f, 0xecaff1bf, 0x01cfe2f3, 0xdea5cfdf, 
    0x9d5b9a6a, 0x1d4b4763, 0xf8f5d65e, 0x0c0b75c9, 0x706754ae, 0x7a6600c9, 0x1f899ff2, 0x78588bf0, 0x3fdac313, 0x695dbc85, 0xba6bc7ab, 0x2cdd467d, 
    0xb9e56dee, 0x7b7f72bb, 0x9115c4f3, 0x98bb0813, 0x7c60cb30, 0x36fb9dc6, 0xc0cbcaf8, 0xf5ad125f, 0x835e4f8d, 0x2792d245, 0xe139f28a, 0x44b55f9e, 
    0x581883c0, 0xda41b291, 0xca0736df, 0xaeaff43a, 0x85a3d5c1, 0xd4c253c4, 0x324e8b77, 0xf7e5516a, 0x9ab6afd6, 0xfc28fb75, 0xe2c334df, 0x6c1d0cb3, 
    0x716a82c2, 0xe9229492, 0x4ff79fcf, 0xfd6849dd, 0xbdec7bef, 0x95a7d726, 0xd07eacd7, 0x1c7eebbf, 0x95d800ff, 0x0fe87fa5, 0xe17dbc55, 0xf8df018f, 
    0x0d5fe2fe, 0xb74ddf78, 0xafece5f0, 0x8545fb38, 0x249835ea, 0x80c51e13, 0xb89d1cee, 0x783bb8ec, 0xade34b27, 0x453c85ef, 0x9d6be165, 0x7af6c503, 
    0x853edab4, 0x68cda367, 0x92a1ae6c, 0xc8208757, 0xb40be285, 0x8119ceee, 0xf39aef18, 0x87630f95, 0x2fce41c4, 0x3a4a6b55, 0x53d7f4d9, 0x623196da, 
    0xb12ab8b1, 0x959a34a7, 0x966b4eef, 0xf24959e9, 0xabe93bd9, 0xa21e0ffc, 0x3ec22b8a, 0xa469d8bc, 0x45a4076f, 0xec97c4d8, 0xaafc84ca, 0x0e24634c, 
    0xfd5cedc4, 0xd663a507, 0x9fcafcb7, 0x00fffbf6, 0xa226ebb4, 0x508f483d, 0xcb2a8aa2, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0x80a2280a, 0x80a2280a, 
    0x80a2280a, 0x80a2280a, 0x00d9ff3f, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(AIReFocusNode, "AI ReFocus", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Enhance")
