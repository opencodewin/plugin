#include <UI.h>
#include <imgui_extra_widget.h>
#include <ImVulkanShader.h>
#include <realsr.h>
#include "AIDenoise_data.h"

static const std::string key = "tianlu2024";

#define NODE_VERSION    0x01000000

namespace BluePrint
{
struct AIDenoiseNode final : Node
{
    BP_NODE_WITH_NAME(AIDenoiseNode, "AI Denoise", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, NodeType::External, NodeStyle::Default, "AIFilter#Video#Enhance")
    AIDenoiseNode(BP* blueprint): Node(blueprint) { m_Name = "AI Denoise"; m_HasCustomLayout = true; m_Skippable = true; m_BGRequired = true; }
    ~AIDenoiseNode()
    {
        ImGui::ImDestroyTexture(&m_logo);
    }

    void Reset(Context& context) override
    {
        Node::Reset(context);
    }

    void PreLoad() override
    {
        auto url = GetURL();
        auto path = ImGuiHelper::path_url(url);
        std::string data_path = path + "AIDenoise.data";
        // decrypt data file
        std::vector<uint8_t> data;
        ImGuiHelper::ImDecryptFile(data_path, key, data);
        if (data.empty()) return;
        // create realsr
        m_device = ncnn::get_default_gpu_index();
        if (m_realsr) { delete m_realsr; m_realsr = nullptr; }
        m_realsr = new RealSR(AIDenoise_param_bin, AIDenoise_param_bin_size, data.data(), data.size(),
                            m_device, true /*fp16*/, true /*packing*/, false /*tta*/, 1 /*thread*/);
        if (m_realsr)
        {
            m_realsr->scale = 1;
            m_realsr->prepadding = floor(m_realsr->scale);
            // preload model once
            ImGui::ImMat tmp(64, 64, 4, 1u, 4), tmp_out;
            float progress = 0;
            m_realsr->process(tmp, tmp_out, progress);
        }
    }

    FlowPin Execute(Context& context, FlowPin& entryPoint, bool threading = false) override
    {
        int64_t t1, t2;
        auto mat_in = context.GetPinValue<ImGui::ImMat>(m_MatIn);
        if (!m_Enabled || !m_realsr || context.m_bypass_bg_node)
        {
            m_NodeTimeMs = 0;
            m_MatOut.SetValue(mat_in);
        }
        else if (m_realsr)
        {
            ImGui::ImMat src_mat, upscale_mat;
            if (mat_in.device != IM_DD_CPU)
            {
                ImGui::ImVulkanVkMatToImMat(mat_in, src_mat);
            }
            else
                src_mat = mat_in;
            if (!src_mat.empty())
            {
                src_mat.elempack = src_mat.c;
                t1 = ImGui::get_current_time_msec();
                m_realsr->process(src_mat, upscale_mat, m_progress);
                t2 = ImGui::get_current_time_msec();
                m_NodeTimeMs = t2 - t1;
                upscale_mat.copy_attribute(mat_in);
                upscale_mat.elempack = 1;
                std::cout << "Denoise:" << m_NodeTimeMs << "ms" << std::endl; // for debug
            }
            else
                upscale_mat = mat_in;
            m_MatOut.SetValue(upscale_mat);
        }
        return m_Exit;
    }

    bool DrawSettingLayout(ImGuiContext * ctx) override
    {
        // Draw Setting
        auto changed = Node::DrawSettingLayout(ctx);
        ImGui::Separator();
        changed |= Node::DrawDataTypeSetting("Mat Type:", m_mat_data_type);
        return changed;
    }

    bool DrawCustomLayout(ImGuiContext * ctx, float zoom, ImVec2 origin, ImGui::ImCurveEdit::Curve* pCurve, bool embedded) override
    {
        bool changed = false;
        ImGui::SetCurrentContext(ctx);
        return m_Enabled ? changed : false;
    }

    int Load(const imgui_json::value& value) override
    {
        int ret = BP_ERR_NONE;
        if ((ret = Node::Load(value)) != BP_ERR_NONE)
            return ret;
        if (value.contains("mat_type"))
        {
            auto& val = value["mat_type"];
            if (val.is_number()) 
                m_mat_data_type = (ImDataType)val.get<imgui_json::number>();
        }
        return ret;
    }

    void Save(imgui_json::value& value, std::map<ID_TYPE, ID_TYPE> MapID) override
    {
        Node::Save(value, MapID);
        value["mat_type"] = imgui_json::number(m_mat_data_type);
    }

    void DrawNodeLogo(ImGuiContext * ctx, ImVec2 size, std::string logo) const override
    {
        // Node::DrawNodeLogo(ctx, size, std::string("AI"));
        if (ctx) ImGui::SetCurrentContext(ctx); // External Node must set context
        if (!m_logo) m_logo = Node::LoadNodeLogo((void *)logo_data, logo_size);
        Node::DrawNodeLogo(m_logo, m_logo_index, logo_cols, logo_rows, size);
    }

    span<Pin*> GetInputPins() override { return m_InputPins; }
    span<Pin*> GetOutputPins() override { return m_OutputPins; }
    Pin* GetAutoLinkInputFlowPin() override { return &m_Enter; }
    Pin* GetAutoLinkOutputFlowPin() override { return &m_Exit; }
    vector<Pin*> GetAutoLinkInputDataPin() override { return {&m_MatIn}; }
    vector<Pin*> GetAutoLinkOutputDataPin() override { return {&m_MatOut}; }

    FlowPin   m_Enter   = { this, "Enter" };
    FlowPin   m_Exit    = { this, "Exit" };
    MatPin    m_MatIn   = { this, "In" };
    MatPin    m_MatOut  = { this, "Out" };

    Pin* m_InputPins[2] = { &m_Enter, &m_MatIn };
    Pin* m_OutputPins[2] = { &m_Exit, &m_MatOut };

private:
    ImDataType m_mat_data_type {IM_DT_UNDEFINED};
    int m_device        {-1};
    float m_progress    {0.f};
    RealSR* m_realsr    {nullptr};
    mutable ImTextureID  m_logo {0};
    mutable int m_logo_index {0};

    const unsigned int logo_width = 130;
    const unsigned int logo_height = 130;
    const unsigned int logo_cols = 1;
    const unsigned int logo_rows = 1;
    const unsigned int logo_size = 5423;
    const unsigned int logo_data[5424/4] =
{
    0xe0ffd8ff, 0x464a1000, 0x01004649, 0x01000001, 0x00000100, 0x8400dbff, 0x02020300, 0x03020203, 0x04030303, 0x05040303, 0x04050508, 0x070a0504, 
    0x0c080607, 0x0b0c0c0a, 0x0d0b0b0a, 0x0d10120e, 0x0b0e110e, 0x1016100b, 0x15141311, 0x0f0c1515, 0x14161817, 0x15141218, 0x04030114, 0x05040504, 
    0x09050509, 0x0d0b0d14, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 0x14141414, 
    0x14141414, 0x14141414, 0xc0ff1414, 0x00081100, 0x03820082, 0x02002201, 0x11030111, 0x01c4ff01, 0x010000a2, 0x01010105, 0x00010101, 0x00000000, 
    0x01000000, 0x05040302, 0x09080706, 0x00100b0a, 0x03030102, 0x05030402, 0x00040405, 0x017d0100, 0x04000302, 0x21120511, 0x13064131, 0x22076151, 
    0x81321471, 0x2308a191, 0x15c1b142, 0x24f0d152, 0x82726233, 0x17160a09, 0x251a1918, 0x29282726, 0x3635342a, 0x3a393837, 0x46454443, 0x4a494847, 
    0x56555453, 0x5a595857, 0x66656463, 0x6a696867, 0x76757473, 0x7a797877, 0x86858483, 0x8a898887, 0x95949392, 0x99989796, 0xa4a3a29a, 0xa8a7a6a5, 
    0xb3b2aaa9, 0xb7b6b5b4, 0xc2bab9b8, 0xc6c5c4c3, 0xcac9c8c7, 0xd5d4d3d2, 0xd9d8d7d6, 0xe3e2e1da, 0xe7e6e5e4, 0xf1eae9e8, 0xf5f4f3f2, 0xf9f8f7f6, 
    0x030001fa, 0x01010101, 0x01010101, 0x00000001, 0x01000000, 0x05040302, 0x09080706, 0x00110b0a, 0x04020102, 0x07040304, 0x00040405, 0x00770201, 
    0x11030201, 0x31210504, 0x51411206, 0x13716107, 0x08813222, 0xa1914214, 0x2309c1b1, 0x15f05233, 0x0ad17262, 0xe1342416, 0x1817f125, 0x27261a19, 
    0x352a2928, 0x39383736, 0x4544433a, 0x49484746, 0x5554534a, 0x59585756, 0x6564635a, 0x69686766, 0x7574736a, 0x79787776, 0x8483827a, 0x88878685, 
    0x93928a89, 0x97969594, 0xa29a9998, 0xa6a5a4a3, 0xaaa9a8a7, 0xb5b4b3b2, 0xb9b8b7b6, 0xc4c3c2ba, 0xc8c7c6c5, 0xd3d2cac9, 0xd7d6d5d4, 0xe2dad9d8, 
    0xe6e5e4e3, 0xeae9e8e7, 0xf5f4f3f2, 0xf9f8f7f6, 0x00dafffa, 0x0001030c, 0x11031102, 0xf2003f00, 0x6213ed58, 0x76d08bfc, 0x47cd16a9, 0xadf2573b, 
    0x767fad38, 0x970a3a9d, 0xfe4a9fec, 0x61fed0d3, 0xb35066e6, 0xe52fee4f, 0xfd69164f, 0x50abfcc5, 0xc229fd59, 0x7b14bfcf, 0xd1cccca1, 0x57f88762, 
    0x150ba7f2, 0x55fee2fe, 0x94fe2ca4, 0xbd34b4f5, 0x0533bbd0, 0x5fe08f92, 0x932c9cca, 0x4a3f83fb, 0xed635bd5, 0x00ff164f, 0xf1a6ca4f, 0x693917ec, 
    0x8033f16d, 0x10680c07, 0xd6ac567b, 0xa793bebf, 0x5f0b34de, 0x45ec64a5, 0xb507c1cc, 0x5aed413c, 0x4ee9d322, 0x5a4a9f16, 0xb2efcc05, 0x3f40c606, 
    0x6b164e51, 0xabfcc5fd, 0x85d35a48, 0x8eeea5b1, 0x6b16cdec, 0x53f9c1fd, 0x00ff9a85, 0xa6557e70, 0xdee2a92d, 0x3becdda7, 0x6bec2bb3, 0xa8fcc5fd, 
    0x00ff1afb, 0xd62a7f71, 0x8fd23ffb, 0x7b29fdb3, 0xb7ec82bd, 0xd7ee9f0d, 0x4ab5c38e, 0x4abf7d2d, 0x58d223e8, 0x831e9c46, 0x4ff86eb5, 0xd5a7d143, 
    0xbce67555, 0xc9a9c48e, 0xbbdf55b3, 0x06e27d1c, 0x95789e2b, 0x6d3d3908, 0x5232cad8, 0x14ce8d92, 0xa785535a, 0xbf667db5, 0x6b10be06, 0xfc6d0856, 
    0xcf79344a, 0x1928b579, 0xac021cb9, 0x87f8866b, 0xf04c13f0, 0xd3bba87d, 0x6aa5617c, 0xd94f10b1, 0x824b559e, 0xaa2a4830, 0x8e71765b, 0x0d5e91dc, 
    0x57c2220e, 0xd17ba9a8, 0xd7e2e893, 0x4ffcaae3, 0x885dae52, 0x475307a3, 0xfe49da15, 0x8407fe1b, 0x527a907d, 0xf9633f8b, 0x8dfd5157, 0xe54ff783, 
    0x67205d4f, 0x7b953f95, 0xe71e118f, 0xcb51ed8f, 0x4f634f0b, 0x847f325b, 0x48ba56d7, 0xaafce1fe, 0x7e46d254, 0xf150e9e7, 0x23db2731, 0xfdb5e6ce, 
    0xbc1f9cfc, 0x6f0b527b, 0x4f57f963, 0x7591a477, 0xf97eca2f, 0xf456efed, 0x5dc21a1d, 0x4375d956, 0xc7059670, 0x3ccad69c, 0xb0dbbec0, 0xae723a3f, 
    0xa2631ea3, 0x8f233b2d, 0x786a5f5b, 0x953ff6b5, 0xf063597d, 0xbbeee093, 0x5eebfea6, 0x809d4793, 0xa5ce25db, 0xa1faf50e, 0xf8cb3538, 0xd07cf6f7, 
    0xc9a239bc, 0x38dee8aa, 0x552835d3, 0xc4adad77, 0x3dcab288, 0x79c72823, 0x06afc0f6, 0x2a611097, 0xa5a45454, 0x626d3719, 0x743500ff, 0xcc32157b, 
    0x2eea2044, 0x92ae2559, 0x3eb3935f, 0xd4be167d, 0xd7d8d7a2, 0x1f8c744e, 0x722a7fba, 0x9fec3fe9, 0x6ecfbdca, 0x1c9d1b8f, 0x9f3eb4c8, 0x1f5a38a5, 
    0x5257f943, 0xe9fe50ba, 0xd245aafc, 0x4a7ff787, 0xfb448887, 0x639f7244, 0xa3f2873e, 0xf4d367ec, 0x28fbbfae, 0xa3f4777f, 0x777f28fb, 0xccfaa8f4, 
    0xd711ed45, 0x6b66785d, 0x10174c19, 0x80471334, 0x1a04c3c8, 0x7a4e7489, 0xee78b957, 0x1ac4ebde, 0x00ff956d, 0x09c343f6, 0x40e5195c, 0x38008e1f, 
    0xb8c68f63, 0x4b3b6b6b, 0x71fb842b, 0x21c81961, 0xeff1b831, 0xcc861d5f, 0x9b8a5aa5, 0x9c5aaadf, 0xa7329ad8, 0x3b297489, 0xb4a68dae, 0x87ccd77f, 
    0x0700ffc0, 0x5c1a8f75, 0x9dad0281, 0xb987b2aa, 0x128ccab9, 0xe663b433, 0xd68f7320, 0x00ff0bbb, 0xb65f8fd9, 0x5bca16f3, 0x985fa54b, 0xb8b09937, 
    0x9eefa1c7, 0xfed0b62b, 0xd146db2b, 0x4104359f, 0x80486386, 0xe3b0e7c2, 0x8f267ab5, 0x5b2b8de3, 0xc8ccd050, 0x1709e0e0, 0xf8f13569, 0xa535e7dc, 
    0xb4319e53, 0x00ff5a7b, 0xb8e8c77e, 0xaf2b8b0c, 0x46b59247, 0xfcf6dee7, 0xdac74735, 0x0f3582ef, 0x69495f0d, 0x6bc959a9, 0x3804673c, 0x0f9ef1e0, 
    0x7856f843, 0x7da5c7d2, 0x4ef5f11f, 0x47a571b3, 0x048b240b, 0x3b01cc4c, 0xdb03c7b2, 0x8323afa0, 0x333777c3, 0x79b7a108, 0x14113d64, 0x570c7f92, 
    0x497360d3, 0xadd1b062, 0x736fdd57, 0x0edbccf3, 0x4c75fcb2, 0x18e5162d, 0xab7b1fbd, 0x388efbf4, 0xb5fba369, 0xf747d320, 0x3eecd16b, 0x6a176b19, 
    0x224f6b24, 0xc7bce01c, 0x670c3f6e, 0xb445aff4, 0xb5a123f8, 0xb7641eac, 0x988fe062, 0x9fb48bf9, 0x46a5976f, 0x61c33a23, 0xd35f29fe, 0x53264c53, 
    0xe96e6398, 0xd377c9c2, 0xd5603eee, 0xad353b3c, 0x68e0efc7, 0x2612c5bc, 0x79ca8de1, 0x54117b04, 0xc0839186, 0x23bea2af, 0xe95ff2e9, 0xe8585ad3, 
    0x3a3d0bd2, 0xa459b766, 0x38559441, 0x71e24e1b, 0x95575cc7, 0x6fc3a643, 0x56d63532, 0x5207f22c, 0x9909b32b, 0x762e45bc, 0xe65efbac, 0xb02cacd8, 
    0x3b08d5f5, 0xebafd9f9, 0x9fe0a7d4, 0x8dbfda85, 0xb1b614f5, 0x57174588, 0x1a2b9fba, 0xec73af0f, 0xbf6fd02b, 0x5a10df65, 0x6c2e2d2e, 0x494049ef, 
    0xbbe5e5dd, 0x759d7f8e, 0xa1f81e5e, 0xc5906065, 0x4430a403, 0x20968802, 0xbdd61f38, 0x89f84127, 0x8a6a6ba5, 0xe072bc92, 0x27c0f47d, 0x295f93db, 
    0x4a33ce8f, 0xc2e93975, 0x7f2d5dd1, 0xb7dcfbbc, 0x522bcb24, 0x6e54c4e4, 0xc9b7d37d, 0x249ff86f, 0xcee19f78, 0xbf0be1b1, 0x92b05523, 0x57868ad9, 
    0xfac0c8fb, 0x06b1e230, 0xea2b3d9a, 0x7f738fcf, 0x4e67786b, 0xcf9181b4, 0x3975659e, 0x317001c9, 0x577d00ff, 0x77020d81, 0xccc22290, 0x24a8a2e7, 
    0xb70cfa9a, 0x0c339e34, 0x4b49d6aa, 0x9cf8c05f, 0xb70c07eb, 0x19352c1b, 0x575b4539, 0x0e6dafe6, 0xd2c36948, 0xf4781aa4, 0xf8b042af, 0x12dfad67, 
    0x55e3c156, 0x987cd3ea, 0x42aff9fc, 0xe9077ed1, 0xef566953, 0xdec22d7d, 0x14c3fa37, 0xb7e36083, 0x8857ebcb, 0x75f830ce, 0x9afe4a79, 0xcc72e198, 
    0xeefe3176, 0xf9d0f516, 0xe90becf7, 0xd217d847, 0xf8b6b1be, 0xed28e139, 0xff3449e2, 0x00d53100, 0xb19c3267, 0x49ad27c7, 0x7f0a00ff, 0xf400ffc1, 
    0xf4f71f0c, 0x798d00ff, 0xdff0892f, 0xfcc32fcb, 0x9e707dcf, 0xa3f9d562, 0x30f2bff7, 0x5a173ff5, 0x695284b5, 0x41de5bf2, 0x9091621e, 0xee24812c, 
    0x070f9ea7, 0x2b965883, 0xc67de263, 0x4799ad69, 0xc154482e, 0xbeca9fed, 0xa66f8173, 0x9fd8b108, 0x15dc2830, 0x7c479e54, 0x4d4ee71f, 0x5862521f, 
    0x754bc5e9, 0xa62698da, 0x94465b9e, 0x7db61a6d, 0x7aa600ff, 0x937a8df2, 0xedba70e6, 0x677efd67, 0x7ca769d2, 0xcce7d33f, 0xe69beeba, 0x9c27f303, 
    0x7361f8ad, 0x00ffec8a, 0x326df4b4, 0xe682e238, 0x44b90dc8, 0x8e244486, 0x5f7300c4, 0x17d66924, 0x2c823036, 0x396f83e5, 0xce1f288c, 0xb0588fa0, 
    0x9649fe8e, 0xe0fc8a54, 0x3180a433, 0xfab4ddf4, 0xc87235d6, 0x6ed67a56, 0xe6d79fde, 0x689dd376, 0xa2a6dd47, 0xc03eaadf, 0x588ed2fe, 0x599984d5, 
    0x86d02b93, 0xf1c86a5f, 0x87fdbf06, 0x84bbd766, 0x50060845, 0xa41ee583, 0xf8d0cbd7, 0xbc985dbf, 0x74ab7e7a, 0x56f9408c, 0xb23d9ee0, 0xe70a3f4e, 
    0xaf7d4dfc, 0xd594dbdc, 0xe1d96bb5, 0xf74218dc, 0xa723c32e, 0x45bddfcb, 0x3a9f9a1c, 0xdaada8e6, 0x9dd699da, 0x7ed40665, 0xedad8f7d, 0xa6b4bf6f, 
    0xc723cd31, 0x32b2ca70, 0x9eca613b, 0x03e4a984, 0xd9d335db, 0x79051283, 0x618c29e4, 0x3518e1ab, 0xe4e256fd, 0xd3cd15cb, 0x6b7e48dc, 0x93d28e80, 
    0x9311d3fe, 0x2643d7f8, 0x5b8be3ab, 0xfaeb1164, 0xb1e8a982, 0xfc40cace, 0x7c55c540, 0xdacb2e9a, 0x3d0cf2a5, 0x31cad959, 0x9ffacc6f, 0xac45f15f, 
    0x190be642, 0xd69ab9a0, 0x30c65c4c, 0xc34d3fe6, 0x5acb1539, 0x92f85a5c, 0xb7644957, 0xa5787fc6, 0xcfd73615, 0x9931f15f, 0xb9079a80, 0x959761bb, 
    0x7bc8bb8a, 0xcfc939b1, 0xb13f9a5c, 0x6f0929f5, 0xfc7aecec, 0x3ca53598, 0xd92885be, 0xf4bfd755, 0xaaede7cc, 0x4e939b4f, 0x3e479fda, 0x2d2de097, 
    0x5aeb5df7, 0x26af7274, 0xfcb13231, 0xddba2697, 0xfef0523f, 0xbd5ba79f, 0x8289e58d, 0x8d110d55, 0xa78f73d7, 0xfac9d75c, 0x6b759576, 0xb10cfb96, 
    0x4761cc77, 0x4e5da2f5, 0x1e451dc6, 0x421d1679, 0x2843162e, 0x95d85759, 0x80aba839, 0x594757a7, 0xa7ebb8bf, 0xe3d5943a, 0x1fbd2f4d, 0x0cad2e5c, 
    0x409689f1, 0x9eaac4c8, 0xaca823a3, 0xfe555ffd, 0xe992b3ce, 0x648c6e10, 0xfbcaa032, 0xe2c9cbd7, 0xd9ce53ed, 0x47dcaa61, 0x6e1bc821, 0x5be00f4e, 
    0x4be28915, 0xcb1100ff, 0xeba8cb6c, 0x276dcf17, 0x62bb2606, 0xc833ea1b, 0x546569ac, 0x1575d2dc, 0x5aad02bd, 0xfcf2adbc, 0x756ca9cf, 0x228feddf, 
    0xd7606749, 0xcc44e629, 0x4da732d8, 0xb8af3bca, 0x388dbae2, 0x26502218, 0x2674a47d, 0xd7b615be, 0xfc7816b5, 0x24898bbb, 0xe668448d, 0x47d11d39, 
    0x40820445, 0xbae2801d, 0x1a4fb548, 0x901c6541, 0x718c7a6b, 0x8e63f9b8, 0x023f5256, 0xe5abad38, 0x4b54d930, 0xaf8767e4, 0xe7968b3f, 0xffe17bda, 
    0xf98d9e00, 0xf91fbed1, 0x7c9ddfe8, 0x1bdff64f, 0x3ac42737, 0x6f9e2790, 0xf6d1f8cf, 0xd07f1bbf, 0xe07fa9c5, 0x1a00ff79, 0xa7c5fee5, 0x913f00ff, 
    0x9faaf5d7, 0x00ffe9f3, 0xdb7a235f, 0x7df88cf6, 0xa63c4814, 0x5b3e5018, 0x7ea70756, 0x34fcc76a, 0x39b2c39f, 0xad7d728a, 0xe56bfcdb, 0x5566bc46, 
    0x075e23f9, 0x75891445, 0x17906d24, 0xfa15f9fe, 0x03bce002, 0xfe9fe757, 0x13f9bf04, 0xd600ffe7, 0x90dc66bc, 0x9ff99ffb, 0xc300ff53, 0x643bfc45, 
    0x28262d28, 0x43f6db78, 0xa8757a8c, 0xf885f6df, 0x4d53327e, 0xe6f5df7d, 0xf95a7f46, 0xb85cd3ba, 0x7facee87, 0xafabc0f7, 0x18e69be2, 0x05087eca, 
    0x60a8fe65, 0xff53d293, 0x00ffc000, 0xd67f52fb, 0x11fb5adc, 0x7fc000ff, 0xfff99ee0, 0xe01b0d00, 0xa54ba492, 0x63f8fd27, 0xdf50cc8f, 0xf6c357b4, 
    0x2ccafe39, 0x9ad8a6fe, 0x57f3c2f9, 0x3e3fb8b9, 0xf6a92a3f, 0x75a54fa9, 0x0df083c3, 0xf87f9a5f, 0x7f01fc17, 0xb1ce58ad, 0xff03fe87, 0x71fa0400, 
    0x02df68bf, 0x994eb371, 0x7f03ed79, 0xd1fe348d, 0xfc94083e, 0xee8d64da, 0x6bfd6360, 0x4bb45fe6, 0xf3174feb, 0x55fa432f, 0x2fc0103e, 0x0bfc3fb5, 
    0x00ff00fe, 0xfb63acd6, 0xc000ff10, 0xfd22a74f, 0x401f3ea2, 0xc433fb00, 0xb4d5c640, 0xe66c8f6c, 0x8600ffa6, 0x4776f891, 0xffc90dcd, 0xff66b700, 
    0x62f91a00, 0xca73c76b, 0xa39d7b26, 0x75b91035, 0x00ffc239, 0xffb822df, 0x03dcd400, 0xf87f9ed7, 0x2300ff12, 0x18abf54f, 0xfe87e4b4, 0x0400ff03, 
    0xd1fea0fa, 0x2a880e7f, 0x7a2ae72c, 0x7f1eb28f, 0xa1fd615a, 0xf9281f7e, 0xb13dd934, 0x5feb8f65, 0x13ebda34, 0x1fd146c2, 0xffae82e2, 0x7b4dc200, 
    0x1ea000b7, 0xfe6505c8, 0xd29660a8, 0xff05fe9f, 0xfd8bda00, 0x00ffc56b, 0x1ff07f2c, 0x07d027f8, 0x57f08cf6, 0xb3a1f421, 0x83dabdfe, 0x3efc44fb, 
    0x92a4dd38, 0x71aea547, 0xeb5d395f, 0xe7033737, 0xa9827e60, 0xa50fa91b, 0x3084c774, 0xff4fed2f, 0x00ff0200, 0xd3fa4f80, 0xff58fe8c, 0xf03fe000, 
    0xe13fa74f, 0x8f053ca3, 0x1f9c4c97, 0xd61f766b, 0x4fb4df9a, 0xe9e0e581, 0x00ff3073, 0xeb9fdc6a, 0xa27d325f, 0x48de724a, 0x86ea5fb5, 0xffa97d01, 
    0xf05fe000, 0xc669fd03, 0xfc0fb13f, 0xf409fe07, 0xf0eff8a1, 0x452789f9, 0xfd244f62, 0x8d00ff90, 0xbebdf01f, 0xd000ff1e, 0xe000ff14, 0x1a00ff21, 
    0x46fbbbf9, 0xb43f5a6f, 0xfda3f566, 0x347fc154, 0x2ff000ff, 0x00ff02f8, 0xc97fb159, 0xfe07fc0f, 0x918f1a09, 0x8c90827e, 0x51f8429a, 0x99aca6f4, 
    0x3dee6b3d, 0x8a8f95ad, 0xa12cf7d6, 0x848c5320, 0x9beb3477, 0x1e2eec59, 0x099e980b, 0x71a3e190, 0x7b9d2982, 0xf43a3d57, 0xa754c5ea, 0x4df5e224, 
    0x26f29a6a, 0x8931eae9, 0x6953fc6e, 0x440536d2, 0xa8aef664, 0xabc1b6d4, 0x6a8f4b1f, 0x03a9398c, 0x3bb87353, 0xd31c27a2, 0x82af2c0d, 0x6b26216a, 
    0x435bda9f, 0x61a9375b, 0xa888e529, 0xd94dea51, 0x073a9f15, 0x3431a26e, 0xdb95e2cc, 0x6bbd8c8a, 0x8f5bd819, 0x18352fcd, 0x6e6a787a, 0xbc500d77, 
    0xa81bcdd1, 0x2ee84add, 0xb53f04cf, 0xf88f110b, 0x07fec746, 0xf6baf67f, 0x573a84df, 0x4428be8d, 0xb2f0a52f, 0x68477778, 0x6ade91c4, 0xe00c4c37, 
    0x41cb03ee, 0x7af9481e, 0x46100c9c, 0xecdf5c73, 0x5937fb77, 0x789056eb, 0x8236c5ef, 0xe9e402ea, 0x94eb7c5a, 0x7706a77d, 0x6164d453, 0x7982e341, 
    0xe2d7bde2, 0xf05ded47, 0x9ce100ff, 0x416dd2c6, 0x2441bdf5, 0xd2b3a468, 0x15d1ca02, 0xc19243c6, 0x39d33346, 0xafb123c8, 0xc4df5ce2, 0xe57523ee, 
    0xcf67ca80, 0x20f96e51, 0x6df8f2d2, 0x3d97deea, 0x61c521ee, 0xa32cb7be, 0xd65e3087, 0x5e297eb4, 0xf8f6454d, 0xc9d575ad, 0xb39a9ea4, 0x0cdf35d4, 
    0x8323de69, 0xbbbae565, 0x03252185, 0x411d990e, 0xbe2200ff, 0x67cdf86a, 0x2285efe2, 0x0c4ffb6b, 0x0f1fe2c7, 0xfe86b422, 0xc21be10b, 0x998fa5aa, 
    0x01474219, 0xc791548e, 0xe35e7162, 0x2fe34ff1, 0xe8103e86, 0x6fd76dbf, 0x62993bd2, 0x142ced91, 0x55966be6, 0x0e806a27, 0x8e1b3801, 0x3c191614, 
    0xc62fe7d7, 0x25be8e5f, 0xfdacd5f8, 0xec9b57a7, 0x4d2e6cfa, 0x1f0395a6, 0x1fd00126, 0x5c1d9ff6, 0x1c18d7f3, 0x0670c657, 0x7af9c473, 0x71d7c1e4, 
    0xe69276c3, 0xf6047e5d, 0x77597bd7, 0xc3673ebb, 0xcc3283ec, 0xf06afb6a, 0x5f6500ff, 0xf8afcdcf, 0xeed1d32c, 0x36bbcaef, 0x53fb6d76, 0xb2cc7f33, 
    0xff3ff03f, 0x7fd3b500, 0xfe9ba8e1, 0x00ffa185, 0xaefddf81, 0xfd8a26bc, 0xce6efddf, 0xffe700ff, 0x0f4bfe00, 0x88fe44fe, 0xb25500ff, 0x2e00ff75, 
    0x7f69f23f, 0x7fbb47f2, 0xfd3751c3, 0x00ff430b, 0x5dfbbf03, 0x18a9fd28, 0x3fb4cc7f, 0x00ff3bf0, 0x5184d7b5, 0xce6ffd4f, 0xffe700ff, 0x0f4bfe00, 
    0xd53f44fe, 0x7cfe9f6c, 0xffd2e47f, 0x758fe400, 0xb980da7f, 0x5f23fccf, 0x00ff3ff9, 0xf683e9da, 0xcbfcc79c, 0xff3ff97f, 0xc3ebda00, 0x00ffa968, 
    0xf9af735b, 0x00ff00ff, 0x00ffc392, 0xb1fa1f91, 0x9fcf7f94, 0xfc5f9afc, 0xfbcbee91, 0x00ffed50, 0x00ff6799, 0xfb00ff27, 0xd47e3c5d, 0x2cf21fb8, 
    0x00ffe47f, 0xaf6a00ff, 0xfa97a206, 0xcf7f9dd9, 0x96fc00ff, 0xbf88fc1f, 0xff9d6cd5, 0xfc9fcb00, 0x91fc5f9a, 0x51fbcfee, 0xa0e1e916, 0x00ffb73e, 
    0xff99aefd, 0xdf3c0d00, 0xfc8f2df4, 0xed00ff0e, 0x6e9ae275, 0xeaab739d, 0x7116b636, 0x5277f734, 0x9dc410a4, 0x5585d85d, 0x2b90e41e, 0x6f68bfd8, 
    0xc35f3a83, 0x5ac2337d, 0x17e687a7, 0xa9ed5dba, 0x8ebabab5, 0xf2927446, 0x131c8923, 0x033837d0, 0x75d7908f, 0xebcf222e, 0x8588a950, 0xbf16767f, 
    0xdfae0ebb, 0x3cf6f7cb, 0x414ef9ba, 0xc151c585, 0xd5efa554, 0xb6b22ebf, 0x6dbefa8a, 0xd9bbad2f, 0xc37f2cf6, 0x0bfd374f, 0x0300ff63, 0x385dfbbf, 
    0x3f0cd47e, 0xf81f5be6, 0xda00ff1d, 0x39bcc7eb, 0xfa6859aa, 0x1a6a5c9a, 0x6bbbae35, 0x7769af8d, 0x19a9d12c, 0x74a22119, 0x0c04d860, 0x1ae43992, 
    0xb68eeff4, 0xedf0145e, 0xbc6d8597, 0x4d0be13f, 0x41636d26, 0xbb27d6b3, 0x49539737, 0x6392cd13, 0x76a53c8c, 0x29cbb880, 0x9ab13d27, 0x7726f129, 
    0xaceb8c52, 0xd3b65c52, 0xad5d5f95, 0x0af15bee, 0x43513ef9, 0xf00a4b15, 0xb4f77c92, 0xd556b494, 0xee4ff3de, 0x00ffd44c, 0xfa6fa086, 0x07fec716, 
    0x3fbaf67f, 0xfe1ba8e1, 0x00ffb185, 0xaefddf81, 0xe38a2abc, 0xb35b00ff, 0x00fff9bf, 0xc39200ff, 0x3d9100ff, 0x285ff55f, 0x3f9f00ff, 0xf9bf34f9, 
    0xdabfee23, 0xdf4ce2b3, 0x7817be07, 0x1a7ec177, 0x352eac91, 0xe76f510b, 0xdad07042, 0x29a48a44, 0x06920b1d, 0xe677037d, 0x71af14be, 0x63bca5fd, 
    0x275dc427, 0x7c89bfe1, 0x9d3b32df, 0x83cadb10, 0x21455da2, 0x723bc659, 0x2b82fb54, 0xaef2abc3, 0x1eacc11e, 0x7d2f2905, 0xad3e39b9, 0x63c3afdd, 
    0xd5b28493, 0x338ae596, 0xa494bd5f, 0x73b9fae6, 0x6be9ef34, 0xf128be1a, 0x5de3af5e, 0x5c5b7d6a, 0xf5d427d4, 0x79beb119, 0xa00327db, 0xb003a003, 
    0xa8b20218, 0x318ebea2, 0x15a3228c, 0x84b18f64, 0x102a4e23, 0xb6644b56, 0x55144541, 0x45511416, 0x45511400, 0x52511400, 0xdcb3445b, 0x96cc1bc5, 
    0xa615eee8, 0xc1583194, 0x09dab13c, 0x27c0ebc0, 0xa2161ad0, 0xa6e7ca6e, 0xeed0157c, 0xc5774d21, 0x6f674b71, 0x9b5ba571, 0xefaf357d, 0xbe46b461, 
    0x1e421598, 0x69cc4567, 0xe78c49e6, 0xac57bc28, 0x95f03e7c, 0x7f8d00ff, 0x78169f67, 0x2e7dfe0e, 0xdcd254f3, 0x583a1aeb, 0xafb7f6ea, 0x58a84bc6, 
    0x3ba37265, 0x33034886, 0x48fc94d7, 0x5a8400ff, 0x1e9ec0c3, 0xe22dfcd1, 0x3b5e4deb, 0x36ead35d, 0x6f7367e9, 0x93dbcd2d, 0x209edffb, 0x459888ac, 
    0x5b86c1dc, 0xef34e603, 0x56c6b7d9, 0x95f8025e, 0x7a6aac6f, 0x942e1af4, 0x91573c91, 0xfdf20ccf, 0x180426aa, 0x928dc4c2, 0xb0f9d60e, 0xa5d7513e, 
    0xad0e767d, 0x9e222e1c, 0x5abca316, 0x8f529371, 0x7db5be2f, 0xd9afd3b4, 0xa6f9e647, 0x6098151f, 0x131466eb, 0xa1948c53, 0xff7c4e17, 0xea7eba00, 
    0x7bef474b, 0x36e965df, 0xbdae3cbd, 0xff85f663, 0xe7f05b00, 0x2badc4fe, 0x7a4000ff, 0x0cefe3ad, 0x00ff0e78, 0xf812f7c7, 0x6dfac66b, 0x652f87bf, 
    0x2cdac779, 0xc1ac512f, 0x2cf69820, 0xede47007, 0xdbc165c7, 0x1d5f3ac1, 0xe2297c6f, 0x5c0b2f2b, 0xb32f1ee8, 0xf4d1a6d5, 0x6b1e3d2b, 0x0c756543, 
    0x0639bc92, 0x5d102f44, 0xcc7076a7, 0xd77cc708, 0x1c7ba89c, 0x710e223e, 0x515aab7a, 0xbaa6cfd6, 0x8bb1d49e, 0x55c18d15, 0xd4a4398d, 0x5c737aaf, 
    0x4fca4ab7, 0x4ddfc996, 0xf578e05f, 0x115e5114, 0x4dc3e6f5, 0x223d7823, 0xbf24c62e, 0xe5275466, 0x20196352, 0xe76a2776, 0x1e2b3de8, 0x54e6bfb5, 
    0xdfb700ff, 0x3559a7fd, 0x7a44ea11, 0x56511485, 0x14455158, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x14455100, 0x00d9ff01, 
};
};
} //namespace BluePrint

BP_NODE_DYNAMIC_WITH_NAME(AIDenoiseNode, "AI Denoise", "CodeWin", NODE_VERSION, VERSION_BLUEPRINT_API, BluePrint::NodeType::External, BluePrint::NodeStyle::Default, "AIFilter#Video#Enhance")
